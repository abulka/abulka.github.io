<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy Bulka&#39;s Design Patterns on Andy Bulka</title>
    <link>https://abulka.github.io/patterns/</link>
    <description>Recent content in Andy Bulka&#39;s Design Patterns on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://abulka.github.io/patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HexMVC</title>
      <link>https://abulka.github.io/patterns/hexmvc/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc/</guid>
      <description>Andy Bulka,&#xA;March 2012&#xA;A new, architectural pattern for building multi-platform, scalable applications based on ideas from the Hexagonal Architecture pattern + Model View Controller (MVC).&#xA;TLDR: Write the application layer but don&amp;rsquo;t import or use any libraries directly. Wrap all &amp;ldquo;library&amp;rdquo; calls with Adapter objects, so that you can switch to other libraries easily.&#xA;TLDR: &amp;ldquo;Libraries&amp;rdquo; can amazingly, include the application data Model itself, Database and persistence layers, the entire GUI and all calls to server APIs.</description>
    </item>
    <item>
      <title>Relationship Manager - Design Pattern</title>
      <link>https://abulka.github.io/patterns/relationship-manager/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/relationship-manager/</guid>
      <description>Abstract Basically describes a lightweight, in-memory Object Database.&#xA;Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional &amp;ldquo;pointer&amp;rdquo; and &amp;ldquo;arraylist&amp;rdquo; techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved, especially when back-pointers are involved.</description>
    </item>
    <item>
      <title>MGM Pattern</title>
      <link>https://abulka.github.io/patterns/mgm-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/mgm-pattern/</guid>
      <description>Introduction This article is twenty years old - its ideas are now simplified and clarified at MVCA pattern&#xA;A live demo running in a browser.&#xA;Tip for understanding this article: This is arguably the traditional MVC pattern with terminology tweaked and clarified, and updated for &amp;lsquo;modern&amp;rsquo; times where Views are no longer manually drawn but are instead off the shelf GUI widgets or DOM elements.&#xA;Mediator == Controller GUI == View The Pattern Download as pdf.</description>
    </item>
    <item>
      <title>MVC-App Architectural Pattern</title>
      <link>https://abulka.github.io/patterns/mvca-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/mvca-pattern/</guid>
      <description>Introduction This article describes the &amp;ldquo;MVC-App Architectural Pattern&amp;rdquo; which you can use to design your software applications, when you need to support a GUI. It is not a framework, it is a small set of principles which let you build sane, modular GUIs in any language, using any off the shelf UI components.&#xA;For the original, deprecated, MGM pattern which initially inspired this &amp;ldquo;MVC-App Pattern&amp;rdquo; pattern, see MGM pattern&#xA;TodoMVC-OO This is the classic Javascript TodoMVC app implemented without a framework üòÑ, simply using plain Object Oriented programming + a traditional MVC design pattern.</description>
    </item>
    <item>
      <title>Transformation Interface Design Pattern</title>
      <link>https://abulka.github.io/patterns/transformation-interface/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/transformation-interface/</guid>
      <description>Introduction The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back again. A pair of methods on some class e.g. load/save are often the signature of a Transformation Interface.&#xA;The Pattern Download as pdf.</description>
    </item>
    <item>
      <title>Design Pattern Automation</title>
      <link>https://abulka.github.io/patterns/design-pattern-automation/</link>
      <pubDate>Fri, 04 Jan 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/design-pattern-automation/</guid>
      <description>Introduction As design patterns become more mainstream, various IDE&amp;rsquo;s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you.</description>
    </item>
    <item>
      <title>Appendix: Musings on Design Patterns</title>
      <link>https://abulka.github.io/patterns/musings-on-patterns/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      <guid>https://abulka.github.io/patterns/musings-on-patterns/</guid>
      <description>Capturing hard-won software design experience in the form of design patterns and architectural patterns is a noble cause that everyone can contribute to.&#xA;You can contribute by writing patterns and maybe even coming to a Plop patterns conference.&#xA;Basically when you see a software development technique a few times, and see that it isn&amp;rsquo;t yet documented - write it up in Pattern format and give it a name!&#xA;A pattern is more than just a &amp;ldquo;tip&amp;rdquo; or technique though - a pattern represents an abstract idea - that can be implemented in various ways depending on your circumstances.</description>
    </item>
    <item>
      <title>Appendix: My KoalaPlop Patterns</title>
      <link>https://abulka.github.io/patterns/appendix-koala-plop/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      <guid>https://abulka.github.io/patterns/appendix-koala-plop/</guid>
      <description>Andy&amp;rsquo;s Published Design Patterns The four patterns MGM, RM, TI and Pattern Automation are substantial works which have been presented at KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs) in both 2000 and 2001. My shepherds (paper peer reviewers) were:&#xA;Jim Coplien (MGM pattern) Ali Arsanjani (TI pattern) James Noble (RM pattern). (Design Pattern Automation) was not peer reviewed before being presented and published. These final versions also incorporate comments and reviews from the attendees of KoalaPlop 2000 and 2001.</description>
    </item>
    <item>
      <title></title>
      <link>https://abulka.github.io/patterns/hexmvc-adapters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc-adapters/</guid>
      <description>Hexmvc Adapters - Appendix Andy Bulka,&#xA;March 2012&#xA;Back to main HexMVC Pattern.&#xA;Adapter Design Patterns In HexMvc the adapter implementing interfaces is everywhere. What pattern is this? Obviously Adapter Pattern is a leading candidate.&#xA;Talking to Interfaces vs Adapter Pattern You could just call it the talking to Interfaces pattern. As GOF¬†says in its introduction, one of the main two OO principles is ‚ÄúProgram to an interface, not an implementation‚Äù (Gang of Four¬†1995:18).</description>
    </item>
    <item>
      <title></title>
      <link>https://abulka.github.io/patterns/hexmvc-eventing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc-eventing/</guid>
      <description>Appendix - Hexmvc Events Andy Bulka,&#xA;March 2012&#xA;Back to main HexMVC Pattern.&#xA;On Eventing Eventing is up to you to implement any way you like. You need to be able to broadcast ‚Äòevents‚Äô which cause methods to be run on an arbitrary number of observers. The broadcaster is ignorant of the exact identity of the observers. Its the observer pattern.&#xA;A lightweight synchronous, eventing system I recommend a lightweight synchronous, eventing system / observer pattern that is based on method calling on objects.</description>
    </item>
    <item>
      <title></title>
      <link>https://abulka.github.io/patterns/hexmvc-scraps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc-scraps/</guid>
      <description>Scraps Renamings of pureMvc terms to &amp;ldquo;Adapter&amp;rdquo; PureMvc uses the term one or more &amp;ldquo;mediators&amp;rdquo; in front of gui plumbing - all sitting behind the term &amp;ldquo;View&amp;rdquo; PureMvc uses the term one or more &amp;ldquo;proxies&amp;rdquo; in front of model plumbing - all sitting behind the term &amp;ldquo;Model&amp;rdquo; PureMvc talks about many &amp;ldquo;commands&amp;rdquo; objects which all sit behind the term &amp;ldquo;Controller&amp;rdquo; The Application &amp;ldquo;facade&amp;rdquo; is the centre. The problem with these terms are that is debatable that these things are really proxies and mediators etc.</description>
    </item>
  </channel>
</rss>
