<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Andy Bulka</title>
    <link>https://abulka.github.io/</link>
    <description>Recent content in Home on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://abulka.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dedent for Dart</title>
      <link>https://abulka.github.io/projects/libraries/dedent-dart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/dedent-dart/</guid>
      <description>Dedent for Dart Dedent - Remove any common leading whitespace from every line in text. Ported from Python.&#xA;https://pub.dev/packages/dedent</description>
    </item>
    <item>
      <title>Electron-Flask App Generator</title>
      <link>https://abulka.github.io/projects/libraries/electron-flask-app-gen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/electron-flask-app-gen/</guid>
      <description>Electron-Flask App Generator Yoeman project generator to create an Electron app running a Flask server inside itself. Deployable via PyInstaller and Electron Forge packager.&#xA;Create an Electron App project that auto-starts a Flask server the electron app can call for services. Deployable as a single App that users can double click on and run.&#xA;https://github.com/abulka/generator-electron-flask&#xA;_-----_ ╭──────────────────────────╮ | | │ Welcome to the amazing │ |--(o)--| │ generator-electron-flask │ `---------´ │ generator!</description>
    </item>
    <item>
      <title>EuroPi - Trigger to Gate</title>
      <link>https://abulka.github.io/projects/libraries/europi-trigger-to-gate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/europi-trigger-to-gate/</guid>
      <description>Trigger to Gate Script for EuroPi This script allows you to convert trigger into a gate signal.&#xA;I originally wrote this script because my 2hp MIDI module clock outputs 6ms triggers, which are too short to inter-operate with most of my Eurorack modules, which require longer gates e.g. 200ms.&#xA;Using my disting module or buying a Doepfer A-162-2 Dual Trigger Delay module just for this seemed overkill, so I wrote this script for my existing EuroPi module, which at the time, did not have a trigger to gate script.</description>
    </item>
    <item>
      <title>EuroPi - Utility Classes</title>
      <link>https://abulka.github.io/projects/libraries/europi-script-utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/europi-script-utils/</guid>
      <description>Introduction My Trigger to Gate script for EuroPi uses some utility functions I developed, that might be useful for other EuroPi scripts:&#xA;KnobWithHysteresis KnobWithPassThrough Scheduler Rather than each EuroPi script inventing its own hyseresis mitigation and knob pass-through logic etc., these utility classes can be used by any EuroPi script that needs them. You can install them into the lib/contrib/experimental directory of the EuroPi software, or in a separate lib/contrib/utils directory - you can put them wherever you want, even copy and paste them into the body of your script.</description>
    </item>
    <item>
      <title>Image Presenter</title>
      <link>https://abulka.github.io/projects/libraries/image-presenter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/image-presenter/</guid>
      <description>Image Presenter An image presentation tool, where you can click and zoom into various parts of a single image.&#xA;Relevant text notes associated with each sub-area would appear when zoomed in. Arrow keys/buttons allow you to step through a narrated sequence of zooms, so that you get can be carefully guided through an art image, or diagram.&#xA;Two demo prototype versions, using different underlying technologies:&#xA;https://atug.com/image_presenter/layerjs/ https://atug.com/image_presenter/zoomooz/ Source code currently unreleased.</description>
    </item>
    <item>
      <title>Jupyter Notebook Tools</title>
      <link>https://abulka.github.io/projects/libraries/jupyter-notebook-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/jupyter-notebook-tools/</guid>
      <description>Jupyter Notebook Tools A way of implementing complex calculators incl. scrolling text area UI widgets within Jupyter &amp;amp; Colaboratory Notebooks.&#xA;Scrolling Textareas for Jupyter Notebooks Scrolling Textareas in a Python Jupyter Notebook, allows building a kind of &amp;ldquo;Calculator Playground&amp;rdquo;.&#xA;Various Jupyter Notebooks at https://bitbucket.org/abulka/jupyter_play/src/master/ (private)&#xA;Gist of the scrolling textarea technique: https://gist.github.com/abulka/3043e8a4d78d2e26f872542524a0aa3e (public)&#xA;Google Colaboratory A way of implementing UI scrolling regions within Google Colaboratory Notebooks. Google Colaboratory, or &amp;ldquo;Colab&amp;rdquo; for short, is a version of Jupyter Notebooks, and allows you to write and execute Python in your browser.</description>
    </item>
    <item>
      <title>Relationship Manager for Python 3</title>
      <link>https://abulka.github.io/projects/libraries/relationship-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/relationship-manager/</guid>
      <description>Relationship Manager A lightweight Object Database (no SQL used) class for Python 3&#xA;https://pypi.org/project/relationship-manager/</description>
    </item>
    <item>
      <title>Snippet Creator</title>
      <link>https://abulka.github.io/projects/libraries/snippet-creator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/snippet-creator/</guid>
      <description>Snippet Creator This Visual Studio Code extension helps to automate snippet creation. Select the code you want to create snippet from and use command Create Snippet from the command palette or your custom keybind.&#xA;https://github.com/abulka/vscode-snippet-creator</description>
    </item>
    <item>
      <title>Snippets Explorer</title>
      <link>https://abulka.github.io/projects/libraries/snippets-explorer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/libraries/snippets-explorer/</guid>
      <description>Snippets Explorer Visual Studio Code extension which displays all available language snippets in a TreeView&#xA;https://github.com/abulka/vscode-snippets-explorer</description>
    </item>
    <item>
      <title>Chord Jammer</title>
      <link>https://abulka.github.io/projects/websites/chordjammer/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/chordjammer/</guid>
      <description>A midi web app that lets you play chords with 1 finger in the left hand and jam safely in the right hand. As you change chords, the rh notes are filtered so you always play good sounding notes.&#xA;Try it out at Chord Jammer&#xA;Code&#xA;~/Devel/midi-play/webmidijs-play Sample config export let project = { chords: { &amp;#39;C3&amp;#39;: { lhchord: Em7Chord, rhnotes: EmScaleMelodic, }, &amp;#39;D3&amp;#39;: { lhchord: AmAdd9Chord, rhnotes: EmScaleNatural, }, &amp;#39;E3&amp;#39;: { lhchord: CM9Chord, rhnotes: EmScaleNatural, }, &amp;#39;F3&amp;#39;: { lhchord: BmAdd11ChordInversion1, rhnotes: EmScaleNatural, rhnotes2: EmScaleHarmonic, rhnotes3: EmBlues, } } } Single finger Chords With the project config above</description>
    </item>
    <item>
      <title>GitUML</title>
      <link>https://abulka.github.io/projects/websites/gituml/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/gituml/</guid>
      <description>UML visualisation for Git repositories (website app).&#xA;Understand code quickly: Automatically generate UML class diagrams from source code residing in git repositories. Diagrams automatically update when you push code using git.&#xA;Visit GitUML now, create a free account and begin creating UML diagrams and documentation.</description>
    </item>
    <item>
      <title>Javascript RPN calculators</title>
      <link>https://abulka.github.io/projects/websites/rpn-calcs/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/rpn-calcs/</guid>
      <description>These RPN calculators are programmable in Javascript, thus taking the vintage HP calculator paradigm and adding a modern language.&#xA;Rpn-calc Here is the built in Javascript code editor.&#xA;Parameters to Javascript functions are taken off the RPN stack. Return values from Javascript functions are pushed onto the RPN stack.&#xA;https://atug.com/jsrpncalc-web/&#xA;Rpn-calc2 A completely new implementation, also programmable in Javascript. Define interactive UI buttons and sliders.&#xA;https://atug.com/jsrpncalc2/</description>
    </item>
    <item>
      <title>Pynsource</title>
      <link>https://abulka.github.io/projects/apps/pynsource/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/apps/pynsource/</guid>
      <description>Visit pynsource.com.&#xA;Pynsource is a UML tool for Python a desktop App for Mac, Window and Linux.&#xA;Pynsource imports Python code and features zoom, Ascii and PlantUML views and Auto Layout&#xA;Community Edition is free, fully functional and open source - check out the Pynsource GitHub repository.&#xA;Buy the Pro Edition for $20 to unlock the zoom feature and other pro features.&#xA;Visit the Pynsource Home Page</description>
    </item>
    <item>
      <title>Python to RPN</title>
      <link>https://abulka.github.io/projects/websites/pyrpn/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/pyrpn/</guid>
      <description>A Python to HP42S RPN converter website www.pyrpn.atug.com Allows you to program your old vintage HP Calculator in Python!&#xA;See also my blog post How I used the Python AST capabilities to build a Python to Rpn converter.&#xA;You write code in a high level structured language (which happens to be Python 3 syntax), hit a button and RPN is generated. You then paste the RPN into Free42 or transfer it to your DM42 (by creating a raw) - and it runs.</description>
    </item>
    <item>
      <title>Rationale</title>
      <link>https://abulka.github.io/projects/websites/rationale/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/rationale/</guid>
      <description>As CTO of Austhink, I technically managed and helped architect Rationale - an argument mapping application, written in C# and .NET. This was done together with a great team of developers and thinkers incl. the CEO Tim van Gelder.&#xA;Rationale - the desktop app&#xA;Rationale is now available as an online web app at https://www.rationaleonline.com/&#xA;🎗 Disclaimer: The web version of Rationale was developed by another team, using the source code and design of the desktop Rationale as a base.</description>
    </item>
    <item>
      <title>Toolback</title>
      <link>https://abulka.github.io/projects/websites/toolback/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/toolback/</guid>
      <description>Toolback - Low Code App Builder.&#xA;An online programming environment, with low code features. Drag and drop a UI and add scripts directly to components. Generate websites and desktop apps (electron based) with a click of a button.&#xA;Toolback Toolback is the drag and drop UI builder and online, Low Code, app building IDE.&#xA;Preview your app with a key press.&#xA;Export to a website or electron app - one click!</description>
    </item>
    <item>
      <title>HexMVC</title>
      <link>https://abulka.github.io/patterns/hexmvc/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc/</guid>
      <description>Andy Bulka,&#xA;March 2012&#xA;A new, architectural pattern for building multi-platform, scalable applications based on ideas from the Hexagonal Architecture pattern + Model View Controller (MVC).&#xA;TLDR: Write the application layer but don&amp;rsquo;t import or use any libraries directly. Wrap all &amp;ldquo;library&amp;rdquo; calls with Adapter objects, so that you can switch to other libraries easily.&#xA;TLDR: &amp;ldquo;Libraries&amp;rdquo; can amazingly, include the application data Model itself, Database and persistence layers, the entire GUI and all calls to server APIs.</description>
    </item>
    <item>
      <title>GUI Showdown</title>
      <link>https://abulka.github.io/blog/2022/02/11/gui-showdown/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2022/02/11/gui-showdown/</guid>
      <description>Andy&amp;rsquo;s GUI Showdown - The same application, implemented in various ways - which is better, cleaner, more understandable etc?&#xA;Like the TodoMVC &amp;ldquo;Rosetta Stone&amp;rdquo; project, but uses a different example application, and includes Python as well as Javascript implementations.&#xA;This project was originally intended to see if an ECS (Entity Component System), which is commonly used in building games, could be used to implement a &amp;ldquo;normal&amp;rdquo; GUI application.&#xA;Five Javascript implementations: Live Demo of all Javascript implementations.</description>
    </item>
    <item>
      <title>History of this Blog</title>
      <link>https://abulka.github.io/blog/2022/01/21/history-of-this-blog/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2022/01/21/history-of-this-blog/</guid>
      <description>These blog posts are often based on presentations that I have given to live audiences at various programmer enthusiast user groups or conferences.&#xA;Talks given but unfortunately no website presentation materials 2007 July - Object Role Modeling - What is it? 2006 October - More on UML Pattern Tools 2004 October - Design Patterns found in the C# Language 2004 June - Object Thinking - Book Review 2003 Aug - Pattern Automation and UML 2003 January - Object Orientation, UML and Delphi 2002 December - Mediator Dialog Patterns 2002 October - An Introduction to Refactoring Blog Entries in Date Order 2019 - HexMVC Design Pattern (coming soon&amp;hellip;) 2018 June - How I used the Python AST capabilities to build a Python to Rpn converter 2011 - Developing a Layout Algorithm for UML diagrams 2011 - Easy Dependency Injection and Mocking in Ruby 2011 - Recursively Cloning Directories in Ruby using Hard Links 2010 - Ruby vs.</description>
    </item>
    <item>
      <title>Literate Code Mapping</title>
      <link>https://abulka.github.io/projects/big-ideas/lcodemaps/</link>
      <pubDate>Mon, 23 Nov 2020 12:43:14 +1100</pubDate>
      <guid>https://abulka.github.io/projects/big-ideas/lcodemaps/</guid>
      <description>Diagramming Methodology Specification&#xA;Literate Code Maps are diagrams which help programmers understand the structure and behaviour of source code.&#xA;Example Code Map diagrams differ from UML diagrams in that they focus on real source code fragments and lots of rich-text formatted story-telling narrative. They combine class and sequence diagrams into the same diagram, offering step by step numbering to follow the behaviour of a use case story.&#xA;The 5 laws of literate code mapping Boxes represent any scope or namespace - be creative Show structure and behaviour in the same diagram Code compartments in boxes contain code fragments and richly formatted narrative Lines representing function calls between boxes are numbered to tell a story Cross reference numbers can appear anywhere to associate ideas Think of literate code maps like UML class diagrams where the classes are now boxes which can represent more things, and lines represent function calls as well as structure.</description>
    </item>
    <item>
      <title>Contracting</title>
      <link>https://abulka.github.io/about/consulting/contracting/</link>
      <pubDate>Mon, 23 Nov 2020 12:34:08 +1100</pubDate>
      <guid>https://abulka.github.io/about/consulting/contracting/</guid>
      <description>General Software Architecture Consulting I will work with you to plan your next software project, ensuring you are using the latest practices and technologies.&#xA;I oversaw the building of a large software applications and technical teams at Austhink Software (as Chief Technical Officer), Telstra (Python Team Leader) and many other similar leadership roles.&#xA;Rapid &amp;lsquo;Staff Onboarding&amp;rsquo; Service We will work with your team - hands on, to&#xA;Oversee the documentation of your critical project creating:</description>
    </item>
    <item>
      <title>Training</title>
      <link>https://abulka.github.io/about/consulting/training/</link>
      <pubDate>Mon, 23 Nov 2020 12:30:33 +1100</pubDate>
      <guid>https://abulka.github.io/about/consulting/training/</guid>
      <description>Obect Oriented Programming &amp;amp; Design Patterns Training Courses&#xA;Elevate the effectiveness of your entire programming team - Andy can deliver his existing or a customised Design Patterns Course to your entire programming team - at your company&amp;rsquo;s premises or via Zoom.&#xA;I have delivered training courses across Australia incl. at The Australian Synchrotron.&#xA;Consulting and Mentoring is also available. Contact Andy for availability.&#xA;Course 1: Design Patterns Code: IM500-020&#xA;Series: Computer Professional</description>
    </item>
    <item>
      <title>AI Image Browser</title>
      <link>https://abulka.github.io/projects/apps/ai-images-manager/</link>
      <pubDate>Mon, 23 Nov 2020 12:21:55 +1100</pubDate>
      <guid>https://abulka.github.io/projects/apps/ai-images-manager/</guid>
      <description>AI Image Browser This program is designed to make it easier to browse and delete the images generated by Stable Diffusion AI image generators.&#xA;Click on an image to preview it, and view the &amp;ldquo;prompt&amp;rdquo; text which generated it. Hit &amp;lsquo;Delete&amp;rsquo; to delete an unwanted image (and its associated .text or .yml file). For a full list of features see the home page.&#xA;See homepage https://ai-image-browser.firebaseapp.com/&#xA;Status Free to download and try - option to upgrade to paid version.</description>
    </item>
    <item>
      <title>Brew Moments</title>
      <link>https://abulka.github.io/projects/apps/brew-moments/</link>
      <pubDate>Mon, 23 Nov 2020 12:21:55 +1100</pubDate>
      <guid>https://abulka.github.io/projects/apps/brew-moments/</guid>
      <description>Brew Moments Coffee Ratio Calculation App for Android phones and tablets, built using Dart and Flutter.&#xA;Visit the Brew Moments home page Visit the Brew Moments playstore page Status Free to download.</description>
    </item>
    <item>
      <title>Print42</title>
      <link>https://abulka.github.io/projects/apps/print42/</link>
      <pubDate>Mon, 23 Nov 2020 12:18:07 +1100</pubDate>
      <guid>https://abulka.github.io/projects/apps/print42/</guid>
      <description>Print42 is a log tailing GUI program which optionally echoes log lines to thermal printer tape. Its like a modern thermal printer version of a ticker tape for tailing log files. It features display font size options, search and filtering. You can also annotate the output with text fragments that you type in - or screenshots that you paste in.&#xA;As well as physically printing from Free42, the Print42 software can also be used to print HP Prime screenshots (from either the emulator or real HP Prime hardware via the HP connectivity kit).</description>
    </item>
    <item>
      <title>Relationship Manager - Design Pattern</title>
      <link>https://abulka.github.io/patterns/relationship-manager/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/relationship-manager/</guid>
      <description>Abstract Basically describes a lightweight, in-memory Object Database.&#xA;Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional &amp;ldquo;pointer&amp;rdquo; and &amp;ldquo;arraylist&amp;rdquo; techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved, especially when back-pointers are involved.</description>
    </item>
    <item>
      <title>links</title>
      <link>https://abulka.github.io/blog/2020/10/09/links/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/10/09/links/</guid>
      <description>Talks and Articles See my blog page for details_._&#xA;About&#xA;blog</description>
    </item>
    <item>
      <title>rm table</title>
      <link>https://abulka.github.io/blog/2020/10/09/rm-table/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/10/09/rm-table/</guid>
      <description>Look up the scenario you need to implement on the left, then use the template implementation on the right in your code. Relationship Scenario Example Python Implementation Implementing one to one relationships between class X and Y #1. 1 → 1, directional, all methods on X&#xA;Singular API No API ______________ ______________ | X | | Y | |______________| |______________| | | | | |void setY(y) |1 1| | |Y getY() |⎯⎯⎯⎯⎯⎯⎯⎯⎯→| | |void clearY()| | | |______________| |______________| Note: The clearY() implementation needs to get a reference to y in order to call remove_rel(x, y, .</description>
    </item>
    <item>
      <title>tables</title>
      <link>https://abulka.github.io/blog/2020/10/09/tables/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/10/09/tables/</guid>
      <description>Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).&#xA;What Follows A table22 A header A table A header A table A header column 1 column 2 value value 1value 2 value value 1value 2 column 1 column 2 value value 1&#xA;value 2&#xA;value value 1&#xA;value 2&#xA;this is from html via a shortcode:&#xA;Firstname Lastname Age Jill Smith 50 Eve Jackson 94 </description>
    </item>
    <item>
      <title>Andy 2</title>
      <link>https://abulka.github.io/blog/2020/09/18/andy-2/</link>
      <pubDate>Fri, 18 Sep 2020 11:20:14 +1000</pubDate>
      <guid>https://abulka.github.io/blog/2020/09/18/andy-2/</guid>
      <description>this is a second post&#xA;Hey this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page.&#xA;subscection OK&#xA;OK&#xA;another section We’ve created our first website page, which can be accessed via the http://localhost:1313/bands/metallica/ URL. Let’s look at how thisURL is being composed.&#xA;http://localhost:1313 is thebase URL. In the development environment, it points to localhost , whereas in production it has the value specified under the baseURL optioninside the config.</description>
    </item>
    <item>
      <title>Andy 1</title>
      <link>https://abulka.github.io/blog/2020/09/16/andy-1/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/09/16/andy-1/</guid>
      <description>this is a post&#xA;Hey THERE this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page.&#xA;Name Age Bob 27 Alice 23 another table&#xA;asdasdasd bbbbb xxxxx ccccc dddd 1111 22223333 OH MY 2020 2020 STUDENT where is everyone? how was your date plank length student hangout STUDENT AAAAAAAAAAAAAAAAAAA how was your date plank length student hangout STUDENT BBBBBB BBBBBB hi h coffeeeeeeeee plank length student hangout no sign could have been washed or dumped here come the CAVALRY subscection OK</description>
    </item>
    <item>
      <title>TodoMVC implemented using a game architecture — ECS</title>
      <link>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/</guid>
      <description>Building traditional GUIs with the Entity Component System.&#xA;Is the Entity Component System any good for building traditional GUIs?&#xA;It turns out that the answer is yes! Whilst ECS is most commonly used in building games, it can also be used for building a traditional web “form” style application like TodoMVC. However you will need to radically rethink how models, their data and behaviour is organised.&#xA;This is arguably a refreshing, mind-blowing lesson in GUI programming!</description>
    </item>
    <item>
      <title>TodoMVC implemented using traditional OO, Controllers and Events</title>
      <link>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/</guid>
      <description>TodoMVC implemented in a classic Object Oriented way.&#xA;TodoMVC is a long standing web project showing how a ToDo app can be built in numerous frameworks.&#xA;The classic Javascript TodoMVC app implemented without a framework, using plain Object Oriented programming + a traditional MVC design pattern. Distinct, mediating Controller objects are the key to this implementation.&#xA;Running demo here.&#xA;See my full article on Medium here.&#xA;See also this GitHub repo by Marc Grabanski which shows us how to built TodoMVC in vanilla JS in 2022 (no classes are used in this version).</description>
    </item>
    <item>
      <title>Medium Articles</title>
      <link>https://abulka.github.io/projects/big-ideas/medium-articles/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/big-ideas/medium-articles/</guid>
      <description>I&amp;rsquo;ve been publishing a lot on Medium recently. Why? Because the articles seems to get more widely read, and the Medium editor is so simple and produces beautifully formatted articles.&#xA;Building a deployable Python-Electron App&#xA;Building a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .</description>
    </item>
    <item>
      <title>Django View logging is back-the-front</title>
      <link>https://abulka.github.io/blog/2019/09/04/django-view-logging-is-back-the-front/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/09/04/django-view-logging-is-back-the-front/</guid>
      <description>Have you ever looked through your Django log files and console messages, felt something was out of order and didn’t make sense, but couldn’t quite put your finger on it?&#xA;Here is an example of what I mean. Here is some view code:&#xA;def diagramz_list(request, template_name=&amp;#34;list.html&amp;#34;): log.info(&amp;#34;diagramz_list has been called&amp;#34;) ... return render(request, template_name, {&amp;#34;object_list&amp;#34;: diagrams}) that gets routed via url(r”^listz$”, views.diagramz_list, name=”listall”).&#xA;Let’s look at the log file and console messages that get generated when you do the usual python manage.</description>
    </item>
    <item>
      <title>Getting wxPython apps into the Ubuntu app store</title>
      <link>https://abulka.github.io/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/</guid>
      <description>Have you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.&#xA;I wanted to get my UML tool for Python, Pynsource, into the Ubuntu/Snapcraft app store for a long time. This is the story of how I made that happen.&#xA;It certainly wasn’t easy. It took me a week of work, struggling with the concepts, documentation and various bugs in the tooling to finally get my app listed.</description>
    </item>
    <item>
      <title>Async/await for wxPython</title>
      <link>https://abulka.github.io/blog/2019/03/02/async/await-for-wxpython/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/03/02/async/await-for-wxpython/</guid>
      <description>How to build Python 3 GUI apps with asynchronous functionality.&#xA;Python 3’s support of async/await is the new hotness, allowing cooperative computation with reduced complexity and without needing threads — as long as you use async compatible libraries like aiohttp etc. You can’t use the famous requests library because it is not async aware and will block, but not to worry, those other libraries have you covered.&#xA;See full article on Medium here.</description>
    </item>
    <item>
      <title>MGM Pattern</title>
      <link>https://abulka.github.io/patterns/mgm-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/mgm-pattern/</guid>
      <description>Introduction This article is twenty years old - its ideas are now simplified and clarified at MVCA pattern&#xA;A live demo running in a browser.&#xA;Tip for understanding this article: This is arguably the traditional MVC pattern with terminology tweaked and clarified, and updated for &amp;lsquo;modern&amp;rsquo; times where Views are no longer manually drawn but are instead off the shelf GUI widgets or DOM elements.&#xA;Mediator == Controller GUI == View The Pattern Download as pdf.</description>
    </item>
    <item>
      <title>MVC-App Architectural Pattern</title>
      <link>https://abulka.github.io/patterns/mvca-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/mvca-pattern/</guid>
      <description>Introduction This article describes the &amp;ldquo;MVC-App Architectural Pattern&amp;rdquo; which you can use to design your software applications, when you need to support a GUI. It is not a framework, it is a small set of principles which let you build sane, modular GUIs in any language, using any off the shelf UI components.&#xA;For the original, deprecated, MGM pattern which initially inspired this &amp;ldquo;MVC-App Pattern&amp;rdquo; pattern, see MGM pattern&#xA;TodoMVC-OO This is the classic Javascript TodoMVC app implemented without a framework 😄, simply using plain Object Oriented programming + a traditional MVC design pattern.</description>
    </item>
    <item>
      <title>Transformation Interface Design Pattern</title>
      <link>https://abulka.github.io/patterns/transformation-interface/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/transformation-interface/</guid>
      <description>Introduction The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back again. A pair of methods on some class e.g. load/save are often the signature of a Transformation Interface.&#xA;The Pattern Download as pdf.</description>
    </item>
    <item>
      <title>Easy documentation with Docsy</title>
      <link>https://abulka.github.io/blog/2018/10/06/easy-documentation-with-docsy/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/10/06/easy-documentation-with-docsy/</guid>
      <description>This is a typical blog post that includes images.&#xA;The front matter specifies the date of the blog post, its title, a short description that will be displayed on the blog landing page, and its author.&#xA;Including images Here&amp;rsquo;s an image (featured-sunset-get.png) that includes a byline and a caption.&#xA;Fetch and scale an image in the upcoming Hugo 0.43. Photo: Riona MacNamara / CC-BY-CA The front matter of this post specifies properties to be assigned to all image resources:</description>
    </item>
    <item>
      <title>The second blog post</title>
      <link>https://abulka.github.io/blog/2018/10/06/the-second-blog-post/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/10/06/the-second-blog-post/</guid>
      <description>Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).&#xA;There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&#xA;There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&#xA;There should be no margin above this first sentence.</description>
    </item>
    <item>
      <title>Building a Python-Electron App</title>
      <link>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</guid>
      <description>Building a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps — which I propose to outline here.&#xA;See full article on Medium here.</description>
    </item>
    <item>
      <title>Python AST Parsing</title>
      <link>https://abulka.github.io/blog/2018/06/01/python-ast-parsing/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/06/01/python-ast-parsing/</guid>
      <description>How I used the Python AST capabilities to build the Python to Rpn converter.&#xA;Python compilation pipeline My program works at the AST stage of the compilation pipeline:&#xA;Specifically my approach has been to use Python&amp;rsquo;s built in ability to parse itself into an AST Abstract Syntax Tree, then to traverse this tree using the visitor design pattern to generate the RPN.&#xA;The Python AST parser is built into Python and thus requires that you be running Python to use it.</description>
    </item>
    <item>
      <title>markdown samples</title>
      <link>https://abulka.github.io/blog/2018/01/04/markdown-samples/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/01/04/markdown-samples/</guid>
      <description>Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).&#xA;There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&#xA;There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&#xA;There should be no margin above this first sentence.</description>
    </item>
    <item>
      <title>Another Great Release</title>
      <link>https://abulka.github.io/blog/2018/01/04/another-great-release/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/01/04/another-great-release/</guid>
      <description>Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).&#xA;There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&#xA;There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&#xA;There should be no margin above this first sentence.</description>
    </item>
    <item>
      <title>Example Page</title>
      <link>https://abulka.github.io/projects/getting-started/example-page/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/getting-started/example-page/</guid>
      <description>This is a placeholder page. Replace it with your own content.&#xA;Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).&#xA;There should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade.</description>
    </item>
    <item>
      <title>Prophet 6 Librarian</title>
      <link>https://abulka.github.io/projects/apps/prophet-6-librarian/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/apps/prophet-6-librarian/</guid>
      <description>Midi patch converter and patch librarian for the Prophet 6 synthesizer.&#xA;Features listens for sysex messages from prophet 6 records them in a list, marked as &amp;lsquo;raw&amp;rsquo; click a button (or perhaps its done automatically) and convert them into &amp;lsquo;audition&amp;rsquo; style click on either raw or audition button to send patch back to the prophet 6 UI of the Prophet 6 knobs and buttons (as pictured) adjusts patches in real time Status Unreleased, on hold.</description>
    </item>
    <item>
      <title>UML Layout</title>
      <link>https://abulka.github.io/blog/2011/04/06/uml-layout/</link>
      <pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/04/06/uml-layout/</guid>
      <description>Developing a Layout Algorithm for UML diagrams Intro Presented to the Melbourne Patterns Group, Wednesday 6th April 2011 6:30 PM&#xA;The Problem: Untangling UML Diagrams Terms Nodes – these are the shapes/rectangles Edges – these are the lines connecting the shapes Background My UML tool is written in Python Existing layout libraries for e.g. python PyGraphviz has no windows port so I wrote my own Layout is reasonably hard to implement – academic papers are very complex and deal in a lot of math DIRTY SECRET OF ACADEMIA - Most Layout algorithms only deal with ‘points’ and don’t take into account real width and height Thus for any real world use (unless dealing with network and particle visualisation where each node is the same size/shape), it seemed to me that one needs to run an overlap removal algorithm after the layout to remove shape overlaps.</description>
    </item>
    <item>
      <title>Mocking in Ruby</title>
      <link>https://abulka.github.io/blog/2011/03/19/mocking-in-ruby/</link>
      <pubDate>Sat, 19 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/03/19/mocking-in-ruby/</guid>
      <description>Easy Dependency Injection and Mocking in Ruby&#xA;Here is a simple technique where you can inject mock methods into a class that you are unit testing.&#xA;Given you have a class ClassA&#xA;class ClassA def hi &amp;#34;hi&amp;#34; end end Using .class_eval You can replace the &amp;ldquo;hi&amp;rdquo; method from your unit test, without editing the source code of ClassA at all. You can inject mock methods - whatever.&#xA;def test_2 ClassA.class_eval do # injecting into ClassA class def hi &amp;#34;hello&amp;#34; end end a = ClassA.</description>
    </item>
    <item>
      <title>Cloning Directories in Ruby</title>
      <link>https://abulka.github.io/blog/2011/03/01/cloning-directories-in-ruby/</link>
      <pubDate>Tue, 01 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/03/01/cloning-directories-in-ruby/</guid>
      <description>Recursively Cloning Directories in Ruby using Hard Links&#xA;Hard links exist under windows 7 so you can clone huge directories or files without taking up any extra disk space. Both the original and the copy are equal and apps can&amp;rsquo;t tell the difference between them - because we are using true hard links (not shortcuts or symbolic links).&#xA;Built in Windows Command The dos command for cloning a file is simply</description>
    </item>
    <item>
      <title>Ruby vs Python list comprehensions</title>
      <link>https://abulka.github.io/blog/2010/11/18/ruby-vs-python-list-comprehensions/</link>
      <pubDate>Thu, 18 Nov 2010 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2010/11/18/ruby-vs-python-list-comprehensions/</guid>
      <description>Let&amp;rsquo;s compare Python list comprehensions vs. the way Ruby achieves the same thing thing.&#xA;Intent: Loop through a list of numbers and pick out the ones greater than 5, and multiply them by 100. Return them as a list.&#xA;Python #!/usr/bin/env python # Long explicit way: result = [] for n in range(1,8): if n &amp;gt; 5: result.append(n*100) print result # result [600, 700] # Concise way: print [n*100 for n in [1,2,3,4,5,6,7] if n &amp;gt; 5] # result [600, 700] Ruby #!</description>
    </item>
    <item>
      <title>Refactoring to PureMVC</title>
      <link>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</guid>
      <description>Let&amp;rsquo;s look at how to refactor an existing architecture to the PureMVC architecture. Your application requires that you display &amp;lsquo;model&amp;rsquo; data in some sort of UI &amp;lsquo;view&amp;rsquo;.&#xA;Introduction MVC Architectural Pattern I have long been fascinated by the MVC (Model View Controller) architectural pattern, first conceived in the 1960&amp;rsquo;s. What it promises, to those who can fathom its mysteries, is an orderly way of organising your application architecture. You define a de-coupled domain/business model that is oblivious to any GUI that might be displaying it.</description>
    </item>
    <item>
      <title>PureMVC</title>
      <link>https://abulka.github.io/blog/2009/03/01/puremvc/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/03/01/puremvc/</guid>
      <description>PureMVC - Architectural Pattern incl. a minimal wxPython example.&#xA;Understanding PureMVC can be hard, even though it is a relatively simple framework. That&amp;rsquo;s why a minimal example can help. Here is one I created for wxPython and Python users. This will run fine on windows, mac and linux. Install the PureMVC python port and wxPython (which is already present on Mac 10.5) and you should be able to run it.</description>
    </item>
    <item>
      <title>Central Patterns Repository</title>
      <link>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</link>
      <pubDate>Thu, 12 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</guid>
      <description>Towards a central repository of Design Patterns&#xA;An authoritative central repository of Design Patterns does not exist. There is a book called The Pattern Almanac 2000 by Linda Rising however this is no more than an index of patterns - nothing of substance except a one line descrtipion. And furthermore, it leaves out hundreds if not thousands of patterns - scattered across books, websites and people&amp;rsquo;s code. 2020 Update: Central repositories on the internet are now commonplace.</description>
    </item>
    <item>
      <title>Netbeans Uml</title>
      <link>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</link>
      <pubDate>Wed, 11 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</guid>
      <description>Let&amp;rsquo;s take a look at the UML and design pattern support in Netbeans and investigate Netbean&amp;rsquo;s cool ability to build &amp;ldquo;custom&amp;rdquo; design patterns - visually.&#xA;Introduction UML and Design Pattern Support in Netbeans 6.5&#xA;Netbeans is an opensource IDE from Sun and importantly Netbeans offers a wonderful GUI form designer plus UML facilities, which Eclipse doesn&amp;rsquo;t come bundled with out of the box.&#xA;Unfortunately the UML support described in this article has been removed from later versions of Netbeans.</description>
    </item>
    <item>
      <title>Visualising Software</title>
      <link>https://abulka.github.io/blog/2009/01/22/visualising-software/</link>
      <pubDate>Thu, 22 Jan 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/01/22/visualising-software/</guid>
      <description>Ways of Visualising Software Designs&#xA;This blog article explores the novel ways of developing software more visually and in visualising software generally - that is without coding. It also explores ways of visualising software designs and of watching software execute. Visual Programming and Executable UML are the closest terms that describe this area.&#xA;Some of these projects have failed and others continue to thrive (e.g. Scratch). As of 2020 the new big thing in this area is low code and no-code.</description>
    </item>
    <item>
      <title>State Pattern in Flex</title>
      <link>https://abulka.github.io/blog/2008/09/11/state-pattern-in-flex/</link>
      <pubDate>Thu, 11 Sep 2008 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2008/09/11/state-pattern-in-flex/</guid>
      <description>A tutorial on how to implement the State design pattern in Flex 3. We are going to have a traffic light move through several states (red, orange, green). Of course there are other states the traffic light might be in, as well as transitional states (green and orange at the same time), but lets keep things simple!&#xA;Note Flex and Flash are discontinued technologies. You can still run .swf files locally on your computer using these instructions.</description>
    </item>
    <item>
      <title>Extract Composite Refactoring</title>
      <link>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</link>
      <pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</guid>
      <description>Extract Composite - Refactoring to a Pattern Refactoring existing code so that it improves and conforms to a design pattern can be a good thing. Your code will be easier to understand since it follows a known &amp;lsquo;pattern&amp;rsquo;. Of course you have to need the change - your code will probably be uncomfortable to read and be crying out for clarification.&#xA;This refactoring is about implementing a one to many relationship in your code more clearly by refactoring to the Composite design pattern.</description>
    </item>
    <item>
      <title>Thoughts on Closures</title>
      <link>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</link>
      <pubDate>Mon, 05 Nov 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</guid>
      <description>Thoughts on Closures It seems like closures are all the rage in software development circles. Ruby and Groovy have them and then C# got them. Python had a form of them but are they really closures? What are closures anyway - do we need them?&#xA;In this presentation I argue that anything you can do with closures you can do without closures. Often not as elegantly, but often just as clearly.</description>
    </item>
    <item>
      <title>Teaching 23 Patterns</title>
      <link>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</link>
      <pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</guid>
      <description>Teaching 23 patterns in 3 days I have been running a design patterns course for several years where I teach 23 design pattern patterns in 3 days. I cover all the GOF (Gang of Four) patterns plus more. Here are some tales from the front lines!&#xA;History Having attended Melbourne Patterns Group meetings for quite a few years (what wonderful discussions we have there!), and having written up three design patterns of my own, I decided to teach a design patterns course and offer it commercially.</description>
    </item>
    <item>
      <title>Tooled Composite Pattern</title>
      <link>https://abulka.github.io/blog/2006/03/01/tooled-composite-pattern/</link>
      <pubDate>Wed, 01 Mar 2006 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2006/03/01/tooled-composite-pattern/</guid>
      <description>Ever wanted to create a &amp;ldquo;direct manipulation&amp;rdquo; program where you select various tools and manipulate stuff on a workspace? These sorts of applications are quite difficult to build due to the many possible combinations of behavior that is needed. Every tool must know what to do with each type of object. How do we manage this sort of complexity?&#xA;How do you represent shapes? How do you represent tools? How do tools and shapes interact?</description>
    </item>
    <item>
      <title>ORM Pattern</title>
      <link>https://abulka.github.io/blog/2005/07/01/orm-pattern/</link>
      <pubDate>Fri, 01 Jul 2005 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2005/07/01/orm-pattern/</guid>
      <description>Relational databases and OO memory models use different paradigms. Mapping between one and the other is often necessary but usually ends up being fiddly unless an auto-mapping ORM tool is used.&#xA;How an ORM works Let&amp;rsquo;s face it - a lot of developers prefer to just code classes - that&amp;rsquo;s what OO is all about. Having then to persist those classes into tables creates all sorts of fiddly mapping code. If you don&amp;rsquo;t need to persist into tables - fine.</description>
    </item>
    <item>
      <title>Swapping Implementations</title>
      <link>https://abulka.github.io/blog/2005/03/05/swapping-implementations/</link>
      <pubDate>Sat, 05 Mar 2005 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2005/03/05/swapping-implementations/</guid>
      <description>This is an exploration of how to swap implementations of objects within our software architectures using patterns like the Interface, Factory, Strategy, Proxy, Adapter, and finally to the full blown Bridge Design Pattern. This article was formerly known as The &amp;ldquo;Road to the Bridge&amp;rdquo; and as &amp;ldquo;Strategy to Bridge&amp;rdquo;&#xA;The problem We want to be flexible in our architecture. We want to be able to swap implementations of objects/classes easily e.</description>
    </item>
    <item>
      <title>Blackboard Pattern</title>
      <link>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</link>
      <pubDate>Thu, 05 Aug 2004 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</guid>
      <description>Blackboard Architectural Pattern The Blackboard Architectural Pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialised sub-systems assemble their knowledge to build a possibly partial or approximate solution.&#xA;See the paper by D. Deugo, M. Weiss and E. Kendall.&#xA;Andy&amp;rsquo;s Presentation Blackboard Pattern Slides by Andy&#xA;Example Code This is a pattern that is difficult to do an example for because you would normally have to set up a large infrastructure of classes etc.</description>
    </item>
    <item>
      <title>Null Object Pattern</title>
      <link>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</link>
      <pubDate>Fri, 04 Oct 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</guid>
      <description>Null Object Design Pattern Sometimes I make the joke that design patterns are all about getting rid of if-else statements from your code. The null object pattern is an example of a pattern that does just that - check out the code at the bottom for details.&#xA;What is it? A Null Object provides a surrogate for another object that shares the same interface, but does nothing.&#xA;This pattern was originally written up by Bobby Wolf, in Pattern Languages of Program Design 3.</description>
    </item>
    <item>
      <title>Using Design Patterns in Real Projects</title>
      <link>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</link>
      <pubDate>Wed, 04 Sep 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</guid>
      <description>What is it like to use design pattern in real life programming?&#xA;Do the sometimes academic patterns translate into the real world?&#xA;The answer is yes. I will back this up with three examples of where I have used patterns in real world projects.&#xA;Scroll down through the slides above&#xA;-Andy Bulka</description>
    </item>
    <item>
      <title>Design Pattern Automation</title>
      <link>https://abulka.github.io/patterns/design-pattern-automation/</link>
      <pubDate>Fri, 04 Jan 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/design-pattern-automation/</guid>
      <description>Introduction As design patterns become more mainstream, various IDE&amp;rsquo;s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you.</description>
    </item>
    <item>
      <title>Patterns, ModelMaker &amp; Beyond</title>
      <link>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</link>
      <pubDate>Tue, 04 Jan 2000 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</guid>
      <description>How can IDE visualisation features be further enhaced by UML and Design Patterns to assist developers. It discusses using the revolutionary UML tool ModelMaker (now discontinued) in conjuntion with Delphi.&#xA;ModelMaker allowed you to apply patterns onto your code using a UI&#xA;This is a talk I gave at the time that I was into Delphi programming. Presented to the Australian Delphi User Group in December 1999.&#xA;Engineers use models Engineers produce plans before building bridges Electrical engineers have a language of electrical symbols Architects have blueprints What do software engineers / programmer for a modelling tool?</description>
    </item>
    <item>
      <title>Appendix: Musings on Design Patterns</title>
      <link>https://abulka.github.io/patterns/musings-on-patterns/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      <guid>https://abulka.github.io/patterns/musings-on-patterns/</guid>
      <description>Capturing hard-won software design experience in the form of design patterns and architectural patterns is a noble cause that everyone can contribute to.&#xA;You can contribute by writing patterns and maybe even coming to a Plop patterns conference.&#xA;Basically when you see a software development technique a few times, and see that it isn&amp;rsquo;t yet documented - write it up in Pattern format and give it a name!&#xA;A pattern is more than just a &amp;ldquo;tip&amp;rdquo; or technique though - a pattern represents an abstract idea - that can be implemented in various ways depending on your circumstances.</description>
    </item>
    <item>
      <title>Appendix: My KoalaPlop Patterns</title>
      <link>https://abulka.github.io/patterns/appendix-koala-plop/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      <guid>https://abulka.github.io/patterns/appendix-koala-plop/</guid>
      <description>Andy&amp;rsquo;s Published Design Patterns The four patterns MGM, RM, TI and Pattern Automation are substantial works which have been presented at KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs) in both 2000 and 2001. My shepherds (paper peer reviewers) were:&#xA;Jim Coplien (MGM pattern) Ali Arsanjani (TI pattern) James Noble (RM pattern). (Design Pattern Automation) was not peer reviewed before being presented and published. These final versions also incorporate comments and reviews from the attendees of KoalaPlop 2000 and 2001.</description>
    </item>
    <item>
      <title></title>
      <link>https://abulka.github.io/patterns/hexmvc-adapters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc-adapters/</guid>
      <description>Hexmvc Adapters - Appendix Andy Bulka,&#xA;March 2012&#xA;Back to main HexMVC Pattern.&#xA;Adapter Design Patterns In HexMvc the adapter implementing interfaces is everywhere. What pattern is this? Obviously Adapter Pattern is a leading candidate.&#xA;Talking to Interfaces vs Adapter Pattern You could just call it the talking to Interfaces pattern. As GOF says in its introduction, one of the main two OO principles is “Program to an interface, not an implementation” (Gang of Four 1995:18).</description>
    </item>
    <item>
      <title></title>
      <link>https://abulka.github.io/patterns/hexmvc-eventing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc-eventing/</guid>
      <description>Appendix - Hexmvc Events Andy Bulka,&#xA;March 2012&#xA;Back to main HexMVC Pattern.&#xA;On Eventing Eventing is up to you to implement any way you like. You need to be able to broadcast ‘events’ which cause methods to be run on an arbitrary number of observers. The broadcaster is ignorant of the exact identity of the observers. Its the observer pattern.&#xA;A lightweight synchronous, eventing system I recommend a lightweight synchronous, eventing system / observer pattern that is based on method calling on objects.</description>
    </item>
    <item>
      <title></title>
      <link>https://abulka.github.io/patterns/hexmvc-scraps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc-scraps/</guid>
      <description>Scraps Renamings of pureMvc terms to &amp;ldquo;Adapter&amp;rdquo; PureMvc uses the term one or more &amp;ldquo;mediators&amp;rdquo; in front of gui plumbing - all sitting behind the term &amp;ldquo;View&amp;rdquo; PureMvc uses the term one or more &amp;ldquo;proxies&amp;rdquo; in front of model plumbing - all sitting behind the term &amp;ldquo;Model&amp;rdquo; PureMvc talks about many &amp;ldquo;commands&amp;rdquo; objects which all sit behind the term &amp;ldquo;Controller&amp;rdquo; The Application &amp;ldquo;facade&amp;rdquo; is the centre. The problem with these terms are that is debatable that these things are really proxies and mediators etc.</description>
    </item>
    <item>
      <title>Home Scraps</title>
      <link>https://abulka.github.io/blog/1/01/01/home-scraps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/1/01/01/home-scraps/</guid>
      <description>New chair metrics! The Goldydocs UI now shows chair size metrics by default.&#xA;Please follow this space for updates!&#xA;Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!&#xA;Read more&#xA;Follow us on Twitter! For announcement of latest features etc.&#xA;Read more&#xA;This is the second Section Download from AppStore Get the Goldydocs app!&#xA;Contributions welcome! We do a Pull Request contributions workflow on GitHub.</description>
    </item>
    <item>
      <title>Search Results</title>
      <link>https://abulka.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/search/</guid>
      <description></description>
    </item>
  </channel>
</rss>
