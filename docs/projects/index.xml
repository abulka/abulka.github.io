<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy Bulka - Blog – Projects</title>
    <link>https://abulka.github.io/projects/</link>
    <description>Recent content in Projects on Andy Bulka - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://abulka.github.io/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Projects: MGM Pattern</title>
      <link>https://abulka.github.io/projects/patterns/mgm-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/patterns/mgm-pattern/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/33971232953329bg-pods1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article is twenty years old - its ideas are now simplified and clarified at &lt;a href=&#34;https://abulka.github.io/projects/patterns/mvca-pattern/&#34;&gt;MVCA pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://abulka.github.io/todomvc-oo/&#34;&gt;live demo&lt;/a&gt; running in a browser.&lt;/p&gt;
&lt;p&gt;Tip for understanding this article:
This is arguably the traditional MVC pattern with terminology tweaked and clarified, and updated for &amp;lsquo;modern&amp;rsquo; times where Views are no longer manually drawn but are instead off the shelf GUI widgets or DOM elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mediator == Controller&lt;/li&gt;
&lt;li&gt;GUI == View&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-pattern&#34;&gt;The Pattern&lt;/h2&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/andybulkamodelguimediatorpattern.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;
&lt;p&gt;Comments now disabled due to spam.&lt;/p&gt;
&lt;h3 id=&#34;posted-onjan-18th-2009&#34;&gt;Posted on Jan 18th, 2009&lt;/h3&gt;
&lt;p&gt;Hi Andy,&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve read your article about the MGM Patterns, it&amp;rsquo;s a great pattern.&lt;br&gt;
However, I have a question, could you please show me.&lt;/p&gt;
&lt;p&gt;Let say I have a Textbox (GUI), a business object with only 1 property Text,&lt;br&gt;
a mediator-view as your pattern defined.&lt;/p&gt;
&lt;p&gt;When changing Business.Text, this procedure is called:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;procedure setText(Value: String);  
begin  
  FText := Value;  
  NotifyChanges; // \*\*\* notify mediator to change Editbox content  
end;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;therefore, mediator is notified:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;procedure BusinessChanged;  
begin  
  FGUI.Text := FBusiness.Text; // this makes Editbox OnChange fires  
end;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OnChange event of Editbox:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;procedure Edit1Change();  
begin  
Mediator := FindMediator(Self)  
Mediator.Business.Text := TEdit(Self).Text;  
{ \*\*\* This line would call Business.setText and make an infinity loop }  
end;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only method I&amp;rsquo;ve thought of is let the Mediator modify FText field of&lt;br&gt;
Business object. But in this way, Busniess and Mediator have to be in a same&lt;br&gt;
unit. Is there another way to solve this problem?&lt;/p&gt;
&lt;p&gt;Thanks for your sharing!&lt;br&gt;
Karr. C.&lt;/p&gt;
&lt;h3 id=&#34;posted-byandy-onjan-18th-2009&#34;&gt;Posted by Andy on Jan 18th, 2009&lt;/h3&gt;
&lt;p&gt;Thanks for your interest in the MGM pattern. Your assumption in the above code is that the Editbox OnChange fires when you programatically set the FGUI.Text, which would cause the event sequence&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gui changes -&amp;gt; mgm notified -&amp;gt; changes model -&amp;gt;  
model notifies mgm -&amp;gt; mgm modifies gui -&amp;gt; gui changes  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and so on, infinitely!! See your lines marked *** highlighted lines above.&lt;/p&gt;
&lt;p&gt;However the Editbox OnChange fires only seems to fire when the text is altered by the user in the gui. It does not fire when the edit1.text is changed programatically. So there is no loop.&lt;/p&gt;
&lt;p&gt;I tried it in Delphi 6. Here is a sample delphi app that proves it.&lt;br&gt;
&lt;a href=&#34;http://www.atug.com/downloads/mgmquickproof01.zip&#34;&gt;http://www.atug.com/downloads/mgmquickproof01.zip&lt;/a&gt;&lt;br&gt;
It has a cheaper form of mgm which I just whipped up, in order to demonstrate the point.&lt;/p&gt;
&lt;p&gt;P.S. If the event HAD fired, you could&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;temporarily disable the event by rewiring the event handler to Nil before writing to it programatically, then restoring the event handler again (yuk, but possible. You often have to do this when using mgm with treeviews.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provide a way of setting the model data which does not trigger a notification. Make the private data public. Again, yuk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;hellip; anyway thankfully you don&amp;rsquo;t need to do either of these things since Editbox OnChange does not fire when the edit1.text is changed programatically&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;br&gt;
-Andy Bulka&lt;/p&gt;
&lt;h3 id=&#34;posted-by-anononjan-21st-2009&#34;&gt;Posted by Anon on Jan 21st, 2009&lt;/h3&gt;
&lt;p&gt;Here is a &lt;a href=&#34;http://www.c-sharpcorner.com/UploadFile/shivprasadk/1246712242008074334AM/12467.aspx&#34;&gt;nice article&lt;/a&gt; on MVP pattern and the differences to MVC.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.andypatterns.com/index.php?cID=46&#34;&gt;Old link&lt;/a&gt; on andypatterns.com&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: MVCA Architectural Pattern</title>
      <link>https://abulka.github.io/projects/patterns/mvca-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/patterns/mvca-pattern/</guid>
      <description>
        
        
        &lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;For the original MGM pattern see &lt;a href=&#34;https://abulka.github.io/projects/patterns/mgm-pattern/&#34;&gt;MGM pattern&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;todomvc-oo&#34;&gt;TodoMVC-OO&lt;/h2&gt;
&lt;p&gt;The classic Javascript &lt;a href=&#34;https://github.com/tastejs/todomvc&#34;&gt;TodoMVC app&lt;/a&gt; implemented without a framework, using plain Object Oriented programming + a traditional MVC design pattern. Distinct, mediating Controller objects are the key to this implementation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/tastejs/todomvc-app-css/raw/master/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Running demo &lt;a href=&#34;https://abulka.github.io/todomvc-oo/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mvca-architectural-pattern&#34;&gt;MVCA Architectural Pattern&lt;/h2&gt;
&lt;p&gt;This project fully implements the TodoMVC specification. It is implemented without a framework, using plain Object Oriented programming + the &lt;strong&gt;MVCA&lt;/strong&gt; architectural design pattern:&lt;/p&gt;
&lt;p&gt;Whilst the MVC (Model View Controller) pattern is commonly and glowingly referred to, implementations can vary widely. Most documentation on MVC, including the official &lt;a href=&#34;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;wikipedia article&lt;/a&gt; is vague on definitions and details.  This TodoMVC-OO project uses the MVCA pattern (formerly the &lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern) which is a clear and unambiguous interpretation of MVC, with the following key ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;View&lt;/strong&gt; means a modern GUI framework, and therefore is usually already available to be used by the programmer.&lt;/li&gt;
&lt;li&gt;One or more &lt;strong&gt;Controllers&lt;/strong&gt; mediate between the View and the rest of the Application, listening for GUI events. Nobody else knows about the View.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Model&lt;/strong&gt; is traditional data, may contain some business logic, and may broadcast events when its attributes change.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Application&lt;/strong&gt; owns the model(s), holds view state and contains some business logic methods.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Eventing&lt;/strong&gt; system is needed, traditionally Observer pattern but the stronger decoupling and the proper event objects of the Publisher-Subscriber pattern is preferred.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus MVCA simply means &amp;ldquo;&lt;strong&gt;M&lt;/strong&gt;odel &lt;strong&gt;V&lt;/strong&gt;iew &lt;strong&gt;C&lt;/strong&gt;ontroller &lt;strong&gt;A&lt;/strong&gt;pplication&amp;rdquo; - all four roles are necessary to any implementation.&lt;/p&gt;
&lt;!-- ![MVCA Architecture](https://github.com/abulka/todomvc-oo/raw/master/out/docs_other/plantuml/mvca-architecture-v2.svg?sanitize=true) 
    this version doesn&#39;t render the internal images (which are base64 encoded) due to &#34;because it violates the following Content Security Policy directive:...&#34;
    but serving the same image via github.io works ok.
--&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/todomvc-oo/images/mvca-architecture-v2.svg?sanitize=true&#34; alt=&#34;MVCA Architecture&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The above diagram was generated semi-automatically from Javascript source code residing in GitHub using &lt;a href=&#34;www.gituml.com&#34;&gt;GitUML&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;a href=&#34;https://abulka.github.io/todomvc-oo/images/mvca-architecture-v2.svg?sanitize=true&#34;&gt;here&lt;/a&gt; for more diagram detail as a .svg and the ability to zoom. &lt;/li&gt;
&lt;li&gt;View this actual &lt;a href=&#34;https://www.gituml.com/viewz/181&#34;&gt;diagram 181&lt;/a&gt; on GitUML.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvca-in-detail&#34;&gt;MVCA In Detail&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s go through the four parts of the MVCA pattern, which is precisely adhered to by this TodoMVC-OO implementation. Actually there is a fifth important part - the eventing system - which glues it all together - let&amp;rsquo;s look at the Model first.&lt;/p&gt;
&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;Model&lt;/strong&gt; is traditional, may contain some business logic, and may broadcast events when its attributes change.&lt;/p&gt;
&lt;p&gt;By traditional, I mean the Model does not know about anything else except perhaps other models. Its the core model of your data, the domain of the what the application is all about. In the case of the Todo application, it is a collection of Todo items, which can be marked completed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TodoItem&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;constructor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;completed&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_title&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_completed&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;completed&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;completed&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;util&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uuid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// no getter/setter needed
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_title&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dirty&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;completed&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_completed&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;completed&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_completed&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dirty&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;as_dict&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;completed&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;completed&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;notify_all&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;deleted todoitem&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;dirty&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;notify_all&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;modified todoitem&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;during_load&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Model is usually broken into many smaller interconnected models in an attempt to reflect the real world domain being implemented as software. The Model can be implemented as mere objects in memory or a full-fledged database model, or a &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt; mapping between the two.  In our case, we have a pure memory model, which gets persisted into local browser storage as JSON.&lt;/p&gt;
&lt;p&gt;You will find that some &amp;lsquo;model&amp;rsquo; concepts are more about how the information is presented in the GUI, thus I recommend these are kept as attributes of the Application class, and referred to as the &lt;em&gt;view state&lt;/em&gt; or &lt;em&gt;view model&lt;/em&gt;. The attribute &lt;code&gt;filter&lt;/code&gt; is an example of such view state.  The Application class can also hold collections of models which is what we do in this project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;constructor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;todos&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// model collection
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// view model, options are: &amp;#39;all&amp;#39;, &amp;#39;active&amp;#39;, &amp;#39;completed&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The model can be fat or thin - a fat model will have more business logic in the model. A thin model will most business or application logic in the Application class, treating the model as just data structures.&lt;/p&gt;
&lt;p&gt;Finally, the Model needs to participate in the internal eventing system. Whenever an attribute changes it should send out a notification event - this is why most attributes of our &lt;code&gt;TodoItem&lt;/code&gt; class are accessed via getter and setter methods. For example setting &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;completed&lt;/code&gt; will trigger an internal event to whoever may be listening. This internal eventing mechanism is how Controllers know to update the GUI with updated model information.&lt;/p&gt;
&lt;h3 id=&#34;view&#34;&gt;View&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;View&lt;/strong&gt; means a modern GUI framework, and as such is already available to be used by the programmer.
In our case, our modern GUI framework is the browser DOM which you can build in HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;toggle-all&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;toggle-all&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then Controllers use the GUI native eventing system to listen for interesting events&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;gui&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$toggle_all&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;change&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;
&lt;p&gt;The Controller is the most interesting aspect of MVC.&lt;/p&gt;
&lt;p&gt;In many software designs, the Controller isn&amp;rsquo;t necessarily a single thing. A bunch of stray GUI event handler functions are in reality, part of the &amp;lsquo;controller role&amp;rsquo;. Code that copies data from the model into the GUI/DOM is also part of the Controller role.
I feel the challenge of GUI architectures is to tame the role of Controller into some semblance of coherance and symmetric organisation. Which is why MVCA prescribes creating Controller classes.&lt;/p&gt;
&lt;p&gt;In TodoMVC-OO we have a Controller class &lt;code&gt;ControllerTodoItem&lt;/code&gt; and instantiate one per TodoItem model instance. That&amp;rsquo;s arguably a lot of controller instances, but this approach allows fine grained updating of the DOM. In contrast, the Jquery version of TodoMVC rebuilds the entire todo DOM on each refresh - something that might become inefficient for non-toy apps.&lt;/p&gt;
&lt;p&gt;In TodoMVC-OO we have a Controller class &lt;code&gt;ControllerHeader&lt;/code&gt; for looking after the header part of the GUI and &lt;code&gt;ControllerFooter&lt;/code&gt; for looking after the footer area, which is where the &lt;code&gt;filter&lt;/code&gt; buttons are and the count of uncompleted todo items is displayed. The number of Controllers you create is up to you: one Controller per GUI element for fine grained updates, a more relaxed approach of one Controller per related group of GUI elements (my preference) or arguably even one Controller for all GUI elements! I go into more academic detail on this topic in my &lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern paper.&lt;/p&gt;
&lt;p&gt;By clearly defining what a mediating Controller is, and organising our app into different sensible controllers, we tame our design and prevent it from turning into spaghetti.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;View events &lt;em&gt;only&lt;/em&gt; talk to Controllers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View events (&amp;lsquo;gui events&amp;rsquo; e.g. via &lt;code&gt;.on(&#39;click&#39;, ...)&lt;/code&gt;) go to one or more Controllers.&lt;/li&gt;
&lt;li&gt;Controllers update the View, usually in reponse to an &amp;lsquo;internal event&amp;rsquo; notification.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Controller talks to the rest of the system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accesses App view state.&lt;/li&gt;
&lt;li&gt;Calls App business logic methods.&lt;/li&gt;
&lt;li&gt;Modifies the Model directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Controller listens for &amp;lsquo;internal events&amp;rsquo; broadcast from Model &amp;amp; App.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whilst that may seem like a lot to understand, its basically saying Controllers talk to the GUI - nobody else does. Controllers then call into the rest of the system to get things done&lt;/p&gt;
&lt;p&gt;Importantly, we must resist putting business logic into the Controller, simply let the controller call the Application to do what needs to be done. The Controller should do the minimal possible work, mediating and translating between the View and the rest of the system (the App + Model).&lt;/p&gt;
&lt;h3 id=&#34;application&#34;&gt;Application&lt;/h3&gt;
&lt;p&gt;The role of the Application is also important and often overlooked/undocumented. The Application owns the Model, and looks after persisting it. The Application can listen for internal Model events.&lt;/p&gt;
&lt;p&gt;Whilst it is fine to wire Controllers directly to model instances, you will also need the Application to hold &amp;ldquo;view state&amp;rdquo; e.g. like the state of the active &amp;ldquo;filter&amp;rdquo; in this Todo application.  The Application is a centralised class, a kind of hub - to hold higher level business logic and more complex model manipulations. The Application class&amp;rsquo;s functionality can of course be composed of smaller pieces as software grows more complex but a class called &lt;code&gt;Application&lt;/code&gt; should always still exist.&lt;/p&gt;
&lt;h3 id=&#34;eventing-system&#34;&gt;Eventing System&lt;/h3&gt;
&lt;p&gt;Eventing is an important consideration in decoupling models from controllers, and to facilitate abstract communication between objects.&lt;/p&gt;
&lt;p&gt;Two eventing systems should be distinguished:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GUI native&lt;/strong&gt;: The native eventing system of the GUI Framework e.g. DOM &lt;code&gt;.on(&#39;click&#39;, ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal&lt;/strong&gt;: Your choice of an application system wide eventing system e.g. Publish-Subscribe e.g. &lt;code&gt;document.addEventListener(&amp;quot;hello&amp;quot;, (event) =&amp;gt; { ... })&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both eventing systems are used in the TodoMVC-OO implementation. As you can see in the diagram above, DOM eventing reaches the Controllers, but no further. The remaining eventing is internal.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/abulka/lcodemaps&#34;&gt;Literate Code Map&lt;/a&gt; of the event flow of TodoMVC-OO. Events are reified as coloured objects, each different event gets a different colour.
&lt;img src=&#34;https://raw.githubusercontent.com/abulka/todomvc-oo/master/out/docs_other/plantuml/todomvc-oo-event-flow-gituml-134.png&#34; alt=&#34;todomvc event flow&#34;&gt;
&lt;em&gt;TodoMVC-OO event flow.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The above diagram was generated semi-automatically from Javascript source code residing in GitHub using &lt;a href=&#34;www.gituml.com&#34;&gt;GitUML&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;a href=&#34;https://abulka.github.io/todomvc-oo/images/todomvc-oo-event-flow-gituml-134.svg&#34;&gt;here&lt;/a&gt; for more diagram detail as a .svg and the ability to zoom. &lt;/li&gt;
&lt;li&gt;View this actual &lt;a href=&#34;https://www.gituml.com/viewz/134&#34;&gt;diagram 134&lt;/a&gt; on GitUML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The eventing pattern depicted here is &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;Publisher-Subscriber&lt;/a&gt; where real event objects are &amp;lsquo;broadcast&amp;rsquo; into the ether/event bus/system/whatever - allowing any code in the system to subscribe and respond - the point is, the code emitting the event does not have references to receiver object/methods.&lt;/p&gt;
&lt;p&gt;The Javascript built in Publisher-Subscriber eventing approach is more flexible and powerful than the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;Observer&lt;/a&gt; pattern since the Observer pattern &lt;em&gt;requires observers to know about&lt;/em&gt; and subscribe to Subject objects, which is not always possible or convenient. More dicussion on the differences can be found &lt;a href=&#34;https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c&#34;&gt;in this article&lt;/a&gt; and on &lt;a href=&#34;https://stackoverflow.com/questions/6439512/difference-between-observer-pattern-and-event-driven-approach&#34;&gt;Stackoverflow&lt;/a&gt;. Thus we use Publisher-Subscriber eventing (event name → object method) rather than the traditional Observer pattern (object → object) approach.&lt;/p&gt;
&lt;p&gt;I used to be a fan of the traditional Observer pattern but in my later years find the Publisher-Subscriber pattern to be simpler and more powerful - plus Publisher-Subscriber is built into Javascript you simply &lt;code&gt;document.addEventListener(&amp;quot;hello&amp;quot;, (event) =&amp;gt; { ... })&lt;/code&gt; to listen and &lt;code&gt;document.dispatchEvent(new CustomEvent(event_name, { detail: {from: from, data: data } }))&lt;/code&gt; to notify all.&lt;/p&gt;
&lt;p&gt;The Javascript built in Publisher-Subscriber eventing system is used as the internal eventing system of this TodoMVC-OO implementation.&lt;/p&gt;
&lt;h2 id=&#34;application-bootstrapping&#34;&gt;Application Bootstrapping&lt;/h2&gt;
&lt;p&gt;To get things running, some bootstrapping code will create an instance of the Application which in turn creates all the Controllers and loads the Model.
The bootstrapping in TodoMVC-OO is done in &lt;code&gt;app.js&lt;/code&gt; which creates an instance of Application which is defined in &lt;code&gt;application.js&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{...}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Application&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that a &lt;code&gt;config&lt;/code&gt; object with a list of callback methods is passed into the Application.&lt;/p&gt;
&lt;p&gt;Giving the Application class knowledge of individual Controller classes and all the GUI view elements they need is arguably contaminating the Application class with too much GUI view and Controller knowledge.&lt;/p&gt;
&lt;p&gt;The solution I use is to pass the Application a &lt;code&gt;config&lt;/code&gt; object which contains a bunch of callbacks. Each callback function will magically create a Controller instance, wired to look after its GUI elements. Each callback function hides, within itself, references to the DOM - which we don&amp;rsquo;t want the Application to have. In this way, the bootstrapping code and the Controller code are the only parts of the architecture that know about the View specifics (which we want to restrict).&lt;/p&gt;
&lt;p&gt;Thus whenever the Application needs to instantiate a Controller (e.g. each time a TodoItem is created) it calls a &lt;code&gt;config&lt;/code&gt; callback function.
Another example is during bootup - some permanent Controllers need to be created, like the Controller looking after the header area, so the Application calls
&lt;code&gt;this.callback_config.cb_header(this)&lt;/code&gt; which creates an instance of the &lt;code&gt;ControllerHeader&lt;/code&gt; wired to &lt;code&gt;$(&#39;.new-todo&#39;)&lt;/code&gt; and &lt;code&gt;$(&#39;.toggle-all&#39;)&lt;/code&gt;.  The Application only needs to know the callback function names and thus remains pure.&lt;/p&gt;
&lt;p&gt;Notice in the &lt;code&gt;config&lt;/code&gt; object below that each callback refers to the view through JQuery syntax e.g. &lt;code&gt;$(&#39;ul.todo-list&#39;)&lt;/code&gt; and passes these references into the contructor of the Controller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Callback to create the todo item controllers - are added as needed
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;cb_todo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;todo&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ControllerTodoItem&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;todo&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$todolist&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;ul.todo-list&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;

    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Callbacks to create the permanent controllers
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;cb_header&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ControllerHeader&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;$input&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;.new-todo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;$toggle_all&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;.toggle-all&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;cb_footer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ControllerFooter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;$footer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;footer&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt;
                &lt;span style=&#34;color:#000&#34;&gt;$footer_interactive_area&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;.footer&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course the Controller itself will have further references to View DOM elements, however these references should be based on searching &lt;em&gt;within&lt;/em&gt; the outer DOM element passed to the Controller - thus achieving some degree of &amp;lsquo;component-isation&amp;rsquo; and re-use. For example the same Controller could be used to look after different DOM elements with different element id&amp;rsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;todomvc-oo-conclusion&#34;&gt;TodoMVC-OO Conclusion&lt;/h2&gt;
&lt;p&gt;This project fully implements the TodoMVC specification and is implemented without a framework, using plain Object Oriented programming + MVCA architectural design pattern, as described above.&lt;/p&gt;
&lt;p&gt;Running demo &lt;a href=&#34;https://abulka.github.io/todomvc-oo/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;improvements&#34;&gt;Improvements&lt;/h3&gt;
&lt;p&gt;In this implementation, I notice that footer renders too early rather than right at the end of the initial render. Its just a subtle flash of the footer when the page is initially redrawn, but I&amp;rsquo;d like to correct this.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Official &lt;a href=&#34;http://todomvc.com/&#34;&gt;TodoMVC project&lt;/a&gt; with other TodoMVC implementations (e.g. Vue, Angular, React etc.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abulka/todomvc-ecs&#34;&gt;TodoMVC-ECS&lt;/a&gt; - My &amp;ldquo;Entity Component System&amp;rdquo; implementation of TodoMVC&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://abulka.github.io/gui-showdown/main_mvca.html&#34;&gt;GUI Showdown MVCA&lt;/a&gt; another example of an app implemented using the MVCA architecture (Javascript, open source)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern (older version of MVCA, presented at a Patterns Conference)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- - [Used by](https://github.com/abulka/todomvc-oo) --&gt;
&lt;!-- - [Website](https://www.gituml.com/editz/134) --&gt;
&lt;!-- - [Blog](https://www.gituml.com/editz/136) --&gt;
&lt;!-- - [FAQ](https://www.gituml.com/editz/136) --&gt;
&lt;h3 id=&#34;diagramming&#34;&gt;Diagramming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gituml.com&#34;&gt;GitUML&lt;/a&gt; diagramming used for this project&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abulka/lcodemaps&#34;&gt;Literate Code Mapping&lt;/a&gt; diagramming used for this project&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- - [Medium article]()  (coming in Apr 2020) --&gt;
&lt;!-- ### Support

- [Stack Overflow](http://stackoverflow.com/questions/tagged/MVCA)
- [Twitter](http://twitter.com/unjazz) --&gt;
&lt;h2 id=&#34;credit&#34;&gt;Credit&lt;/h2&gt;
&lt;p&gt;Created by &lt;a href=&#34;http://andypatterns.com&#34;&gt;Andy Bulka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: This project is not not officially part of the &lt;a href=&#34;http://todomvc.com/&#34;&gt;TodoMVC project&lt;/a&gt; - as it is does not use a MVC framework library, nor does it meet the criterion of &amp;ldquo;having a community&amp;rdquo; around it.  On the other hand, perhaps a pattern is equivalent enough to a framework - after all there is a plain Javascript TodoMVC implementation officially available using ad-hoc techniques. Plus, there has been a &amp;ldquo;community&amp;rdquo; around the Object Oriented MVC pattern for decades now - hasn&amp;rsquo;t there? 😉&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: Transformation Interface Design Pattern</title>
      <link>https://abulka.github.io/projects/patterns/transformation-interface/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/patterns/transformation-interface/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/71241233039311bgDSC1068.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back again. A pair of methods on some class e.g. load/save are often the signature of a Transformation Interface.&lt;/p&gt;
&lt;h2 id=&#34;the-pattern&#34;&gt;The Pattern&lt;/h2&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/andybulkatransformationinterfacepattern.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: Design Pattern Automation</title>
      <link>https://abulka.github.io/projects/patterns/design-pattern-automation/</link>
      <pubDate>Fri, 04 Jan 2002 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/patterns/design-pattern-automation/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/56881233035290bgDSC1195.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As design patterns become more mainstream, various IDE&amp;rsquo;s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you. This paper explores the state of pattern automation software, discusses the pros and cons of various approaches and then goes on to discusses the broader issues raised by the attempt to automate something which some argue, in principle, perhaps should not be automated at all..&lt;/p&gt;
&lt;p&gt;Note: The pattern automation paper was followed up a few years later with a talk entitled &lt;a href=&#34;http://www.andypatterns.com/index.php/design_patterns/pattern_automation/&#34;&gt;design pattern automation - part 2&lt;/a&gt; SEE BELOW which reviews the current crop of UML tools circa 2006.  Fot a review of Netbeans 6 design pattern support - stay tuned for a blog posting after I give my talk to the Melbourne Patterns Group in Feb 2009.&lt;/p&gt;
&lt;p&gt;This paper is a revision of one that appeared at KoalaPLoP 2002 – the ThirdAsia-Pacific Conference on Pattern Languages of Programmes.  Conferences in Research and Practice in Information Technology,Vol. 13. J. Noble, Ed. Reproduction for academic, not-for profit purposes permitted provided this text is included.&lt;/p&gt;
&lt;h2 id=&#34;design-pattern-automation--uml-tool-support&#34;&gt;Design Pattern Automation &amp;amp; UML Tool Support&lt;/h2&gt;
&lt;p&gt;Various UML Tools support design pattern usage.  You typically drag and drop patterns onto your workspace and they appear as UML classes.  Its a bit more complicated than this, and raises all sorts of interesting issues.  Read the pdf (part 1) and then read the powerpoint and watch the video (part 2).&lt;/p&gt;
&lt;h3 id=&#34;part-1---early-tools-and-the-philosophy-of-pattern-automation&#34;&gt;Part 1 - Early tools and the philosophy of pattern automation&lt;/h3&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/andybulkapatternautomation.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;part-2---design-pattern-tools-as-of-2006&#34;&gt;Part 2 - Design Pattern Tools as of 2006&lt;/h3&gt;
&lt;p&gt;Here are the slides from a talk entitled &amp;ldquo;Design Pattern support in UML tools - part II&amp;rdquo; which I gave in October 2006 to the Melbourne Patterns Group, Australia.&lt;/p&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/representingpatternsinumlandybulkaoct2006.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Alternatively, &lt;a href=&#34;http://www.slideshare.net/tcab22/representing-design-patterns-in-uml-andy-bulka-oct2006-presentation?type=powerpoint&#34;&gt;view the above powerpoint on slideshare&lt;/a&gt; or download the powerpoint &lt;strong&gt;.ppt&lt;/strong&gt; directly:&lt;/p&gt;
&lt;h2 id=&#34;addendum&#34;&gt;Addendum&lt;/h2&gt;
&lt;p&gt;As part of my Design Pattern Automation - Part 2 talk, I recorded some of that session.  Here is a youtube &lt;a href=&#34;http://www.youtube.com/watch?v=IjKClDX2dUU&#34;&gt;video&lt;/a&gt; of how to apply design patterns using IBM&amp;rsquo;s &lt;a href=&#34;http://www-01.ibm.com/software/rational/uml/products.html&#34;&gt;Rational&lt;/a&gt; tool.  Apologies about the sound quality - just look at the pictures!&lt;/p&gt;
&lt;p&gt;Demonstration of Patterns in IBM&amp;rsquo;s Rational tool.
&lt;a href=&#34;http://www.youtube.com/watch?v=IjKClDX2dUU&#34;&gt;http://www.youtube.com/watch?v=IjKClDX2dUU&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: Relationship Manager - Design Pattern</title>
      <link>https://abulka.github.io/projects/patterns/relationship-manager/</link>
      <pubDate>Sat, 04 Aug 2001 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/patterns/relationship-manager/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/62371233035718bgDSC1367.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;A central mediating class which records all the one-to-one, one-to-many and many-to-many relationships between a group of selected classes. Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional &amp;ldquo;pointer&amp;rdquo; and &amp;ldquo;arraylist&amp;rdquo; techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved.&lt;/p&gt;
&lt;h2 id=&#34;the-official-pattern&#34;&gt;The Official Pattern&lt;/h2&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/andybulkarelationshipmanagerpattern.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;usage-and-theory&#34;&gt;Usage and Theory&lt;/h2&gt;
&lt;p&gt;Relationship Manager - Usage and Theory&lt;/p&gt;
&lt;p&gt;This page documents how to use my implementations of the Relationship Manager pattern. RM Relationship Manager has been implemented in Python, Boo (.net), C# (.net) and Java.&lt;/p&gt;
&lt;p&gt;Included are examples of how to code using relationship manager, covering all possible modelling scenarios (e.g. one to one, one to many etc.).  See also the Boo implementation page for a fully worked out example of a person and order class.  The Java download also has a real world example implemented.&lt;/p&gt;
&lt;p&gt;I also spend some time describing, in more theoretical terms, the scope of the relationship manager approach, in other words - what are all the possible relationships between objects and how RM can model them.&lt;/p&gt;
&lt;h3 id=&#34;its-a-object-relational-database&#34;&gt;Its a Object Relational Database&lt;/h3&gt;
&lt;p&gt;In a sense, an &lt;a href=&#34;https://en.wikipedia.org/wiki/Object_database&#34;&gt;Object Database&lt;/a&gt; is an implementation of the RM pattern.
The &lt;em&gt;intent&lt;/em&gt; of the RM pattern is lighter weight, to replace the wirings between objects
rather than acting as a huge central database.&lt;/p&gt;
&lt;p&gt;Here is a very simple implementation of RM in Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelationshipManager&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
      &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Relationships&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AddRelationship&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Relationships&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# assoc obj&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RemoveRelationships&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;lzt&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;lzt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;lzt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
              &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Relationships&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FindObjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;resultlist&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lambda&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Relationships&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]:&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
                  &lt;span style=&#34;color:#000&#34;&gt;resultlist&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;])&lt;/span&gt;
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
                  &lt;span style=&#34;color:#000&#34;&gt;resultlist&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;])&lt;/span&gt; 
              &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
                  &lt;span style=&#34;color:#000&#34;&gt;resultlist&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;association&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;resultlist&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FindObject&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;lzt&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;From&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;To&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelId&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;lzt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;lzt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Clear&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;del&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Relationships&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and you could use it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;unittest&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;random&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TestCase00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;unittest&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TestCase&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setUp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelationshipManager&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;checkBasic00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddRelationship&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddRelationship&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;checkBasic01Singular&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddRelationship&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddRelationship&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObject&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObject&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FindObject&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# could have been &amp;#39;c&amp;#39; - arbitrary&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the full Python 3 implementation see
&lt;a href=&#34;https://github.com/abulka/relationship-manager&#34;&gt;https://github.com/abulka/relationship-manager&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hoping to get a &lt;code&gt;pip&lt;/code&gt; package sometime soon.&lt;/p&gt;
&lt;h3 id=&#34;whats-it-good-for&#34;&gt;What&amp;rsquo;s it good for?&lt;/h3&gt;
&lt;p&gt;What is Relationship Manager good for?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;d appreciate an &amp;lsquo;how to use&amp;rsquo; example to get a quick / better idea on what it&amp;rsquo;s useful for when programming&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The basic idea with relationship manager is that it is like a dictionary, which maps relationships between two things, be they object references or strings or whatever. In my examples I usually use strings, though object references are commonly used too, in order to&lt;br&gt;
map relationships between object instances.&lt;/p&gt;
&lt;p&gt;The benefit over a dictionary is that you can have multiple mappings&lt;br&gt;
e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a -&amp;gt; 1  
a -&amp;gt; 2  
a -&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you can ask what &amp;lsquo;a&amp;rsquo; points to and get the result &lt;code&gt;[1, 2, 3]&lt;/code&gt;.
You can also ask what is pointing to 3, and get the result &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One common use of this technology is to do all your wiring between objects using a relationship manager, thereby saving yourself having to implement your own one to many lists and having to maintain fiddly backpointer logic etc. So you still have e.g. an &lt;code&gt;AddOrder(o)&lt;/code&gt; method on your e.g. &lt;code&gt;Person&lt;/code&gt; class&amp;hellip;its just that you implement the method using a one line call to the relationship manager - simple!  e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AddOrder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;  
        &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;addRelationship&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;personToOrderRelationship&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GetOrders&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;():&lt;/span&gt;  
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;findObjectsPointedToByMe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;personToOrderRelationship&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a bit more of a tutorial code sample in the post &lt;a href=&#34;http://tinyurl.com/9xz5m&#34;&gt;http://tinyurl.com/9xz5m&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;modelling-relationships&#34;&gt;Modelling relationships&lt;/h3&gt;
&lt;p&gt;What methods do I put where when modelling relationships?&lt;/p&gt;
&lt;p&gt;I recommend that you use the &lt;a href=&#34;#UsageTemplates&#34;&gt;templates&lt;/a&gt; table to figuring out what methods to put where for each type of classic relationship you want to model.  For example, to implement a &lt;strong&gt;one to many&lt;/strong&gt; relationship between two classes X and Y, you would use template 4 or 5 (use the latter if you want bidirectionality)&lt;/p&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Note that the C# and Java implementations have a slightly cleaner set of methods and a few extra methods - and also use a nice interface to talk to.  The method names are substantially the same though.&lt;/p&gt;
&lt;h3 id=&#34;c-and-java-api&#34;&gt;C# and Java API&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Cardinality&lt;/span&gt;  
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color:#000&#34;&gt;OneToOne&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt;  
    &lt;span style=&#34;color:#000&#34;&gt;OneToMany&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt;  
    &lt;span style=&#34;color:#000&#34;&gt;ManyToOne&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt;  
    &lt;span style=&#34;color:#000&#34;&gt;ManyToMany&lt;/span&gt;  
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Directionality&lt;/span&gt;  
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color:#000&#34;&gt;UniDirectional&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt;  
    &lt;span style=&#34;color:#000&#34;&gt;DirectionalWithBackPointer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt;  
    &lt;span style=&#34;color:#000&#34;&gt;DoubleDirectional&lt;/span&gt;  
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;IRelationshipManager&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AddRelationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fromObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;toObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AddRelationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fromObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;toObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;EnforceRelationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Cardinality&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cardinality&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;EnforceRelationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Cardinality&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cardinality&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Directionality&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;directionality&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#000&#34;&gt;IList&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FindObjectsPointedToByMe&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fromObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FindObjectPointedToByMe&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fromObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
   &lt;span style=&#34;color:#000&#34;&gt;IList&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FindObjectsPointingToMe&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;toObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FindObjectPointingToMe&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;toObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RemoveRelationship&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fromObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;toObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RemoveAllRelationshipsInvolving&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Count&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CountRelationships&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Clear&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;  
  &lt;span style=&#34;color:#000&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DoesRelIdExistBetween&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fromObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;toObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relId&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;  
  &lt;span style=&#34;color:#000&#34;&gt;IList&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FindRelIdsBetween&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fromObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;toObj&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;abstract-api&#34;&gt;Abstract API&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Return Type&lt;/th&gt;
&lt;th&gt;Function Name&lt;/th&gt;
&lt;th&gt;Short-hand&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;addRelationship(from, to, id)&lt;/td&gt;
&lt;td&gt;R(f,t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;removeRelationship(from, to, id)&lt;/td&gt;
&lt;td&gt;NR(f,t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;td&gt;findObjectsPointedToByMe(from, id)&lt;/td&gt;
&lt;td&gt;PS(f)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;td&gt;findObjectsPointingToMe(to, id)&lt;/td&gt;
&lt;td&gt;BS(t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;EnforceRelationship(id, cardinality, bidirectionality)&lt;/td&gt;
&lt;td&gt;ER(id, c, bi)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;findObjectPointedToByMe(fromMe, id, cast)&lt;/td&gt;
&lt;td&gt;P(f)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;findObjectPointingToMe(toMe, id, cast)&lt;/td&gt;
&lt;td&gt;B(t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;removeAllRelationshipsInvolving(object, id)&lt;/td&gt;
&lt;td&gt;NRS(o)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example &lt;code&gt;Object&lt;/code&gt; is just one of &lt;em&gt;your&lt;/em&gt; objects which you added with &lt;code&gt;addRelationship()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Re &lt;code&gt;cast&lt;/code&gt; that&amp;rsquo;s just in case you need to cast to a type. This might have been possible in the &lt;a href=&#34;http://boo-language.github.io/&#34;&gt;boo language&lt;/a&gt; for .NET (which is now dead). Please adapt to your language as needed. Dynamic languages don&amp;rsquo;t need casting.&lt;/p&gt;
&lt;h3 id=&#34;enforcing-relationships&#34;&gt;Enforcing Relationships&lt;/h3&gt;
&lt;p&gt;You can enforce relationships. For example EnforceRelationship() works like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ER(&amp;quot;xtoy&amp;quot;, &amp;quot;onetoone&amp;quot;, &amp;quot;directional&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The relationship is registered as being one to one and directional, so that e.g. when you add a second relationship between the same two objects the first relationship is automatically removed - ensuring the relationship is always one to one. Alternatively, the implementation could raise an exception (go into the source and change it if this is what you need).&lt;/p&gt;
&lt;h3 id=&#34;finding-just-one-object&#34;&gt;Finding just one object&lt;/h3&gt;
&lt;p&gt;The pair of find methods &lt;code&gt;FindObjectPointedToByMe()&lt;/code&gt; and &lt;code&gt;FindObjectPointedToByMe()&lt;/code&gt; only find &lt;em&gt;one&lt;/em&gt; object (even though there may be more), and cast it to the appropriate type.  This is a commonly used convenience method - the more painful way would be to use &lt;code&gt;FindObjectsPointingToMe()&lt;/code&gt; and just grab the first object from the returned list.
Exactly which object is found is undefined, but would typically be the first one added.&lt;/p&gt;
&lt;h3 id=&#34;relationship-id&#34;&gt;Relationship Id&lt;/h3&gt;
&lt;p&gt;What to use as the Relationship Id?&lt;/p&gt;
&lt;p&gt;This is either an integer or a string.  I have chosen to use a string in the C# and Java implementations, since you can describe relationships easily in this way rather than having to map from an integer back to some meaningful description.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RM.addRelationship(fromObject, toObject, relationshipId)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will raise an exception if relationshipId is an empty string.  &lt;/p&gt;
&lt;p&gt;All other functions (except for addRelationship) can pass either an empty string or &amp;ldquo;*&amp;rdquo; as the relationshipId, which means you are searching for any relationship at all.  You would usually only want to do this if there is only &lt;em&gt;one&lt;/em&gt; relationship between class X and class Y, then your P and NR calls can specify &amp;ldquo;*&amp;rdquo; as the relationshipId in order to match any relationship between these two objects.  Alternatively, you can use relationship manager&amp;rsquo;s overloaded versions of all its routines (except for addRelationship) which don&amp;rsquo;t take a relationshipId where relationshipId defaults to &amp;ldquo;*&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;table-of-templates&#34;&gt;Table of Templates&lt;/h2&gt;
&lt;h3 id=&#34;classic-relationship-scenarios&#34;&gt;Classic &amp;ldquo;relationship scenarios&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;How to implement relationships using sets of Relationship Manager methods&lt;/p&gt;
&lt;p&gt;Here is a list of classic &amp;ldquo;relationship scenarios&amp;rdquo; (e.g. one to one, one to many etc.) and how to implement them using the Relationship Manager API.&lt;/p&gt;
&lt;p&gt;The right hand side of the below table shows python code using calls to RM (relationship manager) using the shorthand notation for the function names.  For long hand names just substitute in the appropriate name e.g. instead of RM.R() you would call rm.AddRelationship().&lt;/p&gt;
&lt;p&gt;Note: The method names below are just suggestions. Normally you would use better method names that pertain to your application domain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of &lt;code&gt;.addY(y)&lt;/code&gt; you might have &lt;code&gt;addOrder(order)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;.getX()&lt;/code&gt; you might have &lt;code&gt;getCustomer()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;getAllY()&lt;/code&gt; you might have &lt;code&gt;.getOrders()&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;table&#34;&gt;Table&lt;/h3&gt;
&lt;p&gt;This table uses the &lt;a href=&#34;#abstract-api&#34;&gt;Shortened API&lt;/a&gt; calls for brevity. E.g. &lt;code&gt;RM.ER&lt;/code&gt; means call &lt;code&gt;EnforceRelationship&lt;/code&gt; on your Relationship Manager instance.&lt;/p&gt;
&lt;table cellspacing=&#34;1&#34; cellpadding=&#34;9&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;Relationship Scenario&lt;/th&gt;
            &lt;th&gt;Example Python Implementation&lt;/th&gt;
        &lt;/tr&gt;


        

        &lt;tr&gt;
            &lt;td colspan=&#34;3&#34;&gt;
                &lt;h3&gt;Implementing &lt;b&gt;one&lt;/b&gt; to &lt;b&gt;one&lt;/b&gt; relationships between class X and Y&lt;/h3&gt;
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;#1.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 → 1, directional, all methods on X&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
  Singular API             No API
 ______________        ______________
|       X      |      |       Y      |
|______________|      |______________|
|              |      |              |
|void  setY(y) |1    1|              |
|Y     getY()  |⎯⎯⎯⎯⎯⎯⎯⎯⎯→|              |
|void  clearY()|      |              |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  def __init__(self): 
    RM.ER(&#34;xtoy&#34;, &#34;onetoone&#34;, &#34;directional&#34;)
	
  def setY(self, y): 
    RM.R(self, y, &#34;xtoy&#34;)
	
  def getY(self): 
    return RM.P(self, &#34;xtoy&#34;)
	
  def clearY(self): 
    RM.NR(self, self.getY(), &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  pass
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#2.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 → 1, directional, all methods on Y&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
    No API              Singular API
 ______________        ______________
|       X      |      |       Y      |
|______________|      |______________|
|              |      |              |
|              |1    1| setX(x)      |
|              |⎯⎯⎯⎯⎯⎯⎯⎯→ | getX()       |
|              |      | clearX()     |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  pass
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def __init__(self): 
    RM.ER(&#34;xtoy&#34;, &#34;onetoone&#34;, &#34;directional&#34;)

  def setX(self, x):
    RM.R(x, self, &#34;xtoy&#34;)

  def getX(self):
    return RM.B(self, &#34;xtoy&#34;)

  def clearX(self):
    RM.NR(self.getX(), self, &#34;xtoy&#34;)
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#3.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 ←→ 1, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;

                &lt;pre&gt;
   Singular API         Singular API
 ______________        ______________
|       X      |      |       Y      |
|______________|      |______________|
|              |      |              |
|void  setY(y) |1    1| setX(x)      |
|Y     getY()  | ←⎯⎯⎯⎯→ | getX()       |
|void  clearY()|      | clearX()     |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:                    
  def __init__(self):
    RM.ER(&#34;xy&#34;, &#34;onetoone&#34;, &#34;bidirectional&#34;)
  
  def setY(self, y):
    RM.R(self, y, &#34;xy&#34;)
  
  def getY(self):
    return RM.P(self, &#34;xy&#34;)
  
  def clearY(self):
    RM.NR(self, self.getY(), &#34;xy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def __init__(self):
    RM.ER(&#34;xy&#34;, &#34;onetoone&#34;, &#34;bidirectional&#34;)

  def setX(self, x):
    RM.R(self, x, &#34;xy&#34;)

  def getX(self):
    return RM.P(self, &#34;xy&#34;)

  def clearX(self):
    RM.NR(self, self.getX(), &#34;xy&#34;)
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#3A.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 → 1, directional, all methods on X, back pointer&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
            Singular API
        ___________________
       |       X           |&amp;lt;-------,
       |___________________| 1      |
     1 |                   |        |
  |---→| void  _setX(x)    |        |
  |    | X     _getX(x)    |        |
  |____| X     _getBack()  |........|
back   |___________________|    x
				&lt;/pre&gt;
                &lt;p&gt;This is the
                    &lt;a href=&#34;https://en.wikipedia.org/wiki/Composite_pattern&#34;&gt;Composite Design Pattern&lt;/a&gt; - good for representing trees etc.
                &lt;/p&gt;
                &lt;p&gt;
                    &lt;span style=&#34;font-size: small;&#34;&gt;See backpointer discussion
                        &lt;a href=&#34;#backpointers&#34;&gt;below&lt;/a&gt; which includes a fully
                        worked out example of case 3A, in Python.
                    &lt;/span&gt;
                &lt;/p&gt;

            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  def __init__(self):
    RM.ER(&#34;xtox&#34;, &#34;onetoone&#34;, &#34;directional&#34;)

  def _setX(self, x):
    RM.R(self, thing, &#34;xtox&#34;)

  def _getX(self):
    return RM.P(self, &#34;xtox&#34;)

  def _getBack(self):
    return RM.B(self, &#34;xtox&#34;)

				&lt;/pre&gt;
                &lt;pre&gt;
x = property(_getThing, _setThing)

back = property(_getBack)
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;


        


        &lt;tr&gt;
            &lt;td colspan=&#34;3&#34;&gt;
                &lt;h3&gt;Implementing &lt;b&gt;one&lt;/b&gt; to &lt;b&gt;many&lt;/b&gt; relationships between class X and Y&lt;/h3&gt;
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;


        &lt;tr&gt;
            &lt;td&gt;#4.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 → *, directional, all methods on X&lt;/i&gt;&lt;/p&gt;


                &lt;pre&gt;
  Plural  API             No API
 _____________        ______________
|      X      |      |       Y      |
|_____________|      |______________|
|             |      |              |
|addY(y)      |1    *|              |
|getAllY()    | ⎯⎯⎯⎯⎯⎯→ |              |
|removeY(y)   |      |              |
|_____________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  def __init__(self):
    RM.ER(&#34;xtoy&#34;, &#34;onetomany&#34;, &#34;directional&#34;)

  def addY(self, y):
    RM.R(self, y, &#34;xtoy&#34;)

  def getAllY(self):
    return RM.PS(self, &#34;xtoy&#34;)

  def removeY(self, y):
    RM.NR(self, y, &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  pass
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#5.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 ←→ *, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;

                &lt;pre&gt;
  Plural  API          Singular API
 _____________        ______________
|      X      |      |       Y      |
|_____________|      |______________|
|             |      |              |
|addY(y)      |1    *| setX(x)      |
|getAllY()    | ←⎯⎯⎯⎯→ | getX()       |
|removeY(y)   |      | clearX()     |
|_____________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  def __init__(self):
    RM.ER(&#34;xtoy&#34;, &#34;onetomany&#34;, &#34;bidirectional&#34;)

  def addY(self, y):
    RM.R(self, y, &#34;xtoy&#34;)

  def getAllY(self):
    return RM.PS(self, &#34;xtoy&#34;)

  def removeY(self, y):
    RM.NR(self, y, &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def setX(self, x):
    RM.R(x, self, &#34;xtoy&#34;)

  def getX(self):
    return RM.P(self, &#34;xtoy&#34;)

  def clearX(self):
    RM.NR(self, self.getX(), &#34;xtoy&#34;)
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;


        


        &lt;tr&gt;
            &lt;td colspan=&#34;3&#34;&gt;
                &lt;h3&gt;Implementing &lt;b&gt;many&lt;/b&gt; to &lt;b&gt;one&lt;/b&gt; relationships between class X and Y&lt;/h3&gt;
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;


        &lt;tr&gt;
            &lt;td&gt;#6.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* → 1, directional, all methods on Y&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
    No API              Plural  API
 ______________        ______________
|     X        |      |       Y      |
|______________|      |______________|
|              |      |              |
|              |*    1|addX(x)       |
|              | ⎯⎯⎯⎯⎯⎯→ |getAllX()     |
|              |      |removeX(x)    |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (not tested)&lt;/p&gt;
                &lt;pre&gt;
class X:
  pass
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def addX(x) -&gt; None:
    RM.R(x, this, &#34;xtoy&#34;)

  def getAllX() -&gt; List:
    return RM.BS(this, &#34;xtoy&#34;)

  def removeX(x) -&gt; None:
    RM.NR(x, this, &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;p&gt;&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#7.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* ←→ 1, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;




                &lt;pre&gt;
  Singular API          Plural  API
 ______________        ______________
|     X        |      |       Y      |
|______________|      |______________|
|              |      |              |
|void  setY(y) |*    1|addX(x)       |
|Y     getY()  | ←⎯⎯⎯⎯→ |getAllX()     |
|void  clearY()|      |removeX(x)    |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (not tested)&lt;/p&gt;
                &lt;pre&gt;
class X:
  def setY(y) -&gt; None:
    RM.R(this, y, &#34;xtoy&#34;)

  def getY() -&gt; Y:
    RM.P(this, &#34;xtoy&#34;)

  def clearY() -&gt; None:
    RM.NR(this, getY(), &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def addX(x) -&gt; None:
    RM.R(x, this, &#34;xtoy&#34;)

  def getAllX() -&gt; List:
    RM.BS(this, &#34;xtoy&#34;)

  def removeX(x) -&gt; None:
    RM.NR(x, this, &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;p&gt;&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        


        &lt;tr&gt;
            &lt;td colspan=&#34;3&#34;&gt;
                &lt;h3&gt;Implementing &lt;b&gt;many&lt;/b&gt; to &lt;b&gt;many&lt;/b&gt; relationships between class X and Y&lt;/h3&gt;
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;


        &lt;tr&gt;
            &lt;td&gt;#8.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* → *, directional, all methods on X&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
  Plural  API              No API
 _____________        ______________
|      X      |      |       Y      |
|_____________|      |______________|
|             |      |              |
|addY(y)      |*    *|              |
|getAllY()    | ⎯⎯⎯⎯⎯⎯→ |              |
|removeY(y)   |      |              |
|_____________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (TODO, not tested)&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#9.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* → *, directional, all methods on Y&lt;/i&gt;&lt;/p&gt;

                &lt;pre&gt;
      No API            Plural  API
 ______________        ______________
|     X        |      |       Y      |
|______________|      |______________|
|              |      |              |
|              |*    *|addX(x)       |
|              | ⎯⎯⎯⎯⎯⎯→ |getAllX()     |
|              |      |removeX(x)    |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (TODO, not tested)&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;





        &lt;tr&gt;
            &lt;td&gt;#10.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* ←→ *, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;

                &lt;pre&gt;
   Plural  API          Plural  API
 ______________        ______________
|     X        |      |       Y      |
|______________|      |______________|
|              |      |              |
| addY(y)      |*    *| addX(x)      |
| getAllY()    | ←⎯⎯⎯⎯→ | getAllX()    |
| removeY(y)   |      | removeX(x)   |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (TODO, not tested)&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Code which supports the ideas in the theory above is provided in this &lt;a href=&#34;http://www.atug.com/downloads/pythonRmProof.zip&#34;&gt;python program&lt;/a&gt; or simply view the code and results as a &lt;a href=&#34;http://www.atug.com/downloads/pythonRmProof.pdf&#34;&gt;pdf&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;more-detail-on-each-template&#34;&gt;More Detail on each template&lt;/h1&gt;
&lt;p&gt;Here are some further notes on using each template.  I don&amp;rsquo;t cover each variation, so see the above table for the complete list of possibilites.  I also use slightly different method names here just in case you don&amp;rsquo;t like the &lt;code&gt;setX&lt;/code&gt; and &lt;code&gt;setY&lt;/code&gt; syntax I have been using.&lt;/p&gt;
&lt;h2 id=&#34;one-to-one&#34;&gt;One to one&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/rm_the1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Class X points to class Y.&lt;/p&gt;
&lt;h3 id=&#34;methods-on-class-x&#34;&gt;Methods on class X&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Returns&lt;/th&gt;
&lt;th&gt;Example method name&lt;/th&gt;
&lt;th&gt;Implementation in RM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;setPointer(y)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;R(x, y, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;getPointer()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;P(x, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;clearPointer()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NR(x, y, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;methods-on-class-y&#34;&gt;Methods on class Y&lt;/h3&gt;
&lt;p&gt;None.&lt;/p&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The clearPointer() implementation needs to get a reference to &lt;strong&gt;y&lt;/strong&gt; in order to call &lt;code&gt;NR(x,**y**,...)&lt;/code&gt;.  The implementation can either call its own &lt;code&gt;getPointer()&lt;/code&gt; method to get a reference to &lt;strong&gt;y&lt;/strong&gt;, e.g. clearPointer() would be implemented as &lt;code&gt;NR(x, getPointer() ,&amp;quot;xtoy&amp;quot;)&lt;/code&gt;.  Alternatively the getPointer() implementation can make a second call to relationship manager itself e.g.  &lt;code&gt;clearPointer()&lt;/code&gt; would be implemented as &lt;code&gt;NR(x, P(x,&amp;quot;xtoy&amp;quot;),&amp;quot;xtoy&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there is only &lt;em&gt;one&lt;/em&gt; relationship between class X and class Y, then your P and NR calls can specify &amp;ldquo;*&amp;rdquo; as the relationshipId in order to match any relationship between these two objects.  Alternatively, you can use the overloaded P and NR calls which don&amp;rsquo;t take a relationshipId at all. &lt;em&gt;[not sure if this note on overloaded methods is relevant to the latest C# and Java implementations]&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/_themes/canvas/acnvrule.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;one-to-one-with-back-pointer&#34;&gt;One to one, with back pointer&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/rm_the2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Class X points to class Y. &lt;br&gt;
Class Y can deduce a back pointer to class X.&lt;/p&gt;
&lt;h3 id=&#34;methods-on-class-x-1&#34;&gt;Methods on class X&lt;/h3&gt;
&lt;p&gt;Same as one to one, i.e.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Returns&lt;/th&gt;
&lt;th&gt;Example method name&lt;/th&gt;
&lt;th&gt;Implementation in RM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;setPointer(y)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;R(x, y, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;getPointer()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;P(x, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;clearPointer()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NR(x, y, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;methods-on-class-y-1&#34;&gt;Methods on class Y&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Returns&lt;/th&gt;
&lt;th&gt;Example method name&lt;/th&gt;
&lt;th&gt;Implementation in RM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;getBackPointer()&lt;/td&gt;
&lt;td&gt;B(y, &amp;ldquo;xtoy&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;and optionally setter methods &amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Returns&lt;/th&gt;
&lt;th&gt;Example method name&lt;/th&gt;
&lt;th&gt;Implementation in RM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;setBackPointer(x)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;R(x, y, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;&lt;br&gt; &lt;em&gt;or simply call &lt;code&gt;x.setPointer(this)&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;clearBackPointer()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NR(x, y, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;&lt;br&gt;_or simply call &lt;code&gt;x._clearPointer()&lt;/code&gt;_&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;notes-1&#34;&gt;Notes:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;An implicit back-pointer (i.e. a back reference) is always deducible, when using a relationship manager, thus instead of wiring up an explicit pointer relationship as a back-pointer , you can implement a back-pointer using an implicit back reference on an existing relationship (in this case the &amp;ldquo;xtoy&amp;rdquo; relationship) instead. i.e. see  &lt;code&gt;getBackPointer()&lt;/code&gt; on class Y.&lt;/li&gt;
&lt;li&gt;Notice all the relationshipId&amp;rsquo;s in this example (in both classes) are the same viz. &amp;ldquo;xtoy&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In implementing X methods, whenever you need a reference to &lt;strong&gt;y&lt;/strong&gt;, just call this.&lt;code&gt;getPointer()&lt;/code&gt;.  Similarly, in implementing Y methods, whenever you need a reference to &lt;strong&gt;x&lt;/strong&gt;, just call this.getBackPointer().  See discussion on this &lt;em&gt;above&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If you chose to have backpointer setter methods on class Y, you need not necessarily call the wrapping methods on X in order to implement them e.g. &lt;code&gt;setBackPointer(x)&lt;/code&gt; is implemented by simply calling &lt;code&gt;x.setPointer(this)&lt;/code&gt; (although it is recommended that you do, since X is the &amp;lsquo;controlling&amp;rsquo; class for the relationship - see &lt;a href=&#34;https://martinfowler.com/books/refactoring.html&#34;&gt;Martin Fowler &amp;lsquo;Refactorings&amp;rsquo;&lt;/a&gt; p. 197 &amp;ldquo;Change Unidirectional Association to Bidirectional&amp;rdquo;).  You could alternatively call the relationship manager directly, thus setBackPointer(x) becomes a call to &lt;code&gt;R(x, y, &amp;quot;xtoy&amp;quot;)&lt;/code&gt; and &lt;code&gt;clearBackPointer()&lt;/code&gt;  becomes a call to &lt;code&gt;NR(x, y, &amp;quot;xtoy&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you are trying to enforce a one to one relationship, then you should stricltly speaking, remove any exising relationship between a1 and b1 before creating a relationship between a2 and b1.  However relationship manager will remove the previous relationship for you automatically. See discussion on this behaviour. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;discussion-on-back-pointers&#34;&gt;Discussion on back pointers&lt;/h3&gt;
&lt;p&gt;One of the benefits of the relationship manager pattern is that &lt;em&gt;you don&amp;rsquo;t have to explicitly wire up and maintain back-pointers&lt;/em&gt;.  Once you add a pointer relationship, you get the back pointer relationship available, for free.  And once you delete the pointer relationship, the back-pointer relationship goes away automatically too.&lt;/p&gt;
&lt;p&gt;However if you want to delete or change the back-pointer relationship (from Y&amp;rsquo;s perspective) then you must talk to the relationship manager in terms of the relationship &amp;ldquo;xtoy&amp;rdquo;.  If you imlplement  the back-pointer relationship as a different relationship, with a different relationshipId, then you will fall prey to the same out of synch problems that traditional spaghetti wiring techniques often fall prey to.  The trick is to treat the relationship as two sides of the &lt;em&gt;one relationshipId&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/_themes/canvas/acnvrule.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;one-to-many&#34;&gt;One to many&lt;/h2&gt;
&lt;p&gt; &lt;img src=&#34;http://www.atug.com/andypatterns/images/rm_the3.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Class X points to many instances of class Y.&lt;/p&gt;
&lt;h3 id=&#34;methods-on-class-x-2&#34;&gt;Methods on class X&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Returns&lt;/th&gt;
&lt;th&gt;Example method name&lt;/th&gt;
&lt;th&gt;Implementation in RM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;add(y)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;R(x, y, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;getAll()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PS(x, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;remove(y)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NR(x, y, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;methods-on-class-y-2&#34;&gt;Methods on class Y&lt;/h3&gt;
&lt;p&gt;None.&lt;/p&gt;
&lt;h3 id=&#34;notes-2&#34;&gt;Notes:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Notice that the relationshipId has a &lt;code&gt;*&lt;/code&gt; symbol in it.  This means that you can add multiple relationships of that type without the relationship manager removing the prior relationship. Not sure which of my Relationship Manager implementations auto-support this - its been so long ago&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;one-to-many-with-back-pointers&#34;&gt;One to many, with back pointers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/rm_the4.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;methods-on-class-x-3&#34;&gt;Methods on class X&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Returns&lt;/th&gt;
&lt;th&gt;Example method name&lt;/th&gt;
&lt;th&gt;Implementation in RM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;add(y)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;R(x, y, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;getAll()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PS(x, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;remove(y)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NR(x, y, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;methods-on-class-y-3&#34;&gt;Methods on class Y&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Returns&lt;/th&gt;
&lt;th&gt;Example method name&lt;/th&gt;
&lt;th&gt;Implementation in RM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;getBackPointer()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;B(y, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;and optionally setter methods &amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Returns&lt;/th&gt;
&lt;th&gt;Example method name&lt;/th&gt;
&lt;th&gt;Implementation in RM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;setBackPointer(x)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;R(x, y, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;br&gt; &lt;em&gt;or simply call &lt;code&gt;x.setPointer(this)&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;clearBackPointer()&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NR(x, y, &amp;quot;xtoy*&amp;quot;)&lt;/code&gt;&lt;br&gt;_or simply call &lt;code&gt;x._clearPointer()&lt;/code&gt;_&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;some-more-deep-theory&#34;&gt;Some More Deep Theory&lt;/h1&gt;
&lt;p&gt;Skip this section if you just want to get on with coding&amp;hellip; 😉&lt;/p&gt;
&lt;h3 id=&#34;all-possible-relationship-scenarios&#34;&gt;All possible relationship scenarios?&lt;/h3&gt;
&lt;p&gt;When looking at all the possibiliteis of relationships between two classes, you get &lt;strong&gt;one to one, one to many, many to one&lt;/strong&gt; and &lt;strong&gt;many to many&lt;/strong&gt;.  You have the variations generated by whether the relationships are &lt;strong&gt;directional&lt;/strong&gt; or **bi-directional. ** Finally, you have variations of whether you put methods on one class or the other - for example, you could omit methods on e.g. the rhs. class, or you could go to the other extreme and provide a full range of methods on the rhs. class. &lt;/p&gt;
&lt;p&gt;Note that some combinatorial possibilities do not make sense and are left out of the table below. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; means &lt;strong&gt;singular&lt;/strong&gt; &lt;strong&gt;API&lt;/strong&gt; - this makes sense for one to one relationships, or the many side (ironically) of one to many relationships.  It consists of methods like &lt;strong&gt;get, set, clear&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; means &lt;strong&gt;plural&lt;/strong&gt; &lt;strong&gt;API&lt;/strong&gt;- this makes sense where you are dealing with collections, a &lt;em&gt;many&lt;/em&gt; concept.  It consists of methods like &lt;strong&gt;add, remove, getall&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;   means no methods relating to the relationship have been implemented on that class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Blank cells mean &amp;ldquo;not applicable&amp;rdquo;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;#UsageTemplates&#34;&gt;Scenario&lt;/a&gt; (see above)&lt;/th&gt;
&lt;th&gt;directional&lt;/th&gt;
&lt;th&gt;bi-directional&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;_one to one_&lt;br&gt;&lt;code&gt;1 --&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;_one to one_&lt;br&gt;&lt;code&gt;1 &amp;lt;--&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#1.&lt;/td&gt;
&lt;td&gt;S       -&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#2.&lt;/td&gt;
&lt;td&gt;-       S&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#3.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;S        S&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#3A.&lt;br&gt; (composite, pointing to self)&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;_one to many_&lt;br&gt;&lt;code&gt;1 --&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;_one to many_&lt;br&gt;&lt;code&gt;1 &amp;lt;--&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#4.&lt;/td&gt;
&lt;td&gt;P      -&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#5.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;P       S&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;_many to one_&lt;br&gt;&lt;code&gt;* --&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;_many to one_&lt;br&gt;&lt;code&gt;* &amp;lt;--&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#6.&lt;/td&gt;
&lt;td&gt;-       P&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#7.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;S         P&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;_many to many_&lt;br&gt;&lt;code&gt;* --&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;_many to many_&lt;br&gt;&lt;code&gt;* &amp;lt;--&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#8.&lt;/td&gt;
&lt;td&gt;P      -&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#9.&lt;/td&gt;
&lt;td&gt;-      P&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#10.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;P       P&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;An attempt at mapping the theoretical relationship possibilities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The above table shows all the possible relationship scenarios between two classes.  It indicates various possibilities as to the methods you can add to either class.  For example a one to many relationship where the &amp;ldquo;many&amp;rdquo; side has no need of any methods to see who is pointing at it, would use template 4.&lt;/p&gt;
&lt;h3 id=&#34;interesting-addendem&#34;&gt;Interesting Addendem&lt;/h3&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/rm-one to one and many maps 01.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;bi-directional-implementations-of-directional-relationships&#34;&gt;Bi-directional implementations of directional relationships&lt;/h3&gt;
&lt;p&gt;We must distinguish between a relationship that in its meaning, goes both ways, and a relationship which goes one way only.  And furthermore, implementationally, you can have RM methods on one class only, on the other class only, or on both classes.  The meaning of the relationship and the implementation (methods to create and look up those relationships) are two different things!&lt;/p&gt;
&lt;p&gt;Thus when you put an API (relationship manager methods) on both classes this might seem to imply that you are implementing bi-directionality.  However this does not mean that the &amp;ldquo;relationship&amp;rdquo; points in both directions.  The meaning of the relationship is often in one direction only, and the existence of methods on both classes merely gives you a convenient way of querying the relationships that exist.&lt;/p&gt;
&lt;p&gt;Thus the same relationship id should be used in both classes e.g. &lt;code&gt;&amp;quot;xtoy&amp;quot;&lt;/code&gt; (notice the sense of directionality is built into the name of the relationship!), even though it is a bidirectional relationship in the sense that there is an API on both classes allowing each class to find the other class.  In the following implementation of a one to many relationship between class X and class Y, notice the same relationship id &lt;code&gt;&amp;quot;xtoy&amp;quot;&lt;/code&gt; must be used in both classes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;        &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ER&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;onetomany&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;   
                                     &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bidirectional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;addY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getAllY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PS&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;removeY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;      &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NR&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  
    

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setX&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getX&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;     &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;clearX&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;          &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NR&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;getX&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;more-on-directionality-and-backpointers&#34;&gt;More on Directionality and Backpointers&lt;/h3&gt;
&lt;p&gt;Relationships are here considered directional.  So when you add a relationship with R(a,b) then &lt;strong&gt;a&lt;/strong&gt; points to &lt;strong&gt;b&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Using a relationship manager you can get it deduce who is pointing at you, which means you get &amp;lsquo;back-references&amp;rsquo; for free.  However being able to determine a back-reference doesn&amp;rsquo;t mean that the model you are building &lt;em&gt;officially&lt;/em&gt; has this pointer connection.  Thus we must distinguish official pointers from deducible back references / back pointers. &lt;/p&gt;
&lt;p&gt;To find what &lt;strong&gt;a&lt;/strong&gt; points to, use P(a).  To find out what is pointing at &lt;strong&gt;b&lt;/strong&gt;, use B(b).  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;API Short-hand&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;P(a)&lt;/td&gt;
&lt;td&gt;Find Pointer From&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B(b)&lt;/td&gt;
&lt;td&gt;Find Back Reference To&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thus, just because you point at something doesn&amp;rsquo;t mean it is officially pointing back at you. But, using a relationship manager you can deduce who is pointing at you.&lt;/p&gt;
&lt;p&gt;So if&amp;hellip;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;API Short-hand&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;R(a,b)&lt;/td&gt;
&lt;td&gt;if you make &lt;strong&gt;a&lt;/strong&gt; point to &lt;strong&gt;b&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;then&amp;hellip;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;API Short-hand&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;P(a) == b&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;a&lt;/strong&gt; points to &lt;strong&gt;b&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B(b) == a&lt;/td&gt;
&lt;td&gt;the thing pointing at &lt;strong&gt;b&lt;/strong&gt; is &lt;strong&gt;a&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;P(b) == null&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;b&lt;/strong&gt; doesn&amp;rsquo;t point at anything&lt;br&gt; &lt;em&gt;(crucial distinction - see above line).&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B(a) == null&lt;/td&gt;
&lt;td&gt;nothing is pointing back at &lt;strong&gt;a&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;more-on-backpointers&#34;&gt;More on Backpointers&lt;/h3&gt;
&lt;p&gt;Backpointers are pointers on the &amp;ldquo;receiving end&amp;rdquo; of a relationship, so that the receiving object knows who is pointing at it.  For example when a Customer places an Order, it might be convenient for any particular order instance to know which customer ordered it.  I think you can choose to conceive of the backpointer in a few different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as an extra, separate relationship or&lt;/li&gt;
&lt;li&gt;as part of the one bidirectional relationship or&lt;/li&gt;
&lt;li&gt;merely a convenience method in the implementation in the r.h.s. class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The easiest way of implementing this backpointer without using relationship manager is to follow the Martin Fowler refactoring technique - see Martin Fowler &amp;lsquo;Refactorings&amp;rsquo; p. 197 &amp;ldquo;Change Unidirectional Association to Bidirectional&amp;rdquo; - this will ensure you get the wiring correct.  In this refactoring, you decide which class is the master and which is the slave etc.  See the before and after python pdf below for an example of the correct wiring.&lt;/p&gt;
&lt;p&gt;The way of implementing a backpointer using relationship manager is simply to call the &lt;strong&gt;findObjectPointingToMe(toMe, id)&lt;/strong&gt; method.  Since a RM holds all relationships, it can answer lots of questions for free - just like SQL queries to a database.  See the before and after python pdf below for an example of using findObjectPointingToMe().&lt;/p&gt;
&lt;h3 id=&#34;before-and-after---modeling-composite-design-pattern-in-python&#34;&gt;Before and After - Modeling Composite Design Pattern  in Python&lt;/h3&gt;
&lt;p&gt;The following &lt;a href=&#34;http://www.atug.com/andypatterns/code/proxydecorator01.zip&#34;&gt;code&lt;/a&gt; is a good example of how the use of RM saves you from having to explicitly maintain backpointers. P.S. To run the code you also need the support files found &lt;a href=&#34;http://www.atug.com/downloads/pythonRmProof.zip&#34;&gt;here&lt;/a&gt;.  View the code below (requires the flash plugin) - showing an implementation of a Composite Pattern, with back pointer - or simply read the &lt;a href=&#34;http://www.atug.com/downloads/rm_annotation_by_ANDY_01.PDF&#34;&gt;pdf&lt;/a&gt; directly.&lt;/p&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/rm_annotation_by_ANDY_01.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;a-concrete-example&#34;&gt;A concrete example&lt;/h2&gt;
&lt;p&gt;This example uses the Boo .NET assembly, which is quite usable from other .NET langauges like C# and VB.NET etc.  Alternatively you can adapt this example to use the pure C# implementation assembly (something I should publish here at some stage).&lt;/p&gt;
&lt;p&gt;Say you want to model a Person class which has one or more Orders.  The Orders class has a backpointer back to the Person owning it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/PersonToOrderUsingRM001.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Instead of hand coding and reinventing techniques for doing all the AddOrder() methods and GetOrders() methods etc. using ArrayLists and whatever, we can do it using the relationship manager object instead, which turns out to be simpler and faster and less error prone. &lt;/p&gt;
&lt;p&gt;The RM (relationship manager) is implemented in this particular example as a static member of the base BO (business object) class.  Thus in this situation all business objects will be using the same relationship manager.&lt;/p&gt;
&lt;p&gt;Here is the c# code to implement the above UML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;System.Collections&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RelationshipManager55&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;WindowsApplicationUsing&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;_RelationshipManagerDllTest001&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;///   
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/// BO is the base Business Object class which holds a single static reference  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/// to a relationship manager. This one relationship manager is  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/// used for managing all the relationships between Business Objects.  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;///   
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BO&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Base business object  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM1&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;///   
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/// Person class points to one or more orders.  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/// Implemented using a relationship manager rather   
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/// than via pointers and arraylists etc.  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;///   
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BO&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ER&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;onetomany&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bidirectional&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ToString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Person: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AddOrder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Order&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RemoveOrder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Order&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NR&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;o&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;IList&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GetOrders&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PS&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;///   
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/// Order class points back to the person holding the order.  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/// Implemented using a relationship manager rather             /// than via pointers and arraylists etc.  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;///   
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Order&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BO&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Order&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ToString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Order Description: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SetPerson&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// though mapping is bidirectional,  
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#000&#34;&gt;there&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;still&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;relationship&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;direction&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GetPerson&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ClearPerson&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#000&#34;&gt;RM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NR&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GetPerson&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the project source code &lt;a href=&#34;http://www.atug.com/downloads/RmBooNet/WindowsApplicationUsing%20RelationshipManagerDllTest001.rar&#34;&gt;WindowsApplicationUsing RelationshipManagerDllTest001.rar&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&#34;future-directions&#34;&gt;Future Directions&lt;/h3&gt;
&lt;p&gt;A generics version of relationship manager would be cool - that way no casting would be required. Presently all calls to relationship manager return objects - which you have to cast to the specific type you actually have stored.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=44&#34;&gt;original andypatterns page&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
