[{"body":" This is a placeholder page that shows you how to use this template site.\n Information in this section helps your user try your project themselves.\n  What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.\n  Introductory “Hello World” example, if appropriate. More complex tutorials should live in the Tutorials section.\n  Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.\nPrerequisites Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nInstallation Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nSetup Is there any initial setup users need to do after installation to try your project?\nTry it out! Can your users test their installation, for example by running a command or deploying a Hello World example?\n","excerpt":" This is a placeholder page that shows you how to use this template …","ref":"/projects/getting-started/","title":"Getting Started"},{"body":" This is a placeholder page that shows you how to use this template site.\n For many projects, users may not need much information beyond the information in the Overview, so this section is optional. However if there are areas where your users will need a more detailed understanding of a given term or feature in order to do anything useful with your project (or to not make mistakes when using it) put that information in this section. For example, you may want to add some conceptual pages if you have a large project with many components and a complex architecture.\nRemember to focus on what the user needs to know, not just what you think is interesting about your project! If they don’t need to understand your original design decisions to use or contribute to the project, don’t put them in, or include your design docs in your repo and link to them. Similarly, most users will probably need to know more about how features work when in use rather than how they are implemented. Consider a separate architecture page for more detailed implementation and system design information that potential project contributors can consult.\nHey THERE this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page.\n   Name Age     Bob 27   Alice 23    another table\n   asdasdasd bbbbb xxxxx ccccc dddd     1111 22223333 OH MY 2020 2020   STUDENT where is everyone? how was your date plank length student hangout   STUDENT AAAAAAAAAAAAAAAAAAA how was your date plank length student hangout   STUDENT BBBBBB BBBBBB hi h coffeeeeeeeee plank length student hangout   no sign could have been washed or dumped here come the CAVALRY    subscection OK\nOK\nanother section Tempor velit sint sunt ipsum tempor enim ad qui ullamco. Est dolore anim ad velit duis dolore minim sunt aliquip amet commodo labore. Ut eu pariatur aute ea aute excepteur laborum. Esse ea esse excepteur minim mollit qui cillum excepteur ex dolore magna. Labore deserunt fugiat incididunt incididunt sint ea. Consequat dolore aute laboris quis proident quis non et est consectetur ex eiusmod sit culpa.\nCupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\nx = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass section-1 Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\nHey THERE this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page.\n   Name Age     Bob 27   Alice 23    another table\n   asdasdasd bbbbb xxxxx ccccc dddd     1111 22223333 OH MY 2020 2020   STUDENT where is everyone? how was your date plank length student hangout   STUDENT AAAAAAAAAAAAAAAAAAA how was your date plank length student hangout   STUDENT BBBBBB BBBBBB hi h coffeeeeeeeee plank length student hangout   no sign could have been washed or dumped here come the CAVALRY    what this project is about OK\nOK\nanother section Tempor velit sint sunt ipsum tempor enim ad qui ullamco. Est dolore anim ad velit duis dolore minim sunt aliquip amet commodo labore. Ut eu pariatur aute ea aute excepteur laborum. Esse ea esse excepteur minim mollit qui cillum excepteur ex dolore magna. Labore deserunt fugiat incididunt incididunt sint ea. Consequat dolore aute laboris quis proident quis non et est consectetur ex eiusmod sit culpa.\nCupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\nx = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass section-2 Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\n","excerpt":" This is a placeholder page that shows you how to use this template …","ref":"/projects/gituml/","title":"GitUML"},{"body":" This is a placeholder page that shows you how to use this template site.\n For many projects, users may not need much information beyond the information in the Overview, so this section is optional. However if there are areas where your users will need a more detailed understanding of a given term or feature in order to do anything useful with your project (or to not make mistakes when using it) put that information in this section. For example, you may want to add some conceptual pages if you have a large project with many components and a complex architecture.\nRemember to focus on what the user needs to know, not just what you think is interesting about your project! If they don’t need to understand your original design decisions to use or contribute to the project, don’t put them in, or include your design docs in your repo and link to them. Similarly, most users will probably need to know more about how features work when in use rather than how they are implemented. Consider a separate architecture page for more detailed implementation and system design information that potential project contributors can consult.\nUML shortcode hack versions\nHey THERE this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page.\n   Name Age     Bob 27   Alice 23    another table\n   asdasdasd bbbbb xxxxx ccccc dddd     1111 22223333 OH MY 2020 2020   STUDENT where is everyone? how was your date plank length student hangout   STUDENT AAAAAAAAAAAAAAAAAAA how was your date plank length student hangout   STUDENT BBBBBB BBBBBB hi h coffeeeeeeeee plank length student hangout   no sign could have been washed or dumped here come the CAVALRY    subscection OK\nOK\nanother section Tempor velit sint sunt ipsum tempor enim ad qui ullamco. Est dolore anim ad velit duis dolore minim sunt aliquip amet commodo labore. Ut eu pariatur aute ea aute excepteur laborum. Esse ea esse excepteur minim mollit qui cillum excepteur ex dolore magna. Labore deserunt fugiat incididunt incididunt sint ea. Consequat dolore aute laboris quis proident quis non et est consectetur ex eiusmod sit culpa.\nCupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\nx = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass section-1 Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\n","excerpt":" This is a placeholder page that shows you how to use this template …","ref":"/projects/aaaa-pynsource/","title":"Pynsource"},{"body":"OMG this text does not get rendered\n","excerpt":"OMG this text does not get rendered\n","ref":"/blog/patterns/","title":"Design Patterns"},{"body":"OMG this text does not get rendered\n","excerpt":"OMG this text does not get rendered\n","ref":"/blog/newcat/","title":"New Cat"},{"body":"","excerpt":"","ref":"/blog/news/","title":"News About Docsy"},{"body":"","excerpt":"","ref":"/blog/releases/","title":"New Releases"},{"body":"","excerpt":"","ref":"/blog/releases2/","title":"New Releases2"},{"body":"this is a second post\nHey this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page.\nsubscection OK\nOK\nanother section We’ve created our first website page, which can be accessed via the http://localhost:1313/bands/metallica/ URL. Let’s look at how thisURL is being composed.\nhttp://localhost:1313 is thebase URL. In the development environment, it points to localhost , whereas in production it has the value specified under the baseURL optioninside the config.toml file. /bands/ is thesection. The directory inside the content folderdetermines the section name), which is bands in our case. You can nest sections as needed. For example, it’s possible to have a structure like bands/genres/thrash-metal . metallica is aslug. By default, this is the name of your Markdown or HTML content file ( metallica.md in this case). The generated URL can be modified to a limited extent. Specifically, thesectionwill always equal to your folder structure, and it’s impossible to override it using configuration variables. The slug, however, can be changed using front matter. For example, edit metallica.md and add a slug option:\nWe’ve created our first website page, which can be accessed via the http://localhost:1313/bands/metallica/ URL. Let’s look at how thisURL is being composed.\nhttp://localhost:1313 is thebase URL. In the development environment, it points to localhost , whereas in production it has the value specified under the baseURL optioninside the config.toml file. /bands/ is thesection. The directory inside the content folderdetermines the section name), which is bands in our case. You can nest sections as needed. For example, it’s possible to have a structure like bands/genres/thrash-metal . metallica is aslug. By default, this is the name of your Markdown or HTML content file ( metallica.md in this case). The generated URL can be modified to a limited extent. Specifically, thesectionwill always equal to your folder structure, and it’s impossible to override it using configuration variables. The slug, however, can be changed using front matter. For example, edit metallica.md and add a slug option: We’ve created our first website page, which can be accessed via the http://localhost:1313/bands/metallica/ URL. Let’s look at how thisURL is being composed.\nhttp://localhost:1313 is thebase URL. In the development environment, it points to localhost , whereas in production it has the value specified under the baseURL optioninside the config.toml file. /bands/ is thesection. The directory inside the content folderdetermines the section name), which is bands in our case. You can nest sections as needed. For example, it’s possible to have a structure like bands/genres/thrash-metal . metallica is aslug. By default, this is the name of your Markdown or HTML content file ( metallica.md in this case). The generated URL can be modified to a limited extent. Specifically, thesectionwill always equal to your folder structure, and it’s impossible to override it using configuration variables. The slug, however, can be changed using front matter. For example, edit metallica.md and add a slug option:\nWe’ve created our first website page, which can be accessed via the http://localhost:1313/bands/metallica/ URL. Let’s look at how thisURL is being composed.\nhttp://localhost:1313 is thebase URL. In the development environment, it points to localhost , whereas in production it has the value specified under the baseURL optioninside the config.toml file. /bands/ is thesection. The directory inside the content folderdetermines the section name), which is bands in our case. You can nest sections as needed. For example, it’s possible to have a structure like bands/genres/thrash-metal . metallica is aslug. By default, this is the name of your Markdown or HTML content file ( metallica.md in this case). The generated URL can be modified to a limited extent. Specifically, thesectionwill always equal to your folder structure, and it’s impossible to override it using configuration variables. The slug, however, can be changed using front matter. For example, edit metallica.md and add a slug option:\nyet another Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section! Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section! Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section! Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section! Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section!\nNow try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section! Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section! Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section! Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section! Now try to access the following URL: http://localhost:1313/bands/ . You might expect it will return a 404 error, but that’s not the case. What happens is you actually get a list of all posts inside the bands section!\nDesign Patterns can become language features Many Design Patterns can become language features (observer, iterator) thus those languages become more expressive with less code needed. I would rather code in Dart, Python or Javascript than Lisp or Smalltalk. Some original patterns were ways of overcoming archaic or non dynamic language limitations. Of course many patterns are not reducible in this way.\nSome Design Patterns can become language features (observer, iterator) thus those languages become more expressive with less code needed. I would rather code in Dart, Python or Javascript than Lisp or Smalltalk. Some original patterns were ways of overcoming non dynamic language limitations.\n","excerpt":"this is a second post\nHey this is a standalone page. this is a …","ref":"/blog/2020/09/18/andy-2/","title":"Andy 2"},{"body":"this is a post\nHey THERE this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page.\n   Name Age     Bob 27   Alice 23    another table\n   asdasdasd bbbbb xxxxx ccccc dddd     1111 22223333 OH MY 2020 2020   STUDENT where is everyone? how was your date plank length student hangout   STUDENT AAAAAAAAAAAAAAAAAAA how was your date plank length student hangout   STUDENT BBBBBB BBBBBB hi h coffeeeeeeeee plank length student hangout   no sign could have been washed or dumped here come the CAVALRY    subscection OK\nOK\nanother section Tempor velit sint sunt ipsum tempor enim ad qui ullamco. Est dolore anim ad velit duis dolore minim sunt aliquip amet commodo labore. Ut eu pariatur aute ea aute excepteur laborum. Esse ea esse excepteur minim mollit qui cillum excepteur ex dolore magna. Labore deserunt fugiat incididunt incididunt sint ea. Consequat dolore aute laboris quis proident quis non et est consectetur ex eiusmod sit culpa.\nCupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\nx = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass section-1 Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\nsubby1 hi there\nsome html below to generate an alert - surely there is a simpler way?\n Note: This is some info Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.   A sample blockquote. Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\n Nested blockquotes are also possible. Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\n Headers work too This is the outer quote again.\n what about this?\nThis is also a code block. Ending lines must have *at least* as many tildes as the starting line. (in this case more...)  term definition another definition another term and another term and a definition for the term   Hi again Hi again Hi again Hi again\n   Header1 Header2 Header3     cell1 cell2 cell3 though I wonder how big this can get?   cell4 cell5 cell6   —-     cell1 cell2 cell3   cell4 cell5 cell6   =====     Foot1 Foot2 Foot3    ","excerpt":"this is a post\nHey THERE this is a standalone page. this is a …","ref":"/blog/2020/09/16/andy-1/","title":"Andy 1"},{"body":"Introduction This article is twenty years old - its ideas are now simplified and clarified at MVCA pattern\nA live demo running in a browser.\nTip for understanding this article: This is arguably the traditional MVC pattern with terminology tweaked and clarified, and updated for ‘modern’ times where Views are no longer manually drawn but are instead off the shelf GUI widgets or DOM elements.\n Mediator == Controller GUI == View  The Pattern  Comments Comments now disabled due to spam.\nPosted on Jan 18th, 2009 Hi Andy,\nI’ve read your article about the MGM Patterns, it’s a great pattern.\nHowever, I have a question, could you please show me.\nLet say I have a Textbox (GUI), a business object with only 1 property Text,\na mediator-view as your pattern defined.\nWhen changing Business.Text, this procedure is called:\nprocedure setText(Value: String); begin FText := Value; NotifyChanges; // \\*\\*\\* notify mediator to change Editbox content end; therefore, mediator is notified:\nprocedure BusinessChanged; begin FGUI.Text := FBusiness.Text; // this makes Editbox OnChange fires end; OnChange event of Editbox:\nprocedure Edit1Change(); begin Mediator := FindMediator(Self) Mediator.Business.Text := TEdit(Self).Text; { \\*\\*\\* This line would call Business.setText and make an infinity loop } end; The only method I’ve thought of is let the Mediator modify FText field of\nBusiness object. But in this way, Busniess and Mediator have to be in a same\nunit. Is there another way to solve this problem?\nThanks for your sharing!\nKarr. C.\nPosted by Andy on Jan 18th, 2009 Thanks for your interest in the MGM pattern. Your assumption in the above code is that the Editbox OnChange fires when you programatically set the FGUI.Text, which would cause the event sequence\ngui changes -\u003e mgm notified -\u003e changes model -\u003e model notifies mgm -\u003e mgm modifies gui -\u003e gui changes and so on, infinitely!! See your lines marked *** highlighted lines above.\nHowever the Editbox OnChange fires only seems to fire when the text is altered by the user in the gui. It does not fire when the edit1.text is changed programatically. So there is no loop.\nI tried it in Delphi 6. Here is a sample delphi app that proves it.\nhttp://www.atug.com/downloads/mgmquickproof01.zip\nIt has a cheaper form of mgm which I just whipped up, in order to demonstrate the point.\nP.S. If the event HAD fired, you could\n  temporarily disable the event by rewiring the event handler to Nil before writing to it programatically, then restoring the event handler again (yuk, but possible. You often have to do this when using mgm with treeviews.)\n  provide a way of setting the model data which does not trigger a notification. Make the private data public. Again, yuk.\n  … anyway thankfully you don’t need to do either of these things since Editbox OnChange does not fire when the edit1.text is changed programatically\nHope this helps.\n-Andy Bulka\nPosted by Anon on Jan 21st, 2009 Here is a nice article on MVP pattern and the differences to MVC.\nResources Old link on andypatterns.com\n","excerpt":"Introduction This article is twenty years old - its ideas are now …","ref":"/blog/2019/01/04/mgm-pattern/","title":"MGM Pattern"},{"body":"Introduction For the original MGM pattern see MGM pattern\nTodoMVC-OO The classic Javascript TodoMVC app implemented without a framework, using plain Object Oriented programming + a traditional MVC design pattern. Distinct, mediating Controller objects are the key to this implementation.\nRunning demo here.\n MVCA Architectural Pattern This project fully implements the TodoMVC specification. It is implemented without a framework, using plain Object Oriented programming + the MVCA architectural design pattern:\nWhilst the MVC (Model View Controller) pattern is commonly and glowingly referred to, implementations can vary widely. Most documentation on MVC, including the official wikipedia article is vague on definitions and details. This TodoMVC-OO project uses the MVCA pattern (formerly the MGM pattern) which is a clear and unambiguous interpretation of MVC, with the following key ideas:\n The View means a modern GUI framework, and therefore is usually already available to be used by the programmer. One or more Controllers mediate between the View and the rest of the Application, listening for GUI events. Nobody else knows about the View. The Model is traditional data, may contain some business logic, and may broadcast events when its attributes change. The Application owns the model(s), holds view state and contains some business logic methods. An Eventing system is needed, traditionally Observer pattern but the stronger decoupling and the proper event objects of the Publisher-Subscriber pattern is preferred.  Thus MVCA simply means “Model View Controller Application” - all four roles are necessary to any implementation.\n The above diagram was generated semi-automatically from Javascript source code residing in GitHub using GitUML. Click here for more diagram detail as a .svg and the ability to zoom.  View this actual diagram 181 on GitUML.  MVCA In Detail Let’s go through the four parts of the MVCA pattern, which is precisely adhered to by this TodoMVC-OO implementation. Actually there is a fifth important part - the eventing system - which glues it all together - let’s look at the Model first.\nModel The Model is traditional, may contain some business logic, and may broadcast events when its attributes change.\nBy traditional, I mean the Model does not know about anything else except perhaps other models. Its the core model of your data, the domain of the what the application is all about. In the case of the Todo application, it is a collection of Todo items, which can be marked completed.\nclass TodoItem { constructor(title, id, completed) { this._title = title == undefined ? \"\" : title; this._completed = completed == undefined ? false : completed; this.id = id == undefined ? util.uuid() : id; // no getter/setter needed  } get title() { return this._title; } set title(v) { this._title = v; this.dirty() } get completed() { return this._completed; } set completed(v) { this._completed = v; this.dirty() } get as_dict() { return { id: this.id, title: this.title, completed: this.completed } } delete() { notify_all(\"deleted todoitem\", this) } dirty() { notify_all(\"modified todoitem\", this, {during_load: false}) } } The Model is usually broken into many smaller interconnected models in an attempt to reflect the real world domain being implemented as software. The Model can be implemented as mere objects in memory or a full-fledged database model, or a ORM mapping between the two. In our case, we have a pure memory model, which gets persisted into local browser storage as JSON.\nYou will find that some ‘model’ concepts are more about how the information is presented in the GUI, thus I recommend these are kept as attributes of the Application class, and referred to as the view state or view model. The attribute filter is an example of such view state. The Application class can also hold collections of models which is what we do in this project:\nclass Application { constructor(config) { this.todos = [] // model collection  this.filter = 'all' // view model, options are: 'all', 'active', 'completed'  ... } The model can be fat or thin - a fat model will have more business logic in the model. A thin model will most business or application logic in the Application class, treating the model as just data structures.\nFinally, the Model needs to participate in the internal eventing system. Whenever an attribute changes it should send out a notification event - this is why most attributes of our TodoItem class are accessed via getter and setter methods. For example setting title or completed will trigger an internal event to whoever may be listening. This internal eventing mechanism is how Controllers know to update the GUI with updated model information.\nView The View means a modern GUI framework, and as such is already available to be used by the programmer. In our case, our modern GUI framework is the browser DOM which you can build in HTML:\n\u003cinput id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\"\u003e then Controllers use the GUI native eventing system to listen for interesting events\nthis.gui.$toggle_all.on('change', handler) Controller The Controller is the most interesting aspect of MVC.\nIn many software designs, the Controller isn’t necessarily a single thing. A bunch of stray GUI event handler functions are in reality, part of the ‘controller role’. Code that copies data from the model into the GUI/DOM is also part of the Controller role. I feel the challenge of GUI architectures is to tame the role of Controller into some semblance of coherance and symmetric organisation. Which is why MVCA prescribes creating Controller classes.\nIn TodoMVC-OO we have a Controller class ControllerTodoItem and instantiate one per TodoItem model instance. That’s arguably a lot of controller instances, but this approach allows fine grained updating of the DOM. In contrast, the Jquery version of TodoMVC rebuilds the entire todo DOM on each refresh - something that might become inefficient for non-toy apps.\nIn TodoMVC-OO we have a Controller class ControllerHeader for looking after the header part of the GUI and ControllerFooter for looking after the footer area, which is where the filter buttons are and the count of uncompleted todo items is displayed. The number of Controllers you create is up to you: one Controller per GUI element for fine grained updates, a more relaxed approach of one Controller per related group of GUI elements (my preference) or arguably even one Controller for all GUI elements! I go into more academic detail on this topic in my MGM pattern paper.\nBy clearly defining what a mediating Controller is, and organising our app into different sensible controllers, we tame our design and prevent it from turning into spaghetti.\n  View events only talk to Controllers:\n View events (‘gui events’ e.g. via .on('click', ...)) go to one or more Controllers. Controllers update the View, usually in reponse to an ‘internal event’ notification.    The Controller talks to the rest of the system:\n Accesses App view state. Calls App business logic methods. Modifies the Model directly.    The Controller listens for ‘internal events’ broadcast from Model \u0026 App.\n  Whilst that may seem like a lot to understand, its basically saying Controllers talk to the GUI - nobody else does. Controllers then call into the rest of the system to get things done\nImportantly, we must resist putting business logic into the Controller, simply let the controller call the Application to do what needs to be done. The Controller should do the minimal possible work, mediating and translating between the View and the rest of the system (the App + Model).\nApplication The role of the Application is also important and often overlooked/undocumented. The Application owns the Model, and looks after persisting it. The Application can listen for internal Model events.\nWhilst it is fine to wire Controllers directly to model instances, you will also need the Application to hold “view state” e.g. like the state of the active “filter” in this Todo application. The Application is a centralised class, a kind of hub - to hold higher level business logic and more complex model manipulations. The Application class’s functionality can of course be composed of smaller pieces as software grows more complex but a class called Application should always still exist.\nEventing System Eventing is an important consideration in decoupling models from controllers, and to facilitate abstract communication between objects.\nTwo eventing systems should be distinguished:\n GUI native: The native eventing system of the GUI Framework e.g. DOM .on('click', ... Internal: Your choice of an application system wide eventing system e.g. Publish-Subscribe e.g. document.addEventListener(\"hello\", (event) =\u003e { ... })  Both eventing systems are used in the TodoMVC-OO implementation. As you can see in the diagram above, DOM eventing reaches the Controllers, but no further. The remaining eventing is internal.\nHere is a Literate Code Map of the event flow of TodoMVC-OO. Events are reified as coloured objects, each different event gets a different colour. TodoMVC-OO event flow.\n The above diagram was generated semi-automatically from Javascript source code residing in GitHub using GitUML. Click here for more diagram detail as a .svg and the ability to zoom.  View this actual diagram 134 on GitUML.  The eventing pattern depicted here is Publisher-Subscriber where real event objects are ‘broadcast’ into the ether/event bus/system/whatever - allowing any code in the system to subscribe and respond - the point is, the code emitting the event does not have references to receiver object/methods.\nThe Javascript built in Publisher-Subscriber eventing approach is more flexible and powerful than the Observer pattern since the Observer pattern requires observers to know about and subscribe to Subject objects, which is not always possible or convenient. More dicussion on the differences can be found in this article and on Stackoverflow. Thus we use Publisher-Subscriber eventing (event name → object method) rather than the traditional Observer pattern (object → object) approach.\nI used to be a fan of the traditional Observer pattern but in my later years find the Publisher-Subscriber pattern to be simpler and more powerful - plus Publisher-Subscriber is built into Javascript you simply document.addEventListener(\"hello\", (event) =\u003e { ... }) to listen and document.dispatchEvent(new CustomEvent(event_name, { detail: {from: from, data: data } })) to notify all.\nThe Javascript built in Publisher-Subscriber eventing system is used as the internal eventing system of this TodoMVC-OO implementation.\nApplication Bootstrapping To get things running, some bootstrapping code will create an instance of the Application which in turn creates all the Controllers and loads the Model. The bootstrapping in TodoMVC-OO is done in app.js which creates an instance of Application which is defined in application.js.\n(function (window) { let config = {...} new Application(config) })(window); Notice that a config object with a list of callback methods is passed into the Application.\nGiving the Application class knowledge of individual Controller classes and all the GUI view elements they need is arguably contaminating the Application class with too much GUI view and Controller knowledge.\nThe solution I use is to pass the Application a config object which contains a bunch of callbacks. Each callback function will magically create a Controller instance, wired to look after its GUI elements. Each callback function hides, within itself, references to the DOM - which we don’t want the Application to have. In this way, the bootstrapping code and the Controller code are the only parts of the architecture that know about the View specifics (which we want to restrict).\nThus whenever the Application needs to instantiate a Controller (e.g. each time a TodoItem is created) it calls a config callback function. Another example is during bootup - some permanent Controllers need to be created, like the Controller looking after the header area, so the Application calls this.callback_config.cb_header(this) which creates an instance of the ControllerHeader wired to $('.new-todo') and $('.toggle-all'). The Application only needs to know the callback function names and thus remains pure.\nNotice in the config object below that each callback refers to the view through JQuery syntax e.g. $('ul.todo-list') and passes these references into the contructor of the Controller:\nlet config = { // Callback to create the todo item controllers - are added as needed  cb_todo: function (app, todo) { new ControllerTodoItem( app, todo, { $todolist: $('ul.todo-list') } ) }, // Callbacks to create the permanent controllers  cb_header: function (app) { new ControllerHeader( app, { $input: $('.new-todo'), $toggle_all: $('.toggle-all') } ) }, cb_footer: function (app) { new ControllerFooter( app, { $footer: $('footer'), $footer_interactive_area: $('.footer') }) } } Of course the Controller itself will have further references to View DOM elements, however these references should be based on searching within the outer DOM element passed to the Controller - thus achieving some degree of ‘component-isation’ and re-use. For example the same Controller could be used to look after different DOM elements with different element id’s.\nTodoMVC-OO Conclusion This project fully implements the TodoMVC specification and is implemented without a framework, using plain Object Oriented programming + MVCA architectural design pattern, as described above.\nRunning demo here.\nImprovements In this implementation, I notice that footer renders too early rather than right at the end of the initial render. Its just a subtle flash of the footer when the page is initially redrawn, but I’d like to correct this.\n Resources  Official TodoMVC project with other TodoMVC implementations (e.g. Vue, Angular, React etc.) TodoMVC-ECS - My “Entity Component System” implementation of TodoMVC GUI Showdown MVCA another example of an app implemented using the MVCA architecture (Javascript, open source) MGM pattern (older version of MVCA, presented at a Patterns Conference)  Diagramming  GitUML diagramming used for this project Literate Code Mapping diagramming used for this project  Credit Created by Andy Bulka\nNote: This project is not not officially part of the TodoMVC project - as it is does not use a MVC framework library, nor does it meet the criterion of “having a community” around it. On the other hand, perhaps a pattern is equivalent enough to a framework - after all there is a plain Javascript TodoMVC implementation officially available using ad-hoc techniques. Plus, there has been a “community” around the Object Oriented MVC pattern for decades now - hasn’t there? 😉\n","excerpt":"Introduction For the original MGM pattern see MGM pattern\nTodoMVC-OO …","ref":"/blog/2019/01/04/mvca-architectural-pattern/","title":"MVCA Architectural Pattern"},{"body":"baseURL broken https://github.com/gohugoio/hugo/issues/5226\nYou need to set to true to make image links generated with full path incl. the ‘hugo-docsy-example’ sub-path\ncanonifyurls = true For example these images will not render unless canonifyurls is true cos the subpath of the baseURL is not generated for assets - thus is relevant for deploying to github project pages but its a bit ugly having to turn canonifyurls on because all the links in the website become long, absolute.\nGee this is needed also for previewing locally! WTF but https://discourse.gohugo.io/t/solved-generate-wrong-image-relative-url/11726 says:\n The baseURL config doesn’t affect links set in markdown.\n Andy’s shortcode hack You can refer to images in html files using RelPermalink but for markdown files which don’t allow such templating, we have to encapsulate the trick into a shortcode fragment\n{{ .Get 0 | absURL }} E.g. trying to add a shortccodes to image urls can be the solution (no leading /, either viz images/... not /images/...) This workaround trick seems to survive turning canonifyurls off.\nNote: trying to fiddle with my shortcode and get a relpermalink into it has been abandoned\n{{ $url := .Get 0 | absURL }} {{/* $url = $url.RelPermalink */}} {{/* {{ $url = .RelPermalink }} */}} {{ $url }} leaving off the slash leaving off the leading / on image references as recommended here is not the solution either because the images don’t show up in development server mode, nor does the right url get generated when you generate the static site\ne.g.\nrelative to blog/... unless you put the /blog in there you get http://localhost:1313/ blog/2019/01/04/plantuml-images/blog/images/fred.png 404 (Not Found) with the /blog you get the correct http://localhost:1313/ blog/images/fred.png viz. bad urls generated: \u003cimg src=\"/blog/images/fred.png\" alt=\"png your image\"\u003e \u003cimg src=\"/images/uml/fred-uml.png\" alt=\"png your image\"\u003e leaving off the leading / on image references is not the solution either \u003cimg src=\"blog/images/fred.png\" alt=\"png your image\"\u003e \u003cimg src=\"images/uml/fred-uml.png\" alt=\"png your image\"\u003e Experiments with page variables your site’s url is https://abulka.github.io/ hi there andy.\nyour site’s url is\nhttps://abulka.github.io/ The .Page.RelPermalink and .Page.Permalink are\n/blog/2019/01/04/on-images/ https://abulka.github.io/blog/2019/01/04/on-images/ links and xrefs all these are correctly output - either absolute or relative links get the correct path from the baseUrl inserted\npynsource dir\npynsource info\npynsource info\npynsource info\npynsource info\nviz.\n\u003cp\u003e\u003ca href=\"https://abulka.github.io/hugo-docsy-example/projects/aaaa-pynsource/\" title=\"About Us\"\u003epynsource dir\u003c/a\u003e\u003c/p\u003e \u003cp\u003e\u003ca href=\"https://abulka.github.io/hugo-docsy-example/projects/aaaa-pynsource/some-info/\" title=\"some-info\"\u003epynsource info\u003c/a\u003e\u003c/p\u003e \u003cp\u003e\u003ca href=\"https://abulka.github.io/hugo-docsy-example/projects/aaaa-pynsource/some-info/\" title=\"some-info\"\u003epynsource info\u003c/a\u003e\u003c/p\u003e \u003cp\u003e\u003ca href=\"/hugo-docsy-example/projects/aaaa-pynsource/some-info/\" title=\"some-info\"\u003epynsource info\u003c/a\u003e\u003c/p\u003e \u003cp\u003e\u003ca href=\"/hugo-docsy-example/projects/aaaa-pynsource/some-info/\" title=\"some-info\"\u003epynsource info\u003c/a\u003e\u003c/p\u003e http://localhost:1313/projects/aaaa-pynsource/\nhttp://localhost:1313/projects/aaaa-pynsource/some-info/\nANDY IMAGES svg is ok but has no background unless you specify\nskinparam backgroundcolor AntiqueWhite/Gold See colour info https://plantuml.com/color\nserve from the blog subdir shortcode hack version: what about a png? from the blog subdir\nshortcode hack version: serve from static dir from a common dir in /static - note that you don’t need to specify the /static part of the path, just the subdir path.\nshortcode hack version: remember to set the out path of plantuml vscode plugin to static/images/uml/\nlocal uml dir you can keep uml .wsd files anywhere so how about in a subdir within the blog area you are writing for - they still get exported to a common place though.\nNote Note that images will always end up in a subdirectory structure - even if you specify exportSubFolder false - cos that only controls an extra dir level with the same name as the uml file, not the whole dir levels thing.\n{ \"plantuml.exportOutDir\": \"static/images/uml\", \"plantuml.exportSubFolder\": false }   So you need to specify a long path into the static dir - related to where your original source code lives e.g. /images/uml/content/en/blog/newcat/uml/test-uml.png\nshortcode hack version: docsy theme visualised using my tool \nshortcode hack version: \nmy new ‘imgsvg’ shortcode attempt it works!\njust the image\n image with clickable link\nUsual content Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Header 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Salt-n-Pepa Bel Biv DeVoe Kid ‘N Play  And an ordered list:\n Michael Jackson Michael Bolton Michael Bublé  And an unordered task list:\n Create a sample markdown document Add task lists to it Take a vacation  And a “mixed” task list:\n Steal underpants ? Profit!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition terms are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts  This is an alert.  Note: This is an alert with a title.  This is a successful alert.  This is a warning!  Warning! This is a warning with a title!  Sizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this. ","excerpt":"baseURL broken https://github.com/gohugoio/hugo/issues/5226\nYou need …","ref":"/blog/2019/01/04/on-images/","title":"on-images"},{"body":"Introduction The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back again. A pair of methods on some class e.g. load/save are often the signature of a Transformation Interface.\nThe Pattern  ","excerpt":"Introduction The Transformation Interface is both a design pattern and …","ref":"/blog/2019/01/04/transformation-interface-design-pattern/","title":"Transformation Interface Design Pattern"},{"body":"This is a typical blog post that includes images.\nThe front matter specifies the date of the blog post, its title, a short description that will be displayed on the blog landing page, and its author.\nIncluding images Here’s an image (featured-sunset-get.png) that includes a byline and a caption.\nFetch and scale an image in the upcoming Hugo 0.43. Photo: Riona MacNamara / CC-BY-CA\n  The front matter of this post specifies properties to be assigned to all image resources:\nresources: - src: \"**.{png,jpg}\" title: \"Image #:counter\" params: byline: \"Photo: Riona MacNamara / CC-BY-CA\" To include the image in a page, specify its details like this:\n Fetch and scale an image in the upcoming Hugo 0.43. Photo: Riona MacNamara / CC-BY-CA\n  The image will be rendered at the size and byline specified in the front matter.\n","excerpt":"This is a typical blog post that includes images.\nThe front matter …","ref":"/blog/2018/10/06/easy-documentation-with-docsy/","title":"Easy documentation with Docsy"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Header 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Salt-n-Pepa Bel Biv DeVoe Kid ‘N Play  And an ordered list:\n Michael Jackson Michael Bolton Michael Bublé  And an unordered task list:\n Create a sample markdown document Add task lists to it Take a vacation  And a “mixed” task list:\n Steal underpants ? Profit!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition terms are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts  This is an alert.  Note: This is an alert with a title.  This is a successful alert.  This is a warning!  Warning! This is a warning with a title!  Sizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this. ","excerpt":"Text can be bold, italic, or strikethrough. Links should be blue with …","ref":"/blog/2018/10/06/the-second-blog-post/","title":"The second blog post"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Header 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Salt-n-Pepa Bel Biv DeVoe Kid ‘N Play  And an ordered list:\n Michael Jackson Michael Bolton Michael Bublé  And an unordered task list:\n Create a sample markdown document Add task lists to it Take a vacation  And a “mixed” task list:\n Steal underpants ? Profit!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition terms are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts  This is an alert.  Note: This is an alert with a title.  This is a successful alert.  This is a warning!  Warning! This is a warning with a title!  Sizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this. ","excerpt":"Text can be bold, italic, or strikethrough. Links should be blue with …","ref":"/blog/2018/01/04/another-great-release/","title":"Another Great Release"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Header 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Salt-n-Pepa Bel Biv DeVoe Kid ‘N Play  And an ordered list:\n Michael Jackson Michael Bolton Michael Bublé  And an unordered task list:\n Create a sample markdown document Add task lists to it Take a vacation  And a “mixed” task list:\n Steal underpants ? Profit!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition terms are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts  This is an alert.  Note: This is an alert with a title.  This is a successful alert.  This is a warning!  Warning! This is a warning with a title!  Sizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this. ","excerpt":"Text can be bold, italic, or strikethrough. Links should be blue with …","ref":"/blog/2018/01/04/another-great-release2/","title":"Another Great Release2"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header. Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this. ","excerpt":" This is a placeholder page. Replace it with your own content.\n Text …","ref":"/projects/getting-started/example-page/","title":"Example Page"},{"body":"Developing a Layout Algorithm for UML diagrams Intro Presented to the Melbourne Patterns Group, Wednesday 6th April 2011 6:30 PM\nThe Problem: Untangling UML Diagrams Terms  Nodes – these are the shapes/rectangles Edges – these are the lines connecting the shapes  Background  My UML tool is written in Python Existing layout libraries for e.g. python PyGraphviz has no windows port so I wrote my own Layout is reasonably hard to implement – academic papers are very complex and deal in a lot of math DIRTY SECRET OF ACADEMIA - Most Layout algorithms only deal with ‘points’ and don’t take into account real width and height  Thus for any real world use (unless dealing with network and particle visualisation where each node is the same size/shape), it seemed to me that one needs to run an overlap removal algorithm after the layout to remove shape overlaps.\nOverlap removal algorithm needs to minimise shape movement in order to respect the layout results\nWhat I developed  I used a ‘spring layout’ adapted from java and javascript I developed my own overlap removal algorithm Developed a GUI sandbox test app for development  Overlap Removal - Before and After   before\n    after applying layout\n  Unit Testing Extensive unit tests were created to keep on top of the layout algorithm results. A word document containing annotated screenshots for each test helped me enormously.\n  an overlap removal use case which became a unit test\n  Layout / persistence format was created for creating layout scenarios\n{'type':'node', 'id':'D25', 'x':6, 'y':7, 'width':159, 'height':106} {'type':'node', 'id':'D13', 'x':6, 'y':119, 'width':119, 'height':73} {'type':'node', 'id':'m1', 'x':170, 'y':9, 'width':139, 'height':92} Unit Testing Brittleness Avoided Loose tests using (e.g. I created a function called ensureYorder() etc) were created so that the tests were not too brittle. Slight variations in position are ignored.\nView this unit test file at the Pynsource GitHub repository tests/test_overlaps1.py. Here is an example unit test:\ndef _LoadScenario3(self): self.g.LoadGraphFromStrings(TEST_GRAPH3) def test3_5InsertedVerticallyTwoPushedDown(self): self._LoadScenario3() # move m1 to the left node = self.g.FindNodeById(\"m1\") node.left, node.top = (6, 4) d97 = self.g.FindNodeById(\"D97\") oldD97pos = (d97.left, d97.top) # assert m1 has been inserted vertically - two pushed down were_all_overlaps_removed = self.overlap_remover.RemoveOverlaps() self.assertTrue(were_all_overlaps_removed) self.assertEqual(2, self.overlap_remover.GetStats()[\"total_overlaps_found\"]) self.assertTrue(self._ensureYorder(\"m1\", \"D25\", \"D13\")) self.assertTrue(self._ensureXorder(\"m1\", \"D97\", \"D98\")) self.assertTrue(self._ensureXorder(\"D25\", \"D97\", \"D98\")) self.assertTrue(self._ensureXorder(\"D13\", \"D97\", \"D98\")) self.assertEqual(oldD97pos, (d97.left, d97.top)) # ensure D97 hasn't been pushed Running the tests:\n  An example test run\n  Having a huge bank of unit tests helped in refactoring, too. Imagine testing all the necessary scenarios by hand!\nThe final Results were pretty good!\n  A UML diagram after overlap removal\n  Design Patterns Used Memento  Memento was used to remember graph layout positions and then compare mementos to see if anything had ‘changed’ and thus drop out of the Spring layout algorithm early Memento was used to save/restore layouts in my test GUI – assigned to keys 0..9  Blackboard Blackboard pattern used to run layout several times and figure out which was the best, cleanest result using multiple criteria. Each run is a ‘snapshot’\nSnapshot 1 [6] LL 0 NN pre rm overlaps 5 LN 0 scale 1.6 bounds 23 (500, 473) \u003c--- Snapshot 2 [4] LL 0 NN pre rm overlaps 5 LN 1 scale 1.4 bounds 30 (570, 537) Snapshot 3 [5] LL 0 NN pre rm overlaps 6 LN 2 scale 2.0 bounds 17 (444, 393) Snapshot 4 [2] LL 0 NN pre rm overlaps 4 LN 2 scale 1.4 bounds 34 (648, 537) Snapshot 5 [3] LL 0 NN pre rm overlaps 5 LN 4 scale 2.0 bounds 21 (427, 508) Snapshot 6 [1] LL 0 NN pre rm overlaps 10 LN 5 scale 2.0 bounds 18 (485, 379) Python goodness helped in this ‘AI’ smartness\ndef sortfunc(d): # this does the thinking! return (d['LL'], d['LN'], d['bounds_area_simple'], -d['scale'], d['NN_pre_OR']) Future  “Line over node” overlap was abandoned as it started to get really complex with a lot of trigonometry and perhaps this area needs a more academic approach Non straight lines and line routing is probably the better direction Adding an understanding of UML semantics is another direction to research, so that e.g. base classes are above derived classes etc.  Overlap Removal Server In 2020 I needed to expose the overlap removal code as an API for javascript to use.\nHere is that small research sub-project https://github.com/abulka/pynsource/tree/master/Research/overlap_removal_server\nResources Code and Links  Overlap removal code is Python, open source Part of my python UML tool PyNSource: Reverse engineer python source code into UML - display UML as Ascii art or PlantUML diagrams in a proper diagramming visual workspace.  Slides on Scribd UML Graph Layout - Andy Talk - March 2011\nSlides as HTML  The problem of laying out UML Spring Layout Mapping layout to Real World OGL MVC Overlap Removal Unit tests and unit test diagrams Memento Design Pattern Blackboard Design Pattern \u0026 Injecting sorting function Future..   Slides as Pdf download View as pdf\n Images Sample Images   before\n    after applying layout\n  ","excerpt":"Developing a Layout Algorithm for UML diagrams Intro Presented to the …","ref":"/blog/2011/04/06/uml-layout/","title":"UML Layout"},{"body":"Introduction As design patterns become more mainstream, various IDE’s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you. This paper explores the state of pattern automation software, discusses the pros and cons of various approaches and then goes on to discusses the broader issues raised by the attempt to automate something which some argue, in principle, perhaps should not be automated at all..\nNote: The pattern automation paper was followed up a few years later with a talk entitled design pattern automation - part 2 SEE BELOW which reviews the current crop of UML tools circa 2006. Fot a review of Netbeans 6 design pattern support - stay tuned for a blog posting after I give my talk to the Melbourne Patterns Group in Feb 2009.\nThis paper is a revision of one that appeared at KoalaPLoP 2002 – the ThirdAsia-Pacific Conference on Pattern Languages of Programmes. Conferences in Research and Practice in Information Technology,Vol. 13. J. Noble, Ed. Reproduction for academic, not-for profit purposes permitted provided this text is included.\nDesign Pattern Automation \u0026 UML Tool Support Various UML Tools support design pattern usage. You typically drag and drop patterns onto your workspace and they appear as UML classes. Its a bit more complicated than this, and raises all sorts of interesting issues. Read the pdf (part 1) and then read the powerpoint and watch the video (part 2).\nPart 1 - Early tools and the philosophy of pattern automation  Part 2 - Design Pattern Tools as of 2006 Here are the slides from a talk entitled “Design Pattern support in UML tools - part II” which I gave in October 2006 to the Melbourne Patterns Group, Australia.\n Alternatively, view the above powerpoint on slideshare or download the powerpoint .ppt directly:\nAddendum As part of my Design Pattern Automation - Part 2 talk, I recorded some of that session. Here is a youtube video of how to apply design patterns using IBM’s Rational tool. Apologies about the sound quality - just look at the pictures!\nDemonstration of Patterns in IBM’s Rational tool. http://www.youtube.com/watch?v=IjKClDX2dUU\n","excerpt":"Introduction As design patterns become more mainstream, various IDE’s …","ref":"/blog/2002/01/04/design-pattern-automation/","title":"Design Pattern Automation"},{"body":"Introduction Andy’s Published Design Patterns These four papers are substantial works which have been presented at KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs) in both 2000 and 2001. My shepherds (paper peer reviewers) were:\n Jim Coplien (MGM pattern) Ali Arsanjani (TI pattern) James Noble (RM pattern).  These final versions also incorporate comments and reviews from the attendees of KoalaPlop 2000 and 2001.\nAbstract A central mediating class which records all the one-to-one, one-to-many and many-to-many relationships between a group of selected classes. Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional “pointer” and “arraylist” techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved.\nIntro2 Presented at ….\nThe Pattern  Resources See original andypatterns page\n","excerpt":"Introduction Andy’s Published Design Patterns These four papers are …","ref":"/blog/2001/08/04/relationship-manager-design-pattern/","title":"Relationship Manager - Design Pattern"},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background-cabin_hu711514a202e4ee80bf848c5946e20294_385912_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background-cabin_hu711514a202e4ee80bf848c5946e20294_385912_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About Andy Bulka A sample site using the Docsy Hugo theme.        Goldydocs is a sample site using the Docsy Hugo theme that shows what it can do and provides you with a template site structure. It’s designed for you to clone and edit as much as you like. See the different sections of the documentation and site for more ideas.     This is another section      This is another section     ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/about/","title":"About Goldydocs"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","excerpt":"This is the blog section. It has two categories: News and Releases. …","ref":"/blog/","title":"Docsy Blog"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background-staircase_hu711514a202e4ee80bf848c5946e20294_458706_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background-staircase_hu711514a202e4ee80bf848c5946e20294_458706_1920x1080_fill_q75_catmullrom_top.jpg); } }  Andy Bulka's Software Blog \u0026 Projects Learn More   Download   Andy Bulka is a software developer in Melbourne, Australia\n\n        Hi, my name is Andy Bulka and I am a Python and Nodejs/Electron software developer. I’ve also recently discovered Flutter, which is likely going to dominate a large part of software development in the future.\nThis website holds my blog on software development incl. UML and pattern based software development. These blog entries are often based on presentations that I have given to live audiences at various programmer enthusiast user groups or conferences.\n      New chair metrics! The Goldydocs UI now shows chair size metrics by default.\nPlease follow this space for updates!\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n   Follow us on Twitter! For announcement of latest features etc.\nRead more …\n     This is the second Section        Download from AppStore Get the Goldydocs app!\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n   Follow us on Twitter! For announcement of latest features etc.\nRead more …\n     The Patterns Movement  Capturing hard-won software design experience in the form of design patterns and architectural patterns is a noble cause that everyone can contribute to. You can contribute by writing patterns and maybe even coming to a Plop patterns conference. Basically when you see a software development technique a few times, and see that it isn’t yet documented - write it up in Pattern format and give it a name! A pattern is more than just a “tip” or technique though - a pattern represents an abstract idea - that can be implemented in various ways depending on your circumstances.\nThere are a couple of things I would like to see happen in the patterns world.\nFirst, it would be nice if there was a single, authoritative repository of patterns. Yes an attempt has been made - a catalog book and and various websites - but nothing authoratative. I’m starting a list of links here.\nSecondly, it would be nice to have deep design pattern support in UML within all our favourite IDE’s. For example Netbeans has it all - coding, form design, UML and design pattern support - albiet not as integrated as it could be and not as polished as it could be. Update: Unfortunately Netbeans seems to have dropped UML support in recent builds?\nIf IDE’s are not your cup of tea, then how about this: source code should have comment markers indicating where the patterns are, so that a reverse engineering tool can visualise not only the UML but also where the patterns are. My own UML tool PyNSource will have such a feature - est. June 2011.\nFurther advancements are arguably executable UML and even the possibility of building software without code. I muse a bit about this in my blog entry on software visualisation and my paper on design pattern tools. Patterns at all levels need to be core visual building blocks of IDE’s, or at the very least, extractable from source code into some visual UML tool - rather than being design ghosts that float around, implicit, in our source code.\nFor full site, see http://www.andypatterns.com/\n   ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","title":"Goldydocs"},{"body":"there seems to be built in content? there seems to be built in content? there seems to be built in content?\nWe can add content here which is good\n   Name Age     Bob 27   Alice 23    OLD FRONT PAGE My Design Patterns Relationship Manager Pattern A central mediating class which records all the one-to-one, one-to-many and many-to-many relationships between a group of selected classes. Classes that use a Relationship Manager to implement their…\nModel Gui Mediator Pattern The MGM pattern is a variation of MVC (model view controller) or MVP (Model View Presenter) but takes into account the use of modern off the shelf GUI controls. A MGM object displays a portion of a…\nTransformation Interface Pattern The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back agai…\nDesign Pattern Automation As design patterns become more mainstream, various IDE’s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example,…\nTalks and Articles See my blog page for details_._\nAbout\nblog\nApps and Websites released this year - 2019 GitUML UML visualisation for Git repositories (website app).\nUnderstand code quickly: Automatically generate UML class diagrams from source code residing in git repositories. Diagrams automatically update when you push code using git.\nVisit GitUML now, create a free account and begin creating UML diagrams and documentation.\nPynsource UML tool for Python (Desktop App for Mac, Window, Linux) - brand new version. Zoom in and out. PlantUML view. Auto Layout. Import Python 3 code.\nVersion 1.71 - new for 2019\nVisit the brand new dedicated website pynsource.com.\nBuy the Pro Edition for $20 to unlock the zoom feature. Community Edition is fully functional and open source - check out the github repository. Donate to support this project (donate link coming soon).\nMy Apps and Websites - 2018 Print42 Print42 is a log tailing GUI program which optionally echoes log lines to thermal printer tape. Its like a modern thermal printer version of a ticker tape for tailing log files. It features display font size options, search and filtering. You can also annotate the output with text fragments that you type in - or screenshots that you paste in.\nThe video is 13 minutes long and covers the basic use cases, history of the project etc.\nAs well as physically printing from Free42, the Print42 software can also be used to print HP Prime screenshots (from either the emulator or real HP Prime hardware via the HP connectivity kit).\nOutside the world of calculators, Print42 can be used to ‘tail’ log files (programmers take note) and to print graphic snippets from the web. Useful if you want to rapidly print information to stuff into your pocket or to study and annotate printouts of complex information, at your desk.\nIf you are looking for a useful, fun new gadget, you might want to consider buying an Epson thermal printer and trying Print42. However you can also use Print42 with your regular desktop printer, for free.\nThe website for downloads and further information is www.print42.atug.com\nPython to RPN I am pleased to announce the Python to HP42S RPN converter website is online.\nwww.pyrpn.atug.com You write code in a high level structured language (which happens to be Python 3 syntax), hit a button and RPN is generated. You then paste the RPN into Free42 or transfer it to your DM42 (by creating a raw) - and it runs.\n Examples: http://www.pyrpn.atug.com/examples User Guide: http://www.pyrpn.atug.com/help Canvas for 42S Simulator: http://www.pyrpn.atug.com/canvas List of HP42S Commands Supported Reference: http://www.pyrpn.atug.com/cmds  The converter supports core Python syntax (which is very powerful), but does not implement the built in Python libraries that you would get in desktop Python. You have to rely on the ability to call HP42S commands from Python to do your work - which of course you can do. Specifically, it has the following capabilities:\n Variables Functions, Multiple functions, nested functions Parameter passing, receiving return values, multiple return values if elif else Comparison operators == != \u003e \u003c \u003e= \u003c= Booleans True, False and operators not or and for loops, range(), for..in iteration through lists and dictionary keys while loops, while…else continue and break operations in for loops and while loops Lists and Dictionaries (basic operations only). Matrices, Pythonic matrix element access syntax [row,col] NumPy compatible slicing syntax for sub-matrices Complex numbers using either 42S or Python native syntax Expressions involving nested brackets assert Testing and clearing of flags Access most HP42S commands as function calls e.g. FIX(2) Some enhanced functions to make life easier e.g. varmenu() automates and simplifies the generation of MVAR based code.  My Other Apps and Consulting Services If you would like me to run a design patterns course or consult on your next software design, please check out my product page. There is also an open source Python UML tool you might be interested in, plus references to products I have developed over the years esp. the worldclass argumentation visualisation software Rationale and bCisive.\nMy Medium Articles - 2018 - 2020 I’ve been publishing a lot on Medium recently. Why? Because the articles seems to get more widely read, and the Medium editor is so simple and produces beautifully formatted articles.\nBuilding a deployable Python-Electron App\nBuilding a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps - which I outline here.\nAsync/await for wxPython\nPython 3 GUI apps with asynchronous functionality\nGetting Python and wxPython apps into the Ubuntu app store\nHave you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.\nDjango View logging is back-the-front\nHow the order of view request log messages in Django apps might be confusing, and how to fix it.\nTodoMVC implemented using traditional OO, Controllers and Events.\nTodoMVC implemented in a classic Object Oriented way - which includes running code you can run in your browser.\nTodoMVC implemented using a game architecture — ECS.\nBuilding traditional GUIs with the Entity Component System\nComing soon\nLiterate Code Maps\nComing soon: A Medium article - for now this is a GitHub page. I’ve invented a diagramming methodology called Literate Code Maps which improve upon some aspects of UML - actually they are quite different and arguably more useful than UML for understanding complex source code projects. I’ve been using this notation for many years, and it might help you in your projects.\nGitHub Projects A pair of extensions for Visual Studio Code Snippets Explorer Visual Studio Code extension which displays all available language snippets in a TreeView\nhttps://github.com/abulka/vscode-snippets-explorer\nSnippet Creator This extension helps to automate snippet creation. Select the code you want to create snippet from and use command Create Snippet from the command palette or your custom keybind.\nhttps://github.com/abulka/vscode-snippet-creator\nBrew Moments I’ve recently learned mobile app development using Flutter. Here is my first app.\nhttps://abulka.github.io/brew-moments/\n\nSidebar My Developer Story This stackoverflow timeline is like a resume - except its more fun and useful to look at.\n Story view Traditional view   Building a deployable Python-Electron App Here is my latest article, published on Medium, about how to use Electron as a GUI front end to Python 3. It gets over 1,000 reads a week for some reason, more than any of my other articles.\nTodoMVC implementation articles Here are my two recent articles implementing the classic Javascript TodoMVC app in various ways. These two articles shows you how to design apps. Its an alternative to using a modern javascript framework like Vue, Angular or React.\n Classic - OO, Controllers and Events ECS - using a game architecture  xx this is a test\nPynsource UML tool for Python source code - visit www.pynsource.com\nVersion 1.76 - released Apr 22, 2020\n- Zoom, zoom to fit\n- Python 3 compatibility\n- New accurate AST based python parser\n- Layout algorithm\n- Ascii UML view built into the GUI, including an innovative Ascii UML layout\n- PlantUML view for beautiful renderings of UML\n- Colour sibling nodes\n- Open Source\nPrint42 Print42 is a log tailing GUI program which optionally echoes log lines to thermal printer tape. Its like a modern thermal printer version of a ticker tape for tailing log files. It features display font size options, search and filtering. You can also annotate the output with text fragments that you type in - or screenshots that you paste in.\nPython to RPN converter Check out Python to RPN if you have an old vintage HP Calculator that you want to program in Python! Impossible? See also my blog post How I used the Python AST capabilities to build a Python to Rpn converter.\nHexMVC - Design Pattern HexMVC - A new, lightweight, architectural pattern for building applications based on the Hexagonal layered architecture pattern + MVC – presented by Andy Bulka. To be published 2019.\nDesign Patterns Training Elevate the effectiveness of your entire programming team - Andy can deliver his existing or a customised Design Patterns Course to your entire programming team - at your company’s premises. Check out the details.\n Summary after this point there will be a summary list of pages within the Projects\n","excerpt":"there seems to be built in content? there seems to be built in …","ref":"/projects/","title":"Projects"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"},{"body":"this is a post\nback to blog on plantuml and xref stuff\nxref stuff\nxref stuff\nhttp://localhost:1313/hugo-docsy-example/blog/2019/01/04/plantuml-images/#links-and-xrefs\nHey THERE this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page. this is a standalone page.\n   Name Age     Bob 27   Alice 23    another table\n   asdasdasd bbbbb xxxxx ccccc dddd     1111 22223333 OH MY 2020 2020   STUDENT where is everyone? how was your date plank length student hangout   STUDENT AAAAAAAAAAAAAAAAAAA how was your date plank length student hangout   STUDENT BBBBBB BBBBBB hi h coffeeeeeeeee plank length student hangout   no sign could have been washed or dumped here come the CAVALRY    subscection OK\nOK\nanother section Tempor velit sint sunt ipsum tempor enim ad qui ullamco. Est dolore anim ad velit duis dolore minim sunt aliquip amet commodo labore. Ut eu pariatur aute ea aute excepteur laborum. Esse ea esse excepteur minim mollit qui cillum excepteur ex dolore magna. Labore deserunt fugiat incididunt incididunt sint ea. Consequat dolore aute laboris quis proident quis non et est consectetur ex eiusmod sit culpa.\nCupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\nx = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass x = 100 class A: pass section-1 Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\nsubby1 hi there\nsome html below to generate an alert - surely there is a simpler way?\n Note: This is some info Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.   A sample blockquote. Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\n Nested blockquotes are also possible. Cupidatat ea do et in excepteur in. Ad nostrud ut est esse eu duis ea sunt eiusmod. Aliquip tempor veniam sint elit fugiat. Velit incididunt laboris amet incididunt labore dolore irure velit excepteur commodo deserunt laborum. Consectetur eu fugiat veniam veniam Lorem labore magna eiusmod. Ea occaecat reprehenderit pariatur consectetur minim labore ut aliquip.\n Headers work too This is the outer quote again.\n what about this?\nThis is also a code block. Ending lines must have *at least* as many tildes as the starting line. (in this case more...)  term definition another definition another term and another term and a definition for the term   Hi again Hi again Hi again Hi again\n   Header1 Header2 Header3     cell1 cell2 cell3 though I wonder how big this can get?   cell4 cell5 cell6   —-     cell1 cell2 cell3   cell4 cell5 cell6   =====     Foot1 Foot2 Foot3    ","excerpt":"this is a post\nback to blog on plantuml and xref stuff\nxref stuff\nxref …","ref":"/projects/aaaa-pynsource/some-info/","title":"Some Info"}]