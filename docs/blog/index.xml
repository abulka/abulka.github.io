<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy&#39;s Blog on Andy Bulka</title>
    <link>https://abulka.github.io/blog/</link>
    <description>Recent content in Andy&#39;s Blog on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://abulka.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Plain Text Diagrams</title>
      <link>https://abulka.github.io/blog/2025/01/29/plain-text-diagrams/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2025/01/29/plain-text-diagrams/</guid>
      <description>Plain Text Diagrams are a way of representing diagrams of code structure and behaviour in a plain text format.&#xA;Plain Text &amp;lsquo;diagrams&amp;rsquo; - aren&amp;rsquo;t really diagrams but are nested, indented text files that can be rapidly parsed by the human eye to gain a high level understanding of a software system.&#xA;I call them text &amp;lsquo;diagrams&amp;rsquo; because they are a way of representing the structure and behaviour of a codebase in a way that is similar to UML diagrams, but implemented as text, using indentation and text arrows -&amp;gt; instead of boxes and arrows and graphics.</description>
    </item>
    <item>
      <title>GUI Showdown</title>
      <link>https://abulka.github.io/blog/2022/02/11/gui-showdown/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2022/02/11/gui-showdown/</guid>
      <description>Andy&amp;rsquo;s GUI Showdown - The same application, implemented in various ways - which is better, cleaner, more understandable etc?&#xA;Like the TodoMVC &amp;ldquo;Rosetta Stone&amp;rdquo; project, but uses a different example application, and includes Python as well as Javascript implementations.&#xA;This project was originally intended to see if an ECS (Entity Component System), which is commonly used in building games, could be used to implement a &amp;ldquo;normal&amp;rdquo; GUI application.&#xA;Five Javascript implementations: Live Demo of all Javascript implementations.</description>
    </item>
    <item>
      <title>History of this Blog</title>
      <link>https://abulka.github.io/blog/2022/01/21/history-of-this-blog/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2022/01/21/history-of-this-blog/</guid>
      <description>These blog posts are often based on presentations that I have given to live audiences at various programmer enthusiast user groups or conferences.&#xA;Talks given but unfortunately no website presentation materials 2007 July - Object Role Modeling - What is it? 2006 October - More on UML Pattern Tools 2004 October - Design Patterns found in the C# Language 2004 June - Object Thinking - Book Review 2003 Aug - Pattern Automation and UML 2003 January - Object Orientation, UML and Delphi 2002 December - Mediator Dialog Patterns 2002 October - An Introduction to Refactoring Blog Entries in Date Order 2019 - HexMVC Design Pattern (coming soon&amp;hellip;) 2018 June - How I used the Python AST capabilities to build a Python to Rpn converter 2011 - Developing a Layout Algorithm for UML diagrams 2011 - Easy Dependency Injection and Mocking in Ruby 2011 - Recursively Cloning Directories in Ruby using Hard Links 2010 - Ruby vs.</description>
    </item>
    <item>
      <title>TodoMVC implemented using a game architecture — ECS</title>
      <link>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/</guid>
      <description>Building traditional GUIs with the Entity Component System.&#xA;Is the Entity Component System any good for building traditional GUIs?&#xA;It turns out that the answer is yes! Whilst ECS is most commonly used in building games, it can also be used for building a traditional web “form” style application like TodoMVC. However you will need to radically rethink how models, their data and behaviour is organised.&#xA;This is arguably a refreshing, mind-blowing lesson in GUI programming!</description>
    </item>
    <item>
      <title>TodoMVC implemented using traditional OO, Controllers and Events</title>
      <link>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/</guid>
      <description>TodoMVC implemented in a classic Object Oriented way.&#xA;TodoMVC is a long standing web project showing how a ToDo app can be built in numerous frameworks.&#xA;The classic Javascript TodoMVC app implemented without a framework, using plain Object Oriented programming + a traditional MVC design pattern. Distinct, mediating Controller objects are the key to this implementation.&#xA;Running demo here.&#xA;See my full article on Medium here.&#xA;See also this GitHub repo by Marc Grabanski which shows us how to built TodoMVC in vanilla JS in 2022 (no classes are used in this version).</description>
    </item>
    <item>
      <title>Django View logging is back-the-front</title>
      <link>https://abulka.github.io/blog/2019/09/04/django-view-logging-is-back-the-front/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/09/04/django-view-logging-is-back-the-front/</guid>
      <description>Have you ever looked through your Django log files and console messages, felt something was out of order and didn’t make sense, but couldn’t quite put your finger on it?&#xA;Here is an example of what I mean. Here is some view code:&#xA;def diagramz_list(request, template_name=&amp;#34;list.html&amp;#34;): log.info(&amp;#34;diagramz_list has been called&amp;#34;) ... return render(request, template_name, {&amp;#34;object_list&amp;#34;: diagrams}) that gets routed via url(r”^listz$”, views.diagramz_list, name=”listall”).&#xA;Let’s look at the log file and console messages that get generated when you do the usual python manage.</description>
    </item>
    <item>
      <title>Getting wxPython apps into the Ubuntu app store</title>
      <link>https://abulka.github.io/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/</guid>
      <description>Have you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.&#xA;I wanted to get my UML tool for Python, Pynsource, into the Ubuntu/Snapcraft app store for a long time. This is the story of how I made that happen.&#xA;It certainly wasn’t easy. It took me a week of work, struggling with the concepts, documentation and various bugs in the tooling to finally get my app listed.</description>
    </item>
    <item>
      <title>Async/await for wxPython</title>
      <link>https://abulka.github.io/blog/2019/03/02/async/await-for-wxpython/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/03/02/async/await-for-wxpython/</guid>
      <description>How to build Python 3 GUI apps with asynchronous functionality.&#xA;Python 3’s support of async/await is the new hotness, allowing cooperative computation with reduced complexity and without needing threads — as long as you use async compatible libraries like aiohttp etc. You can’t use the famous requests library because it is not async aware and will block, but not to worry, those other libraries have you covered.&#xA;See full article on Medium here.</description>
    </item>
    <item>
      <title>Building a Python-Electron App</title>
      <link>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</guid>
      <description>Building a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps — which I propose to outline here.&#xA;See full article on Medium here.</description>
    </item>
    <item>
      <title>Python AST Parsing</title>
      <link>https://abulka.github.io/blog/2018/06/01/python-ast-parsing/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/06/01/python-ast-parsing/</guid>
      <description>How I used the Python AST capabilities to build the Python to Rpn converter.&#xA;Python compilation pipeline My program works at the AST stage of the compilation pipeline:&#xA;Specifically my approach has been to use Python&amp;rsquo;s built in ability to parse itself into an AST Abstract Syntax Tree, then to traverse this tree using the visitor design pattern to generate the RPN.&#xA;The Python AST parser is built into Python and thus requires that you be running Python to use it.</description>
    </item>
    <item>
      <title>UML Layout</title>
      <link>https://abulka.github.io/blog/2011/04/06/uml-layout/</link>
      <pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/04/06/uml-layout/</guid>
      <description>Developing a Layout Algorithm for UML diagrams Intro Presented to the Melbourne Patterns Group, Wednesday 6th April 2011 6:30 PM&#xA;The Problem: Untangling UML Diagrams Terms Nodes – these are the shapes/rectangles Edges – these are the lines connecting the shapes Background My UML tool is written in Python Existing layout libraries for e.g. python PyGraphviz has no windows port so I wrote my own Layout is reasonably hard to implement – academic papers are very complex and deal in a lot of math DIRTY SECRET OF ACADEMIA - Most Layout algorithms only deal with ‘points’ and don’t take into account real width and height Thus for any real world use (unless dealing with network and particle visualisation where each node is the same size/shape), it seemed to me that one needs to run an overlap removal algorithm after the layout to remove shape overlaps.</description>
    </item>
    <item>
      <title>Mocking in Ruby</title>
      <link>https://abulka.github.io/blog/2011/03/19/mocking-in-ruby/</link>
      <pubDate>Sat, 19 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/03/19/mocking-in-ruby/</guid>
      <description>Easy Dependency Injection and Mocking in Ruby&#xA;Here is a simple technique where you can inject mock methods into a class that you are unit testing.&#xA;Given you have a class ClassA&#xA;class ClassA def hi &amp;#34;hi&amp;#34; end end Using .class_eval You can replace the &amp;ldquo;hi&amp;rdquo; method from your unit test, without editing the source code of ClassA at all. You can inject mock methods - whatever.&#xA;def test_2 ClassA.class_eval do # injecting into ClassA class def hi &amp;#34;hello&amp;#34; end end a = ClassA.</description>
    </item>
    <item>
      <title>Cloning Directories in Ruby</title>
      <link>https://abulka.github.io/blog/2011/03/01/cloning-directories-in-ruby/</link>
      <pubDate>Tue, 01 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/03/01/cloning-directories-in-ruby/</guid>
      <description>Recursively Cloning Directories in Ruby using Hard Links&#xA;Hard links exist under windows 7 so you can clone huge directories or files without taking up any extra disk space. Both the original and the copy are equal and apps can&amp;rsquo;t tell the difference between them - because we are using true hard links (not shortcuts or symbolic links).&#xA;Built in Windows Command The dos command for cloning a file is simply</description>
    </item>
    <item>
      <title>Ruby vs Python list comprehensions</title>
      <link>https://abulka.github.io/blog/2010/11/18/ruby-vs-python-list-comprehensions/</link>
      <pubDate>Thu, 18 Nov 2010 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2010/11/18/ruby-vs-python-list-comprehensions/</guid>
      <description>Let&amp;rsquo;s compare Python list comprehensions vs. the way Ruby achieves the same thing thing.&#xA;Intent: Loop through a list of numbers and pick out the ones greater than 5, and multiply them by 100. Return them as a list.&#xA;Python #!/usr/bin/env python # Long explicit way: result = [] for n in range(1,8): if n &amp;gt; 5: result.append(n*100) print result # result [600, 700] # Concise way: print [n*100 for n in [1,2,3,4,5,6,7] if n &amp;gt; 5] # result [600, 700] Ruby #!</description>
    </item>
    <item>
      <title>Refactoring to PureMVC</title>
      <link>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</guid>
      <description>Let&amp;rsquo;s look at how to refactor an existing architecture to the PureMVC architecture. Your application requires that you display &amp;lsquo;model&amp;rsquo; data in some sort of UI &amp;lsquo;view&amp;rsquo;.&#xA;Introduction MVC Architectural Pattern I have long been fascinated by the MVC (Model View Controller) architectural pattern, first conceived in the 1960&amp;rsquo;s. What it promises, to those who can fathom its mysteries, is an orderly way of organising your application architecture. You define a de-coupled domain/business model that is oblivious to any GUI that might be displaying it.</description>
    </item>
    <item>
      <title>PureMVC</title>
      <link>https://abulka.github.io/blog/2009/03/01/puremvc/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/03/01/puremvc/</guid>
      <description>PureMVC - Architectural Pattern incl. a minimal wxPython example.&#xA;Understanding PureMVC can be hard, even though it is a relatively simple framework. That&amp;rsquo;s why a minimal example can help. Here is one I created for wxPython and Python users. This will run fine on windows, mac and linux. Install the PureMVC python port and wxPython (which is already present on Mac 10.5) and you should be able to run it.</description>
    </item>
    <item>
      <title>Central Patterns Repository</title>
      <link>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</link>
      <pubDate>Thu, 12 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</guid>
      <description>Towards a central repository of Design Patterns&#xA;An authoritative central repository of Design Patterns does not exist. There is a book called The Pattern Almanac 2000 by Linda Rising however this is no more than an index of patterns - nothing of substance except a one line descrtipion. And furthermore, it leaves out hundreds if not thousands of patterns - scattered across books, websites and people&amp;rsquo;s code. 2020 Update: Central repositories on the internet are now commonplace.</description>
    </item>
    <item>
      <title>Netbeans Uml</title>
      <link>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</link>
      <pubDate>Wed, 11 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</guid>
      <description>Let&amp;rsquo;s take a look at the UML and design pattern support in Netbeans and investigate Netbean&amp;rsquo;s cool ability to build &amp;ldquo;custom&amp;rdquo; design patterns - visually.&#xA;Introduction UML and Design Pattern Support in Netbeans 6.5&#xA;Netbeans is an opensource IDE from Sun and importantly Netbeans offers a wonderful GUI form designer plus UML facilities, which Eclipse doesn&amp;rsquo;t come bundled with out of the box.&#xA;Unfortunately the UML support described in this article has been removed from later versions of Netbeans.</description>
    </item>
    <item>
      <title>Visualising Software</title>
      <link>https://abulka.github.io/blog/2009/01/22/visualising-software/</link>
      <pubDate>Thu, 22 Jan 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/01/22/visualising-software/</guid>
      <description>Ways of Visualising Software Designs&#xA;This blog article explores the novel ways of developing software more visually and in visualising software generally - that is without coding. It also explores ways of visualising software designs and of watching software execute. Visual Programming and Executable UML are the closest terms that describe this area.&#xA;Some of these projects have failed and others continue to thrive (e.g. Scratch). As of 2020 the new big thing in this area is low code and no-code.</description>
    </item>
    <item>
      <title>State Pattern in Flex</title>
      <link>https://abulka.github.io/blog/2008/09/11/state-pattern-in-flex/</link>
      <pubDate>Thu, 11 Sep 2008 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2008/09/11/state-pattern-in-flex/</guid>
      <description>A tutorial on how to implement the State design pattern in Flex 3. We are going to have a traffic light move through several states (red, orange, green). Of course there are other states the traffic light might be in, as well as transitional states (green and orange at the same time), but lets keep things simple!&#xA;Note Flex and Flash are discontinued technologies. You can still run .swf files locally on your computer using these instructions.</description>
    </item>
    <item>
      <title>Extract Composite Refactoring</title>
      <link>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</link>
      <pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</guid>
      <description>Extract Composite - Refactoring to a Pattern Refactoring existing code so that it improves and conforms to a design pattern can be a good thing. Your code will be easier to understand since it follows a known &amp;lsquo;pattern&amp;rsquo;. Of course you have to need the change - your code will probably be uncomfortable to read and be crying out for clarification.&#xA;This refactoring is about implementing a one to many relationship in your code more clearly by refactoring to the Composite design pattern.</description>
    </item>
    <item>
      <title>Thoughts on Closures</title>
      <link>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</link>
      <pubDate>Mon, 05 Nov 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</guid>
      <description>Thoughts on Closures It seems like closures are all the rage in software development circles. Ruby and Groovy have them and then C# got them. Python had a form of them but are they really closures? What are closures anyway - do we need them?&#xA;In this presentation I argue that anything you can do with closures you can do without closures. Often not as elegantly, but often just as clearly.</description>
    </item>
    <item>
      <title>Teaching 23 Patterns</title>
      <link>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</link>
      <pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</guid>
      <description>Teaching 23 patterns in 3 days I have been running a design patterns course for several years where I teach 23 design pattern patterns in 3 days. I cover all the GOF (Gang of Four) patterns plus more. Here are some tales from the front lines!&#xA;History Having attended Melbourne Patterns Group meetings for quite a few years (what wonderful discussions we have there!), and having written up three design patterns of my own, I decided to teach a design patterns course and offer it commercially.</description>
    </item>
    <item>
      <title>Tooled Composite Pattern</title>
      <link>https://abulka.github.io/blog/2006/03/01/tooled-composite-pattern/</link>
      <pubDate>Wed, 01 Mar 2006 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2006/03/01/tooled-composite-pattern/</guid>
      <description>Ever wanted to create a &amp;ldquo;direct manipulation&amp;rdquo; program where you select various tools and manipulate stuff on a workspace? These sorts of applications are quite difficult to build due to the many possible combinations of behavior that is needed. Every tool must know what to do with each type of object. How do we manage this sort of complexity?&#xA;How do you represent shapes? How do you represent tools? How do tools and shapes interact?</description>
    </item>
    <item>
      <title>ORM Pattern</title>
      <link>https://abulka.github.io/blog/2005/07/01/orm-pattern/</link>
      <pubDate>Fri, 01 Jul 2005 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2005/07/01/orm-pattern/</guid>
      <description>Relational databases and OO memory models use different paradigms. Mapping between one and the other is often necessary but usually ends up being fiddly unless an auto-mapping ORM tool is used.&#xA;How an ORM works Let&amp;rsquo;s face it - a lot of developers prefer to just code classes - that&amp;rsquo;s what OO is all about. Having then to persist those classes into tables creates all sorts of fiddly mapping code. If you don&amp;rsquo;t need to persist into tables - fine.</description>
    </item>
    <item>
      <title>Swapping Implementations</title>
      <link>https://abulka.github.io/blog/2005/03/05/swapping-implementations/</link>
      <pubDate>Sat, 05 Mar 2005 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2005/03/05/swapping-implementations/</guid>
      <description>This is an exploration of how to swap implementations of objects within our software architectures using patterns like the Interface, Factory, Strategy, Proxy, Adapter, and finally to the full blown Bridge Design Pattern. This article was formerly known as The &amp;ldquo;Road to the Bridge&amp;rdquo; and as &amp;ldquo;Strategy to Bridge&amp;rdquo;&#xA;The problem We want to be flexible in our architecture. We want to be able to swap implementations of objects/classes easily e.</description>
    </item>
    <item>
      <title>Blackboard Pattern</title>
      <link>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</link>
      <pubDate>Thu, 05 Aug 2004 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</guid>
      <description>Blackboard Architectural Pattern The Blackboard Architectural Pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialised sub-systems assemble their knowledge to build a possibly partial or approximate solution.&#xA;See the paper by D. Deugo, M. Weiss and E. Kendall.&#xA;Andy&amp;rsquo;s Presentation Blackboard Pattern Slides by Andy&#xA;Example Code This is a pattern that is difficult to do an example for because you would normally have to set up a large infrastructure of classes etc.</description>
    </item>
    <item>
      <title>Null Object Pattern</title>
      <link>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</link>
      <pubDate>Fri, 04 Oct 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</guid>
      <description>Null Object Design Pattern Sometimes I make the joke that design patterns are all about getting rid of if-else statements from your code. The null object pattern is an example of a pattern that does just that - check out the code at the bottom for details.&#xA;What is it? A Null Object provides a surrogate for another object that shares the same interface, but does nothing.&#xA;This pattern was originally written up by Bobby Wolf, in Pattern Languages of Program Design 3.</description>
    </item>
    <item>
      <title>Using Design Patterns in Real Projects</title>
      <link>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</link>
      <pubDate>Wed, 04 Sep 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</guid>
      <description>What is it like to use design pattern in real life programming?&#xA;Do the sometimes academic patterns translate into the real world?&#xA;The answer is yes. I will back this up with three examples of where I have used patterns in real world projects.&#xA;Scroll down through the slides above&#xA;-Andy Bulka</description>
    </item>
    <item>
      <title>Patterns, ModelMaker &amp; Beyond</title>
      <link>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</link>
      <pubDate>Tue, 04 Jan 2000 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</guid>
      <description>How can IDE visualisation features be further enhaced by UML and Design Patterns to assist developers. It discusses using the revolutionary UML tool ModelMaker (now discontinued) in conjuntion with Delphi.&#xA;ModelMaker allowed you to apply patterns onto your code using a UI&#xA;This is a talk I gave at the time that I was into Delphi programming. Presented to the Australian Delphi User Group in December 1999.&#xA;Engineers use models Engineers produce plans before building bridges Electrical engineers have a language of electrical symbols Architects have blueprints What do software engineers / programmer for a modelling tool?</description>
    </item>
    <item>
      <title></title>
      <link>https://abulka.github.io/blog/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/1/01/01/</guid>
      <description>Class Relationships: DEPRECATED Class Relationships: Describes relationships between classes and interfaces, including optional relationship annotation (uses, contains, owns, etc.) and optional cardinality (e.g., 1, 1..*, 0..1). Single or multiple relationships. If one relationship, use Class1 --&amp;gt; Class2 (relationship). For multiple relationships, indent the relationships under the class. Nested relationships are indented further. Whilst you can show relationships between classes in the Classes: section, this section is for summarizing all the relationships in one place, and is needed if you want to show nested class relationships e.</description>
    </item>
  </channel>
</rss>
