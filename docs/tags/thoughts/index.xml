<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thoughts on Andy Bulka</title>
    <link>https://abulka.github.io/tags/thoughts/</link>
    <description>Recent content in Thoughts on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Mar 2022 13:25:22 +1100</lastBuildDate>
    <atom:link href="https://abulka.github.io/tags/thoughts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Literate Code Mapping</title>
      <link>https://abulka.github.io/projects/big-ideas/lcodemaps/</link>
      <pubDate>Mon, 23 Nov 2020 12:43:14 +1100</pubDate>
      <guid>https://abulka.github.io/projects/big-ideas/lcodemaps/</guid>
      <description>Diagramming Methodology Specification&#xA;Literate Code Maps are diagrams which help programmers understand the structure and behaviour of source code.&#xA;Example Code Map diagrams differ from UML diagrams in that they focus on real source code fragments and lots of rich-text formatted story-telling narrative. They combine class and sequence diagrams into the same diagram, offering step by step numbering to follow the behaviour of a use case story.&#xA;The 5 laws of literate code mapping Boxes represent any scope or namespace - be creative Show structure and behaviour in the same diagram Code compartments in boxes contain code fragments and richly formatted narrative Lines representing function calls between boxes are numbered to tell a story Cross reference numbers can appear anywhere to associate ideas Think of literate code maps like UML class diagrams where the classes are now boxes which can represent more things, and lines represent function calls as well as structure.</description>
    </item>
    <item>
      <title>Central Patterns Repository</title>
      <link>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</link>
      <pubDate>Thu, 12 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</guid>
      <description>Towards a central repository of Design Patterns&#xA;An authoritative central repository of Design Patterns does not exist. There is a book called The Pattern Almanac 2000 by Linda Rising however this is no more than an index of patterns - nothing of substance except a one line descrtipion. And furthermore, it leaves out hundreds if not thousands of patterns - scattered across books, websites and people&amp;rsquo;s code. 2020 Update: Central repositories on the internet are now commonplace.</description>
    </item>
    <item>
      <title>Visualising Software</title>
      <link>https://abulka.github.io/blog/2009/01/22/visualising-software/</link>
      <pubDate>Thu, 22 Jan 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/01/22/visualising-software/</guid>
      <description>Ways of Visualising Software Designs&#xA;This blog article explores the novel ways of developing software more visually and in visualising software generally - that is without coding. It also explores ways of visualising software designs and of watching software execute. Visual Programming and Executable UML are the closest terms that describe this area.&#xA;Some of these projects have failed and others continue to thrive (e.g. Scratch). As of 2020 the new big thing in this area is low code and no-code.</description>
    </item>
    <item>
      <title>Thoughts on Closures</title>
      <link>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</link>
      <pubDate>Mon, 05 Nov 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</guid>
      <description>Thoughts on Closures It seems like closures are all the rage in software development circles. Ruby and Groovy have them and then C# got them. Python had a form of them but are they really closures? What are closures anyway - do we need them?&#xA;In this presentation I argue that anything you can do with closures you can do without closures. Often not as elegantly, but often just as clearly.</description>
    </item>
    <item>
      <title>Teaching 23 Patterns</title>
      <link>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</link>
      <pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</guid>
      <description>Teaching 23 patterns in 3 days I have been running a design patterns course for several years where I teach 23 design pattern patterns in 3 days. I cover all the GOF (Gang of Four) patterns plus more. Here are some tales from the front lines!&#xA;History Having attended Melbourne Patterns Group meetings for quite a few years (what wonderful discussions we have there!), and having written up three design patterns of my own, I decided to teach a design patterns course and offer it commercially.</description>
    </item>
    <item>
      <title>Using Design Patterns in Real Projects</title>
      <link>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</link>
      <pubDate>Wed, 04 Sep 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</guid>
      <description>What is it like to use design pattern in real life programming?&#xA;Do the sometimes academic patterns translate into the real world?&#xA;The answer is yes. I will back this up with three examples of where I have used patterns in real world projects.&#xA;Scroll down through the slides above&#xA;-Andy Bulka</description>
    </item>
    <item>
      <title>Design Pattern Automation</title>
      <link>https://abulka.github.io/patterns/design-pattern-automation/</link>
      <pubDate>Fri, 04 Jan 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/design-pattern-automation/</guid>
      <description>Introduction As design patterns become more mainstream, various IDE&amp;rsquo;s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you.</description>
    </item>
    <item>
      <title>Patterns, ModelMaker &amp; Beyond</title>
      <link>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</link>
      <pubDate>Tue, 04 Jan 2000 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</guid>
      <description>How can IDE visualisation features be further enhaced by UML and Design Patterns to assist developers. It discusses using the revolutionary UML tool ModelMaker (now discontinued) in conjuntion with Delphi.&#xA;ModelMaker allowed you to apply patterns onto your code using a UI&#xA;This is a talk I gave at the time that I was into Delphi programming. Presented to the Australian Delphi User Group in December 1999.&#xA;Engineers use models Engineers produce plans before building bridges Electrical engineers have a language of electrical symbols Architects have blueprints What do software engineers / programmer for a modelling tool?</description>
    </item>
    <item>
      <title>Appendix: Musings on Design Patterns</title>
      <link>https://abulka.github.io/patterns/musings-on-patterns/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      <guid>https://abulka.github.io/patterns/musings-on-patterns/</guid>
      <description>Capturing hard-won software design experience in the form of design patterns and architectural patterns is a noble cause that everyone can contribute to.&#xA;You can contribute by writing patterns and maybe even coming to a Plop patterns conference.&#xA;Basically when you see a software development technique a few times, and see that it isn&amp;rsquo;t yet documented - write it up in Pattern format and give it a name!&#xA;A pattern is more than just a &amp;ldquo;tip&amp;rdquo; or technique though - a pattern represents an abstract idea - that can be implemented in various ways depending on your circumstances.</description>
    </item>
  </channel>
</rss>
