<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WxPython on Andy Bulka</title>
    <link>https://abulka.github.io/tags/wxpython/</link>
    <description>Recent content in WxPython on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Mar 2022 13:25:22 +1100</lastBuildDate>
    <atom:link href="https://abulka.github.io/tags/wxpython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting wxPython apps into the Ubuntu app store</title>
      <link>https://abulka.github.io/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/</guid>
      <description>Have you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.&#xA;I wanted to get my UML tool for Python, Pynsource, into the Ubuntu/Snapcraft app store for a long time. This is the story of how I made that happen.&#xA;It certainly wasn’t easy. It took me a week of work, struggling with the concepts, documentation and various bugs in the tooling to finally get my app listed.</description>
    </item>
    <item>
      <title>Async/await for wxPython</title>
      <link>https://abulka.github.io/blog/2019/03/02/async/await-for-wxpython/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/03/02/async/await-for-wxpython/</guid>
      <description>How to build Python 3 GUI apps with asynchronous functionality.&#xA;Python 3’s support of async/await is the new hotness, allowing cooperative computation with reduced complexity and without needing threads — as long as you use async compatible libraries like aiohttp etc. You can’t use the famous requests library because it is not async aware and will block, but not to worry, those other libraries have you covered.&#xA;See full article on Medium here.</description>
    </item>
    <item>
      <title>Refactoring to PureMVC</title>
      <link>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</guid>
      <description>Let&amp;rsquo;s look at how to refactor an existing architecture to the PureMVC architecture. Your application requires that you display &amp;lsquo;model&amp;rsquo; data in some sort of UI &amp;lsquo;view&amp;rsquo;.&#xA;Introduction MVC Architectural Pattern I have long been fascinated by the MVC (Model View Controller) architectural pattern, first conceived in the 1960&amp;rsquo;s. What it promises, to those who can fathom its mysteries, is an orderly way of organising your application architecture. You define a de-coupled domain/business model that is oblivious to any GUI that might be displaying it.</description>
    </item>
    <item>
      <title>PureMVC</title>
      <link>https://abulka.github.io/blog/2009/03/01/puremvc/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/03/01/puremvc/</guid>
      <description>PureMVC - Architectural Pattern incl. a minimal wxPython example.&#xA;Understanding PureMVC can be hard, even though it is a relatively simple framework. That&amp;rsquo;s why a minimal example can help. Here is one I created for wxPython and Python users. This will run fine on windows, mac and linux. Install the PureMVC python port and wxPython (which is already present on Mac 10.5) and you should be able to run it.</description>
    </item>
  </channel>
</rss>
