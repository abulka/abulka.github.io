<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Andy Bulka</title>
    <link>https://abulka.github.io/tags/python/</link>
    <description>Recent content in Python on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Jan 2023 12:43:03 +1100</lastBuildDate>
    <atom:link href="https://abulka.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Websites</title>
      <link>https://abulka.github.io/projects/websites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/</guid>
      <description>Being an application software developer, I made the transition to building web applications. Here are some of them.&#xA;Website Description Technology GitUML UML visualisation for Git repositories Python, Django, Javascript Python to RPN Python to RPN converter Python, Flask, Javascript RPN Calculators Online RPN calculators programmable in Javascript Javascript, HTML, CSS Toolback - App Builder An online programming environment, with low code features. Python, Javascript Chord Jammer A midi web app that lets you play chords with 1 finger in the left hand and jam safely in the right hand.</description>
    </item>
    <item>
      <title>Pynsource</title>
      <link>https://abulka.github.io/projects/apps/pynsource/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/apps/pynsource/</guid>
      <description>Visit pynsource.com.&#xA;Pynsource is a UML tool for Python a desktop App for Mac, Window and Linux.&#xA;Pynsource imports Python code and features zoom, Ascii and PlantUML views and Auto Layout&#xA;Community Edition is free, fully functional and open source - check out the Pynsource GitHub repository.&#xA;Buy the Pro Edition for $20 to unlock the zoom feature and other pro features.&#xA;Visit the Pynsource Home Page</description>
    </item>
    <item>
      <title>Python to RPN</title>
      <link>https://abulka.github.io/projects/websites/pyrpn/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/pyrpn/</guid>
      <description>A Python to HP42S RPN converter website www.pyrpn.atug.com Allows you to program your old vintage HP Calculator in Python!&#xA;See also my blog post How I used the Python AST capabilities to build a Python to Rpn converter.&#xA;You write code in a high level structured language (which happens to be Python 3 syntax), hit a button and RPN is generated. You then paste the RPN into Free42 or transfer it to your DM42 (by creating a raw) - and it runs.</description>
    </item>
    <item>
      <title>GUI Showdown</title>
      <link>https://abulka.github.io/blog/2022/02/11/gui-showdown/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2022/02/11/gui-showdown/</guid>
      <description>Andy&amp;rsquo;s GUI Showdown - The same application, implemented in various ways - which is better, cleaner, more understandable etc?&#xA;Like the TodoMVC &amp;ldquo;Rosetta Stone&amp;rdquo; project, but uses a different example application, and includes Python as well as Javascript implementations.&#xA;This project was originally intended to see if an ECS (Entity Component System), which is commonly used in building games, could be used to implement a &amp;ldquo;normal&amp;rdquo; GUI application.&#xA;Five Javascript implementations: Live Demo of all Javascript implementations.</description>
    </item>
    <item>
      <title>Relationship Manager - Design Pattern</title>
      <link>https://abulka.github.io/patterns/relationship-manager/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/relationship-manager/</guid>
      <description>Abstract Basically describes a lightweight, in-memory Object Database.&#xA;Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional &amp;ldquo;pointer&amp;rdquo; and &amp;ldquo;arraylist&amp;rdquo; techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved, especially when back-pointers are involved.</description>
    </item>
    <item>
      <title>Django View logging is back-the-front</title>
      <link>https://abulka.github.io/blog/2019/09/04/django-view-logging-is-back-the-front/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/09/04/django-view-logging-is-back-the-front/</guid>
      <description>Have you ever looked through your Django log files and console messages, felt something was out of order and didn’t make sense, but couldn’t quite put your finger on it?&#xA;Here is an example of what I mean. Here is some view code:&#xA;def diagramz_list(request, template_name=&amp;#34;list.html&amp;#34;): log.info(&amp;#34;diagramz_list has been called&amp;#34;) ... return render(request, template_name, {&amp;#34;object_list&amp;#34;: diagrams}) that gets routed via url(r”^listz$”, views.diagramz_list, name=”listall”).&#xA;Let’s look at the log file and console messages that get generated when you do the usual python manage.</description>
    </item>
    <item>
      <title>Getting wxPython apps into the Ubuntu app store</title>
      <link>https://abulka.github.io/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/</guid>
      <description>Have you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.&#xA;I wanted to get my UML tool for Python, Pynsource, into the Ubuntu/Snapcraft app store for a long time. This is the story of how I made that happen.&#xA;It certainly wasn’t easy. It took me a week of work, struggling with the concepts, documentation and various bugs in the tooling to finally get my app listed.</description>
    </item>
    <item>
      <title>Async/await for wxPython</title>
      <link>https://abulka.github.io/blog/2019/03/02/async/await-for-wxpython/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2019/03/02/async/await-for-wxpython/</guid>
      <description>How to build Python 3 GUI apps with asynchronous functionality.&#xA;Python 3’s support of async/await is the new hotness, allowing cooperative computation with reduced complexity and without needing threads — as long as you use async compatible libraries like aiohttp etc. You can’t use the famous requests library because it is not async aware and will block, but not to worry, those other libraries have you covered.&#xA;See full article on Medium here.</description>
    </item>
    <item>
      <title>Building a Python-Electron App</title>
      <link>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</guid>
      <description>Building a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps — which I propose to outline here.&#xA;See full article on Medium here.</description>
    </item>
    <item>
      <title>Python AST Parsing</title>
      <link>https://abulka.github.io/blog/2018/06/01/python-ast-parsing/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/06/01/python-ast-parsing/</guid>
      <description>How I used the Python AST capabilities to build the Python to Rpn converter.&#xA;Python compilation pipeline My program works at the AST stage of the compilation pipeline:&#xA;Specifically my approach has been to use Python&amp;rsquo;s built in ability to parse itself into an AST Abstract Syntax Tree, then to traverse this tree using the visitor design pattern to generate the RPN.&#xA;The Python AST parser is built into Python and thus requires that you be running Python to use it.</description>
    </item>
    <item>
      <title>Ruby vs Python list comprehensions</title>
      <link>https://abulka.github.io/blog/2010/11/18/ruby-vs-python-list-comprehensions/</link>
      <pubDate>Thu, 18 Nov 2010 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2010/11/18/ruby-vs-python-list-comprehensions/</guid>
      <description>Let&amp;rsquo;s compare Python list comprehensions vs. the way Ruby achieves the same thing thing.&#xA;Intent: Loop through a list of numbers and pick out the ones greater than 5, and multiply them by 100. Return them as a list.&#xA;Python #!/usr/bin/env python # Long explicit way: result = [] for n in range(1,8): if n &amp;gt; 5: result.append(n*100) print result # result [600, 700] # Concise way: print [n*100 for n in [1,2,3,4,5,6,7] if n &amp;gt; 5] # result [600, 700] Ruby #!</description>
    </item>
    <item>
      <title>Refactoring to PureMVC</title>
      <link>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</guid>
      <description>Let&amp;rsquo;s look at how to refactor an existing architecture to the PureMVC architecture. Your application requires that you display &amp;lsquo;model&amp;rsquo; data in some sort of UI &amp;lsquo;view&amp;rsquo;.&#xA;Introduction MVC Architectural Pattern I have long been fascinated by the MVC (Model View Controller) architectural pattern, first conceived in the 1960&amp;rsquo;s. What it promises, to those who can fathom its mysteries, is an orderly way of organising your application architecture. You define a de-coupled domain/business model that is oblivious to any GUI that might be displaying it.</description>
    </item>
    <item>
      <title>PureMVC</title>
      <link>https://abulka.github.io/blog/2009/03/01/puremvc/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/03/01/puremvc/</guid>
      <description>PureMVC - Architectural Pattern incl. a minimal wxPython example.&#xA;Understanding PureMVC can be hard, even though it is a relatively simple framework. That&amp;rsquo;s why a minimal example can help. Here is one I created for wxPython and Python users. This will run fine on windows, mac and linux. Install the PureMVC python port and wxPython (which is already present on Mac 10.5) and you should be able to run it.</description>
    </item>
    <item>
      <title>Extract Composite Refactoring</title>
      <link>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</link>
      <pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</guid>
      <description>Extract Composite - Refactoring to a Pattern Refactoring existing code so that it improves and conforms to a design pattern can be a good thing. Your code will be easier to understand since it follows a known &amp;lsquo;pattern&amp;rsquo;. Of course you have to need the change - your code will probably be uncomfortable to read and be crying out for clarification.&#xA;This refactoring is about implementing a one to many relationship in your code more clearly by refactoring to the Composite design pattern.</description>
    </item>
    <item>
      <title>Thoughts on Closures</title>
      <link>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</link>
      <pubDate>Mon, 05 Nov 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</guid>
      <description>Thoughts on Closures It seems like closures are all the rage in software development circles. Ruby and Groovy have them and then C# got them. Python had a form of them but are they really closures? What are closures anyway - do we need them?&#xA;In this presentation I argue that anything you can do with closures you can do without closures. Often not as elegantly, but often just as clearly.</description>
    </item>
    <item>
      <title>ORM Pattern</title>
      <link>https://abulka.github.io/blog/2005/07/01/orm-pattern/</link>
      <pubDate>Fri, 01 Jul 2005 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2005/07/01/orm-pattern/</guid>
      <description>Relational databases and OO memory models use different paradigms. Mapping between one and the other is often necessary but usually ends up being fiddly unless an auto-mapping ORM tool is used.&#xA;How an ORM works Let&amp;rsquo;s face it - a lot of developers prefer to just code classes - that&amp;rsquo;s what OO is all about. Having then to persist those classes into tables creates all sorts of fiddly mapping code. If you don&amp;rsquo;t need to persist into tables - fine.</description>
    </item>
    <item>
      <title>Blackboard Pattern</title>
      <link>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</link>
      <pubDate>Thu, 05 Aug 2004 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</guid>
      <description>Blackboard Architectural Pattern The Blackboard Architectural Pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialised sub-systems assemble their knowledge to build a possibly partial or approximate solution.&#xA;See the paper by D. Deugo, M. Weiss and E. Kendall.&#xA;Andy&amp;rsquo;s Presentation Blackboard Pattern Slides by Andy&#xA;Example Code This is a pattern that is difficult to do an example for because you would normally have to set up a large infrastructure of classes etc.</description>
    </item>
    <item>
      <title>Null Object Pattern</title>
      <link>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</link>
      <pubDate>Fri, 04 Oct 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</guid>
      <description>Null Object Design Pattern Sometimes I make the joke that design patterns are all about getting rid of if-else statements from your code. The null object pattern is an example of a pattern that does just that - check out the code at the bottom for details.&#xA;What is it? A Null Object provides a surrogate for another object that shares the same interface, but does nothing.&#xA;This pattern was originally written up by Bobby Wolf, in Pattern Languages of Program Design 3.</description>
    </item>
  </channel>
</rss>
