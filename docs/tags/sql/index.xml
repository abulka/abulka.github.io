<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Andy Bulka</title>
    <link>https://abulka.github.io/tags/sql/</link>
    <description>Recent content in SQL on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Mar 2022 13:25:22 +1100</lastBuildDate>
    <atom:link href="https://abulka.github.io/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Relationship Manager - Design Pattern</title>
      <link>https://abulka.github.io/patterns/relationship-manager/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/relationship-manager/</guid>
      <description>Abstract Basically describes a lightweight, in-memory Object Database.&#xA;Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional &amp;ldquo;pointer&amp;rdquo; and &amp;ldquo;arraylist&amp;rdquo; techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved, especially when back-pointers are involved.</description>
    </item>
    <item>
      <title>ORM Pattern</title>
      <link>https://abulka.github.io/blog/2005/07/01/orm-pattern/</link>
      <pubDate>Fri, 01 Jul 2005 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2005/07/01/orm-pattern/</guid>
      <description>Relational databases and OO memory models use different paradigms. Mapping between one and the other is often necessary but usually ends up being fiddly unless an auto-mapping ORM tool is used.&#xA;How an ORM works Let&amp;rsquo;s face it - a lot of developers prefer to just code classes - that&amp;rsquo;s what OO is all about. Having then to persist those classes into tables creates all sorts of fiddly mapping code. If you don&amp;rsquo;t need to persist into tables - fine.</description>
    </item>
  </channel>
</rss>
