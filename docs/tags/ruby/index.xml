<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Andy Bulka</title>
    <link>https://abulka.github.io/tags/ruby/</link>
    <description>Recent content in Ruby on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Mar 2022 13:25:22 +1100</lastBuildDate>
    <atom:link href="https://abulka.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocking in Ruby</title>
      <link>https://abulka.github.io/blog/2011/03/19/mocking-in-ruby/</link>
      <pubDate>Sat, 19 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/03/19/mocking-in-ruby/</guid>
      <description>Easy Dependency Injection and Mocking in Ruby&#xA;Here is a simple technique where you can inject mock methods into a class that you are unit testing.&#xA;Given you have a class ClassA&#xA;class ClassA def hi &amp;#34;hi&amp;#34; end end Using .class_eval You can replace the &amp;ldquo;hi&amp;rdquo; method from your unit test, without editing the source code of ClassA at all. You can inject mock methods - whatever.&#xA;def test_2 ClassA.class_eval do # injecting into ClassA class def hi &amp;#34;hello&amp;#34; end end a = ClassA.</description>
    </item>
    <item>
      <title>Cloning Directories in Ruby</title>
      <link>https://abulka.github.io/blog/2011/03/01/cloning-directories-in-ruby/</link>
      <pubDate>Tue, 01 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/03/01/cloning-directories-in-ruby/</guid>
      <description>Recursively Cloning Directories in Ruby using Hard Links&#xA;Hard links exist under windows 7 so you can clone huge directories or files without taking up any extra disk space. Both the original and the copy are equal and apps can&amp;rsquo;t tell the difference between them - because we are using true hard links (not shortcuts or symbolic links).&#xA;Built in Windows Command The dos command for cloning a file is simply</description>
    </item>
    <item>
      <title>Ruby vs Python list comprehensions</title>
      <link>https://abulka.github.io/blog/2010/11/18/ruby-vs-python-list-comprehensions/</link>
      <pubDate>Thu, 18 Nov 2010 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2010/11/18/ruby-vs-python-list-comprehensions/</guid>
      <description>Let&amp;rsquo;s compare Python list comprehensions vs. the way Ruby achieves the same thing thing.&#xA;Intent: Loop through a list of numbers and pick out the ones greater than 5, and multiply them by 100. Return them as a list.&#xA;Python #!/usr/bin/env python # Long explicit way: result = [] for n in range(1,8): if n &amp;gt; 5: result.append(n*100) print result # result [600, 700] # Concise way: print [n*100 for n in [1,2,3,4,5,6,7] if n &amp;gt; 5] # result [600, 700] Ruby #!</description>
    </item>
    <item>
      <title>Thoughts on Closures</title>
      <link>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</link>
      <pubDate>Mon, 05 Nov 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/11/05/thoughts-on-closures/</guid>
      <description>Thoughts on Closures It seems like closures are all the rage in software development circles. Ruby and Groovy have them and then C# got them. Python had a form of them but are they really closures? What are closures anyway - do we need them?&#xA;In this presentation I argue that anything you can do with closures you can do without closures. Often not as elegantly, but often just as clearly.</description>
    </item>
  </channel>
</rss>
