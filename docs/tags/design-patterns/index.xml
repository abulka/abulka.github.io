<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on Andy Bulka</title>
    <link>https://abulka.github.io/tags/design-patterns/</link>
    <description>Recent content in Design Patterns on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Nov 2024 22:55:28 +1100</lastBuildDate>
    <atom:link href="https://abulka.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HexMVC</title>
      <link>https://abulka.github.io/patterns/hexmvc/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc/</guid>
      <description>Andy Bulka,&#xA;March 2012&#xA;A new, architectural pattern for building multi-platform, scalable applications based on ideas from the Hexagonal Architecture pattern + Model View Controller (MVC).&#xA;TLDR: Write the application layer but don&amp;rsquo;t import or use any libraries directly. Wrap all &amp;ldquo;library&amp;rdquo; calls with Adapter objects, so that you can switch to other libraries easily.&#xA;TLDR: &amp;ldquo;Libraries&amp;rdquo; can amazingly, include the application data Model itself, Database and persistence layers, the entire GUI and all calls to server APIs.</description>
    </item>
    <item>
      <title>GUI Showdown</title>
      <link>https://abulka.github.io/blog/2022/02/11/gui-showdown/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2022/02/11/gui-showdown/</guid>
      <description>Andy&amp;rsquo;s GUI Showdown - The same application, implemented in various ways - which is better, cleaner, more understandable etc?&#xA;Like the TodoMVC &amp;ldquo;Rosetta Stone&amp;rdquo; project, but uses a different example application, and includes Python as well as Javascript implementations.&#xA;This project was originally intended to see if an ECS (Entity Component System), which is commonly used in building games, could be used to implement a &amp;ldquo;normal&amp;rdquo; GUI application.&#xA;Five Javascript implementations: Live Demo of all Javascript implementations.</description>
    </item>
    <item>
      <title>Relationship Manager - Design Pattern</title>
      <link>https://abulka.github.io/patterns/relationship-manager/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/relationship-manager/</guid>
      <description>Abstract Basically describes a lightweight, in-memory Object Database.&#xA;Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional &amp;ldquo;pointer&amp;rdquo; and &amp;ldquo;arraylist&amp;rdquo; techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved, especially when back-pointers are involved.</description>
    </item>
    <item>
      <title>MGM Pattern</title>
      <link>https://abulka.github.io/patterns/mgm-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/mgm-pattern/</guid>
      <description>Introduction This article is twenty years old - its ideas are now simplified and clarified at MVCA pattern&#xA;A live demo running in a browser.&#xA;Tip for understanding this article: This is arguably the traditional MVC pattern with terminology tweaked and clarified, and updated for &amp;lsquo;modern&amp;rsquo; times where Views are no longer manually drawn but are instead off the shelf GUI widgets or DOM elements.&#xA;Mediator == Controller GUI == View The Pattern Download as pdf.</description>
    </item>
    <item>
      <title>MVC-App Architectural Pattern</title>
      <link>https://abulka.github.io/patterns/mvca-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/mvca-pattern/</guid>
      <description>Introduction This article describes the &amp;ldquo;MVC-App Architectural Pattern&amp;rdquo; which you can use to design your software applications, when you need to support a GUI. It is not a framework, it is a small set of principles which let you build sane, modular GUIs in any language, using any off the shelf UI components.&#xA;For the original, deprecated, MGM pattern which initially inspired this &amp;ldquo;MVC-App Pattern&amp;rdquo; pattern, see MGM pattern&#xA;TodoMVC-OO This is the classic Javascript TodoMVC app implemented without a framework ðŸ˜„, simply using plain Object Oriented programming + a traditional MVC design pattern.</description>
    </item>
    <item>
      <title>Transformation Interface Design Pattern</title>
      <link>https://abulka.github.io/patterns/transformation-interface/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/transformation-interface/</guid>
      <description>Introduction The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back again. A pair of methods on some class e.g. load/save are often the signature of a Transformation Interface.&#xA;Simple Summary Let me summarize the core idea in a simple way:&#xA;The fundamental insight of this pattern is elegantly simple: whenever you need to move data between two different representations, create a matched pair of transformation methods that:</description>
    </item>
    <item>
      <title>Refactoring to PureMVC</title>
      <link>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</guid>
      <description>Let&amp;rsquo;s look at how to refactor an existing architecture to the PureMVC architecture. Your application requires that you display &amp;lsquo;model&amp;rsquo; data in some sort of UI &amp;lsquo;view&amp;rsquo;.&#xA;Introduction MVC Architectural Pattern I have long been fascinated by the MVC (Model View Controller) architectural pattern, first conceived in the 1960&amp;rsquo;s. What it promises, to those who can fathom its mysteries, is an orderly way of organising your application architecture. You define a de-coupled domain/business model that is oblivious to any GUI that might be displaying it.</description>
    </item>
    <item>
      <title>PureMVC</title>
      <link>https://abulka.github.io/blog/2009/03/01/puremvc/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/03/01/puremvc/</guid>
      <description>PureMVC - Architectural Pattern incl. a minimal wxPython example.&#xA;Understanding PureMVC can be hard, even though it is a relatively simple framework.Â That&amp;rsquo;s why a minimal example can help.Â Here is one I created for wxPython and Python users.Â This will run fine on windows, mac and linux.Â Install the PureMVC python port and wxPython (which is already present on Mac 10.5) and you should be able to run it.</description>
    </item>
    <item>
      <title>Central Patterns Repository</title>
      <link>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</link>
      <pubDate>Thu, 12 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</guid>
      <description>Towards a central repository of Design Patterns&#xA;An authoritativeÂ central repository of Design Patterns does not exist.Â There is a book called The Pattern Almanac 2000 by Linda Rising however this is no more than an index of patterns - nothing of substance except a one line descrtipion.Â And furthermore, it leaves out hundreds if not thousands of patterns - scattered across books, websites and people&amp;rsquo;s code.Â 2020 Update: Central repositories on the internet are now commonplace.</description>
    </item>
    <item>
      <title>Netbeans Uml</title>
      <link>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</link>
      <pubDate>Wed, 11 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</guid>
      <description>Let&amp;rsquo;s take a look at the UML and design pattern support in Netbeans and investigate Netbean&amp;rsquo;s cool ability to build &amp;ldquo;custom&amp;rdquo; design patterns - visually.&#xA;Introduction UML and Design Pattern Support in Netbeans 6.5&#xA;Netbeans is an opensource IDE from Sun and importantly Netbeans offers a wonderful GUI form designer plus UML facilities, which Eclipse doesn&amp;rsquo;t come bundled with out of the box.&#xA;Unfortunately the UML support described in this article has been removed from later versions of Netbeans.</description>
    </item>
    <item>
      <title>State Pattern in Flex</title>
      <link>https://abulka.github.io/blog/2008/09/11/state-pattern-in-flex/</link>
      <pubDate>Thu, 11 Sep 2008 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2008/09/11/state-pattern-in-flex/</guid>
      <description>A tutorial on how to implement the State design pattern in Flex 3.Â We are going to have a traffic light move through several states (red, orange, green).Â Of course there are other states the traffic light might be in, as well as transitional states (green and orange at the same time), but lets keep things simple!&#xA;Note Flex and Flash are discontinued technologies. You can still run .swf files locally on your computer using these instructions.</description>
    </item>
    <item>
      <title>Extract Composite Refactoring</title>
      <link>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</link>
      <pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</guid>
      <description>Extract Composite - Refactoring to a Pattern Refactoring existing code so that it improves and conforms to a design pattern can be a good thing.Â Your code will be easier to understand since it follows a known &amp;lsquo;pattern&amp;rsquo;.Â Of course you have to need the change - your code will probably be uncomfortable to read and be crying out for clarification.&#xA;This refactoring is about implementing a one to many relationship in your code more clearly by refactoring to the Composite design pattern.</description>
    </item>
    <item>
      <title>Teaching 23 Patterns</title>
      <link>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</link>
      <pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</guid>
      <description>Teaching 23 patterns in 3 days I have been running a design patterns course for several years where I teach 23 design pattern patterns in 3 days.Â I cover all the GOF (Gang of Four) patterns plus more.Â Here are some tales from the front lines!&#xA;History Having attended Melbourne Patterns Group meetings for quite a few years (what wonderful discussions we have there!), and having written up three design patterns of my own, I decided to teach a design patterns course and offer it commercially.</description>
    </item>
    <item>
      <title>Tooled Composite Pattern</title>
      <link>https://abulka.github.io/blog/2006/03/01/tooled-composite-pattern/</link>
      <pubDate>Wed, 01 Mar 2006 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2006/03/01/tooled-composite-pattern/</guid>
      <description>Ever wanted to create a &amp;ldquo;direct manipulation&amp;rdquo; program where you select various tools and manipulate stuff on a workspace?Â These sorts of applications are quite difficult to build due to the many possible combinations of behavior that is needed.Â Every tool must know what to do with each type of object.Â How do we manage this sort of complexity?&#xA;How do you represent shapes? How do you represent tools? How do tools and shapes interact?</description>
    </item>
    <item>
      <title>ORM Pattern</title>
      <link>https://abulka.github.io/blog/2005/07/01/orm-pattern/</link>
      <pubDate>Fri, 01 Jul 2005 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2005/07/01/orm-pattern/</guid>
      <description>Relational databases and OO memory models use different paradigms.Â Mapping between one and the other is often necessary but usually ends up being fiddly unless an auto-mapping ORM tool is used.&#xA;How an ORM works Let&amp;rsquo;s face it - a lot of developers prefer to just code classes - that&amp;rsquo;s what OO is all about.Â Having then to persist those classes into tables creates all sorts of fiddly mapping code.Â If you don&amp;rsquo;t need to persist into tables - fine.</description>
    </item>
    <item>
      <title>Swapping Implementations</title>
      <link>https://abulka.github.io/blog/2005/03/05/swapping-implementations/</link>
      <pubDate>Sat, 05 Mar 2005 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2005/03/05/swapping-implementations/</guid>
      <description>This is an exploration of how to swap implementations of objects within our software architectures using patterns like the Interface, Factory, Strategy, Proxy, Adapter, and finally to the full blown Bridge Design Pattern.Â This article was formerly known as The &amp;ldquo;Road to the Bridge&amp;rdquo; and as &amp;ldquo;Strategy to Bridge&amp;rdquo;&#xA;The problem We want to be flexible in our architecture.Â We want to be able to swap implementations of objects/classes easily e.</description>
    </item>
    <item>
      <title>Blackboard Pattern</title>
      <link>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</link>
      <pubDate>Thu, 05 Aug 2004 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</guid>
      <description>Blackboard Architectural Pattern The Blackboard Architectural Pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialised sub-systems assemble their knowledge to build a possibly partial or approximate solution.&#xA;See the paper by D. Deugo, M. Weiss and E. Kendall.&#xA;Andy&amp;rsquo;s Presentation Blackboard Pattern Slides by Andy&#xA;Example Code This is a pattern that is difficult to do an example for because you would normally have to set up a large infrastructure of classes etc.</description>
    </item>
    <item>
      <title>Null Object Pattern</title>
      <link>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</link>
      <pubDate>Fri, 04 Oct 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</guid>
      <description>Null Object Design Pattern Sometimes I make the joke that design patterns are all about getting rid of if-else statements from your code. The null object pattern is an example of a pattern that does just that - check out the code at the bottom for details.&#xA;What is it? A Null Object provides a surrogate for another object that shares the same interface, but does nothing.&#xA;This pattern was originally written up by Bobby Wolf, in Pattern Languages of Program Design 3.</description>
    </item>
    <item>
      <title>Using Design Patterns in Real Projects</title>
      <link>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</link>
      <pubDate>Wed, 04 Sep 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</guid>
      <description>What is it like to use design pattern in real life programming?&#xA;Do the sometimes academic patterns translate into the real world?&#xA;The answer is yes. I will back this up with three examples of where I have used patterns in real world projects.&#xA;Scroll down through the slides above&#xA;-Andy Bulka</description>
    </item>
    <item>
      <title>Design Pattern Automation</title>
      <link>https://abulka.github.io/patterns/design-pattern-automation/</link>
      <pubDate>Fri, 04 Jan 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/design-pattern-automation/</guid>
      <description>Introduction As design patterns become more mainstream, various IDE&amp;rsquo;s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you.</description>
    </item>
    <item>
      <title>Patterns, ModelMaker &amp; Beyond</title>
      <link>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</link>
      <pubDate>Tue, 04 Jan 2000 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</guid>
      <description>How can IDE visualisation features be further enhaced by UML and Design Patterns to assist developers. It discusses using the revolutionary UML tool ModelMaker (now discontinued) in conjuntion with Delphi.&#xA;ModelMaker allowed you to apply patterns onto your code using a UI&#xA;This is a talk I gave at the time that I was into Delphi programming.Â Presented to the Australian Delphi User Group in December 1999.&#xA;Engineers use models Engineers produce plans before building bridges Electrical engineers have a language of electrical symbols Architects have blueprints What do software engineers / programmer for a modelling tool?</description>
    </item>
    <item>
      <title>Appendix: Musings on Design Patterns</title>
      <link>https://abulka.github.io/patterns/musings-on-patterns/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      <guid>https://abulka.github.io/patterns/musings-on-patterns/</guid>
      <description>Capturing hard-won software design experience in the form of design patterns and architectural patterns is a noble cause that everyone can contribute to.&#xA;You can contribute by writing patterns and maybe even coming to a Plop patterns conference.&#xA;Basically when you see a software development technique a few times, and see that it isn&amp;rsquo;t yet documented - write it up in Pattern format and give it a name!&#xA;A pattern is more than just a &amp;ldquo;tip&amp;rdquo; or technique though - a pattern represents an abstract idea - that can be implemented in various ways depending on your circumstances.</description>
    </item>
    <item>
      <title>Appendix: My KoalaPlop Patterns</title>
      <link>https://abulka.github.io/patterns/appendix-koala-plop/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      <guid>https://abulka.github.io/patterns/appendix-koala-plop/</guid>
      <description>Andy&amp;rsquo;s Published Design Patterns The four patterns MGM, RM, TI and Pattern Automation are substantial works which have been presented at KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs) in both 2000 and 2001. My shepherds (paper peer reviewers) were:&#xA;Jim Coplien (MGM pattern) Ali Arsanjani (TI pattern) James Noble (RM pattern). (Design Pattern Automation) was not peer reviewed before being presented and published. These final versions also incorporate comments and reviews from the attendees of KoalaPlop 2000 and 2001.</description>
    </item>
  </channel>
</rss>
