<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy Bulka – Design Patterns</title>
    <link>https://abulka.github.io/tags/design-patterns/</link>
    <description>Recent content in Design Patterns on Andy Bulka</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 12 Feb 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://abulka.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Patterns: HexMVC</title>
      <link>https://abulka.github.io/patterns/hexmvc/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/patterns/hexmvc/</guid>
      <description>
        
        
        &lt;p&gt;Andy Bulka,&lt;br&gt;
March 2012&lt;/p&gt;
&lt;p&gt;A new, architectural pattern for building multi-platform, scalable applications based on ideas from the Hexagonal Architecture pattern + Model View Controller (MVC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; Write the application layer but don&amp;rsquo;t import or use any libraries directly.  Wrap all &amp;ldquo;library&amp;rdquo; calls with Adapter objects, so that you can switch to other libraries easily.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &amp;ldquo;Libraries&amp;rdquo; can amazingly, include the application data Model itself, Database and persistence layers, the entire GUI and all calls to server APIs. Plug and play everything with this architecture!&lt;/p&gt;
&lt;h1 id=&#34;patternsimageshexmvcimage16png&#34;&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image16.png&#34; alt=&#34;&#34;&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a draft article, written in 2012. It could do with some further editing, but I&amp;rsquo;ve never gotten around to it, so finally decided to publish it anyway, in 2022.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;HexMVC - This is my name for an architectural pattern that has arisen out of some long term research into PureMVC and ways to simplify it. Its also an attempt to fix some of the unsatisfactory aspects of traditional layered architectures by incorporating some core ideas out of the mysterious Hexagonal Architecture pattern.  The hexagonal structure allows us to put the model on a more equal footing with other layers - rather than always having the model ‘at the bottom’.  Its a rejection of a complex &amp;rsquo;event&amp;rsquo;-ing framework in favour of multicast delegation based on interfaces. It uses dependency injection to configure apps to use different libraries and frameworks, whilst keeping the core app the same.&lt;/p&gt;
&lt;p&gt;I will present a fully functional example code which can be configured to run under pure python or under .NET using a choice of different GUI libraries (wxpython or windows forms or wpf), different server libraries (bottle or .NET). Everything is switchable using config files. The persistence layer is also switchable and the servers implement REST APIs consistent with the services offered by the core App.&lt;/p&gt;
&lt;p&gt;Note that the example code needs no framework code whatsoever, thus could be considered an architectural pattern - an abstract idea that can be implemented in any language and used in any project.  The pattern lets you develop a core application and swap in &amp;amp; out alternate gui&amp;rsquo;s, persistence and services.  It prescribes how to add app functionality whilst keeping your design clean.&lt;/p&gt;
&lt;h2 id=&#34;example---python&#34;&gt;Example - Python&lt;/h2&gt;
&lt;p&gt;Here is a real configuration Python file which assembles, injects and launches my sample application. The application consists of a GUI, a Server, a model with application logic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; ModelOo &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Model
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; ModelOoAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; ModelOoAdapter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#from PersistenceOoPickle import Persistence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; PersistenceOoHomegrown &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Persistence
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; ServerBottleAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#from ServerMockAdapter import Server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; ViewWxAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; MyWxApp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; UtilRandomStdpythonAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; RandomIntFunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; UtilJsonStdpythonAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; JsonFromDictFunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; App &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; App
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create Model - Object Oriented instances in memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model_oo &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Model()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;persistence &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Persistence()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ModelOoAdapter(model_oo, persistence)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create Server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;server &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Server(host&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, port&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8081&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create Gui&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wxapp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyWxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gui &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wxapp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myframe  &lt;span style=&#34;color:#6272a4&#34;&gt;# gui mediator inherits from gui rather than wrapping it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Hook up Utility adapters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gui&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;random &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RandomIntFunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;server&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;json_from_dict &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JsonFromDictFunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create Core Hexagon App and inject adapters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; App(model, server, gui)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CallAfter(app&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Boot)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Start Gui&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wxapp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop() 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example---javascript&#34;&gt;Example - Javascript&lt;/h2&gt;
&lt;p&gt;Here is a Todo app implementation in Javascript &lt;a href=&#34;https://www.google.com/url?q=http://jsfiddle.net/tcab/mC5qA/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497537306&amp;amp;usg=AOvVaw2IyZvhDC0eV65oxs-1pTn-&#34;&gt;http://jsfiddle.net/tcab/mC5qA/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/javascript-impl-add.png&#34; alt=&#34;javascript-impl-add&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width: 15em&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;plusBtn&amp;#34;&lt;/span&gt;&amp;gt;  +  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;minusBtn&amp;#34;&lt;/span&gt;&amp;gt;  -  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;MODEL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ListModel &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (items) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; items;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListModel.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getItems &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [].concat(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addItem &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (item) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items.push(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    removeItemAt &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items[index];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items.splice(index, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maxindex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items.length &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; maxindex) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.setSelectedIndex(maxindex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getSelectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setSelectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; index;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ListModelAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (model) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListModelAdapter.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getItems &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getItems();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addItem &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (item) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.addItem(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_THING_ADDED&amp;#39;&lt;/span&gt;, {item&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; item});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    removeItemAt &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.removeItemAt(index);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_CHANGED&amp;#39;&lt;/span&gt;, {item&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; item});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getSelectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setSelectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; previousIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.setSelectedIndex(index);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_SELECTION_CHANGED&amp;#39;&lt;/span&gt;, {previous&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; previousIndex});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;VIEW 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ListViewAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (model) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListViewAdapter.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.rebuildList();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rebuildList &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;VIEW REBUILD with index at &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex());            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; list &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#list&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; items &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getItems();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; items) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            list.append($(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;option value=&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; items[key] &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;/option&amp;gt;&amp;#39;&lt;/span&gt;)); 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.updateSelected();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    updateSelected &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;VIEW updateSelected &amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#list&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onAdd &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_ADD_ITEM&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onDelete &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_DELETE_ITEM&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onListSelectionChanged &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_SELECTION_CHANGED&amp;#39;&lt;/span&gt;, e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;CONTROLLER
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ListController &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (model) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListController.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmdAddItem &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Add item:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (item)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.addItem(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmdDelItem &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; index &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;controller delItem &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; index);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (index &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.removeItemAt(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmdUpdateSelected &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CONTROLLER updateSelected &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; e.target.selectedIndex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.setSelectedIndex(e.target.selectedIndex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;Bootstrap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//var model = new ListModel([&amp;#39;aaa&amp;#39;, &amp;#39;bbb&amp;#39;, &amp;#39;ccc&amp;#39;, &amp;#39;ddddd&amp;#39;]);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ListModelAdapter(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ListModel([&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ddddd&amp;#39;&lt;/span&gt;]));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; view &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ListViewAdapter(model);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; controller &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ListController(model);  &lt;span style=&#34;color:#6272a4&#34;&gt;// can also pass in view if you need it.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                                               
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Private eventing between gui and gui adapter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#plusBtn&amp;#39;&lt;/span&gt;).click(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () { view.onAdd() });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#minusBtn&amp;#39;&lt;/span&gt;).click(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () { view.onDelete() });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#list&amp;#39;&lt;/span&gt;).change(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) { view.onListSelectionChanged(e); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// More abstract application eventing
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_ADD_ITEM&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e) { controller.cmdAddItem(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_DELETE_ITEM&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e) { controller.cmdDelItem(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_SELECTION_CHANGED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e, info) { controller.cmdUpdateSelected(info); });                                           
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_THING_ADDED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e, info) { view.rebuildList(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_CHANGED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e, info) { view.rebuildList(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_SELECTION_CHANGED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e, info) { view.updateSelected(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    view.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;There are more source code implementations in &lt;a href=&#34;https://abulka.github.io/patterns/hexmvc/#hexmvc-source-code&#34;&gt;the appendix&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hexmvc-history&#34;&gt;HexMvc History&lt;/h2&gt;
&lt;h3 id=&#34;mgm-days&#34;&gt;MGM days&lt;/h3&gt;
&lt;p&gt;My initial simplification and re-telling of MVC came with my &lt;a href=&#34;https://abulka.github.io/patterns/mvca-pattern/&#34;&gt;MGM pattern&lt;/a&gt; where I simply said (well perhaps not so simply, given that it was a paper for a design patterns conference) was that in these (more modern) days where we have proper, sophisticated GUI widgets with eventing and self rendering - there was a need to retell the MVC story - which was traditionally also looking after all eventing, user interaction and even rendering of the GUI.&lt;/p&gt;
&lt;p&gt;So I came up with MGM (model-gui-mediator) where the mediator took on the roles of intercepting events from the GUI widget, sticking info into the model, and also of populating the GUI with fresh information.  The “mediator” class (the last “M” in MGM - although visually it sat more in the middle - between the model and the gui) was a controller and view adapter in one - whereas these days I would separate these two roles, as you will see in HexMVC.  &lt;/p&gt;
&lt;p&gt;The benefit of this variation of the MVC design pattern was that was practical and minimalist.  It dealt with the reality of modern gui widgets, whether they be GUI widgets or html DOM elements and created only a single class that mediated with a model.  In a sense it was the simplest MVC possible, whilst retaining model and gui separation.&lt;/p&gt;
&lt;h3 id=&#34;next-steps&#34;&gt;Next steps&lt;/h3&gt;
&lt;p&gt;As I learned more about the roles involved in MVC, and encountered variants that teased apart those roles more fully (like pureMVC) I became interested in upscaling my MVC approach a little so that it was more all encompassing and took into account whole-application considerations, like providing a central controller layer for housing many ‘commands’.  &lt;/p&gt;
&lt;p&gt;Then I became interested in bootstrapping the wiring of whole apps with MVC architectures, and eventually in the swappability of guis and models - which led to HexMVC.&lt;/p&gt;
&lt;h3 id=&#34;hexmvc-in-a-nutshell&#34;&gt;HexMVC in a nutshell&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; Write the application layer but don&amp;rsquo;t import or use any libraries directly.  Wrap all library calls with Adapter objects, so that you can switch to other libraries easily.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HexMVC says that there must be a view class that looks after the off the shelf GUI widget (or in the case of the browser, the DOM element).  In the wild, the term “view” is ambiguous and sometimes means the gui adapter or the gui or both.  I use the term view adapter for the class that looks after the widget/DOM element.&lt;/p&gt;
&lt;p&gt;So far this is not controversial.  HexMVC then goes on to say a few more interesting things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Firstly, that models and GUI widgets should be treated on an equal footing, and be “adapted”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondly, that generic, application eventing should occur between adapters and a central controller - any private eventing between the gui and its adapter should remain private. In the case of model adapters, they implement all the eventing and the models remain pure.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly, the application and controller are bound together as the “application hub”, which may be split into many command objects. The application layer talks to the orbiting sattelite functionality via the adapter interfaces, and thus the application is insulated from changes in the “implementation”.  Adapters can, more efficiently, also talk to each other directly, but again, only through the adapter interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More broadly, the HexMVC approach is wired up through dependency injection and eventing and as you may have noticed, the use of adapters - more specifically families of adapters - so that different implementations can be plugged in without the application noticing.  An adapter is essentially a ‘driver’ you install for a particular implementation being used - like a new printer driver for a new printer.  That’s where the ‘hex’ comes into it, from the ‘hexagonal’ architecture pattern idea (later renamed “ports and adapters”).&lt;/p&gt;
&lt;h3 id=&#34;rules-and-roles&#34;&gt;Rules and Roles:&lt;/h3&gt;
&lt;p&gt;Note: when I say ‘notifies’ I mean via notifications via eventing - which is managed/wired up by dependency injection - and not through layers actually knowing about each other.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;view layer notifies controller, model layer usually does not notify controller, but it could.&lt;/li&gt;
&lt;li&gt;model layer often efficiently notifies view layer directly, yes.&lt;/li&gt;
&lt;li&gt;view layer can read from model later directly, yes - but not modify it.&lt;/li&gt;
&lt;li&gt;controller can manipulate both model and view layers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;layered-architectures&#34;&gt;Layered Architectures&lt;/h2&gt;
&lt;p&gt;I had always been fascinated by the idea of pluggable, modular application designs where you could plug in decoupled services/functionality into an app.  Its a truth that adding functionality adds complexity almost exponentially - it becomes harder and harder to add features without introducing problems and inteference.  I wanted a way out of that.&lt;/p&gt;
&lt;p&gt;Simple layering:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A recent talk I gave on layered architectures reinforced the benefits of layering. However I found numerous people talking about the limitations of having the model ‘at the bottom’ of the layering stack.  Plus lots of people were introducing an ‘infrastructure layer’ which stood vertically and had access to all layers.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally, there were all these techniques for breaking out of layers, like broadcast notifications, eventing and dependency injection.  So I got to thinking that maybe a different metaphor was needed, something a bit less vertical, and more like a circle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Possible evolution of layering&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When teaching design patterns courses including sessions about the adapter pattern, I would always end that particular session with the idea of using adapters as a way of insulating an app from the ‘bad outside world’ and adapt all external libraries.  It was a radical, intriguiing idea - possibly a bit impractical and theoretical. So I ended up trying to build such a system anyway.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alistair Cockburn described a &lt;a href=&#34;https://www.google.com/url?q=http://alistair.cockburn.us/Hexagonal%2Barchitecture&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497539284&amp;amp;usg=AOvVaw2f2mT_1Zk2v3iJ84jJRrNP&#34;&gt;hexagonal architecture&lt;/a&gt; (later renamed Ports and Adapters pattern) which had services, gui’s, db, etc. around a central app.  The application talked to adapters.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image24.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The hexagonal architecture&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was the architecture I was intrigued by, but there were no reference implementations, and a lot of the writing on the webpage seemed theoretical and sketchy - like a half baked idea that nobody had actually tried.  So I went ahead and built something similar - as simply as possible.&lt;/p&gt;
&lt;p&gt;I had always liked the &lt;a href=&#34;https://www.google.com/url?q=http://puremvc.org/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497539894&amp;amp;usg=AOvVaw0krRSlmvdpyy7V-x2aGNRS&#34;&gt;PureMvc&lt;/a&gt; pattern, which was a bold retelling of the mvc architecture pattern.  It described all the roles in an mvc architecture, and provided strict rules as to who knows who and how the sequence of interactions went.  I wrote a number of &lt;a href=&#34;https://www.google.com/url?q=http://www.andypatterns.com/index.php/blog/puremvc_refactor/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497540127&amp;amp;usg=AOvVaw1wOxO1elRARnO7oLGybGMF&#34;&gt;articles&lt;/a&gt; about it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is a framework and has been ported to most languages.  In practice I found it effective though tedious because of all the rules and registrations - and with its home grown eventing system it is tedious to declare event types, register handlers etc.  I wanted something simpler, whilst keeping the good stuff.  When I implemented an early/partial HexMvc version of a minimal PureMvc sample app, I was able to remove all references to the PureMvc framework and simplify the resulting application - the cost was a dozen extra lines of code to get it working the same.  But being able to remove an entire framework and get the the same result was certainly encouraging.&lt;/p&gt;
&lt;h2 id=&#34;hexmvc-fundamentals&#34;&gt;HexMVC Fundamentals&lt;/h2&gt;
&lt;h3 id=&#34;app-in-the-centre&#34;&gt;App in the centre&lt;/h3&gt;
&lt;p&gt;We start the basic hexagonal architecture with the idea of application in the core.&lt;/p&gt;
&lt;p&gt;The application talks to interfaces, which are implemented by adapters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The controller too, lives inside the central app hub.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-app&#34;&gt;The App&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Holds refs to the core adapters (server, gui, model)&lt;/li&gt;
&lt;li&gt;Wires the core adapters so they know about the app&lt;/li&gt;
&lt;li&gt;App has job of housing the domain logic and app logic and thus the controller/commands.&lt;/li&gt;
&lt;li&gt;App sometimes mediates - calls come in and the app sends them out again. Defines one or two methods that an adapter may need (e.g. for that adapter to communicate some info to or get some info from another adapter)  Mediation role.&lt;/li&gt;
&lt;li&gt;Defines Boot() and Shutdown()&lt;/li&gt;
&lt;li&gt;Injects multicast dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the app does not instantiate objects - this is done by the bootstrapper.&lt;/p&gt;
&lt;h4 id=&#34;layers-as-slices-through-the-app-circle&#34;&gt;Layers as slices through the App circle.&lt;/h4&gt;
&lt;p&gt;Thus we have taken top down layering and making it round a “Application Hub” instead.  If you follow one particular event flow e.g. from gui to model and back again, you get a traditional view-controller-model top down layered cake.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image17.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;But by allowing for more event flows and more services plugged in to a hub, we get a more flexible and interesting architecture, which is still a layered one.  Thus you can get different layers depending on where you start and where you finish.  Nobody is ‘on top’ or ‘on the bottom’.&lt;/p&gt;
&lt;p&gt;E.g. I add a server layer which provides REST services to the web, as an example of another significant layer.&lt;/p&gt;
&lt;h4 id=&#34;interfaces-everywhere&#34;&gt;Interfaces Everywhere&lt;/h4&gt;
&lt;p&gt;As GOF says in its introduction, one of the main two OO principles is “Program to an interface, not an implementation”.  This allows clients to be decoupled from the implementation.&lt;/p&gt;
&lt;h4 id=&#34;adpaters-everywhere&#34;&gt;Adpaters Everywhere&lt;/h4&gt;
&lt;p&gt;In HexMvc we write adapters to implement the interfaces. The adapters’ purpose is to provide a level of indirection between the application logic and the substantive thing the application is talking to.&lt;/p&gt;
&lt;h3 id=&#34;hexmvc-control-flow&#34;&gt;HexMvc Control flow&lt;/h3&gt;
&lt;p&gt;In HexMvc I pretty much follow the PureMvc rules and call sequences.&lt;/p&gt;
&lt;h4 id=&#34;the-rules&#34;&gt;The rules&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Model notifies, but doesn&amp;rsquo;t listen and ultimately knows nothing about anything else in the system.&lt;/li&gt;
&lt;li&gt;View sends messages to controller and listens for incoming messages from model.&lt;/li&gt;
&lt;li&gt;Controller commands are created and invoked by certain messages and they send out messages if they want to.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-typical-call-sequence&#34;&gt;The typical call sequence&lt;/h4&gt;
&lt;p&gt;Here the gui adapter raises command events and listens for notification events.  A command event is an event that causes the controller to do something (which may then indirectly instantiate a command object to the work).  A notification event would be e.g. the model layer saying ‘something has changed’.  Controllers act directly on the model / model adapter layer and don’t typically raise events.  The model layer doesn’t listen for events, but can generate notification events.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image15.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;
&lt;p&gt;The controller makes available an abstract chunk of information that the view renders, so in that sense a HexMvc controller is like a traditional web controller class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Controller listens for GUI command messages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Responds by implementing the business logic  - optionally uses command objects to do the work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Talks to the model adapter and other adapters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Offers other functionality that can get invoked directly (not just from eventing) e.g. from the server service. Provides information as implementation independent, abstract chunks e.g. dictionaries, datastructures, vanilla app objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that controllers shouldn’t get too ‘view specific’ - these roles are performed by the View Adapter.  Choosing templates and constructing juicy, view specific data structures are not jobs for the controller.&lt;/p&gt;
&lt;h3 id=&#34;eventing&#34;&gt;Eventing&lt;/h3&gt;
&lt;p&gt;I use a simplified eventing system (see in depth discussion on eventing later in this document).&lt;/p&gt;
&lt;h4 id=&#34;application-specific-eventing-vs-gui-eventing&#34;&gt;Application specific eventing vs gui eventing&lt;/h4&gt;
&lt;p&gt;The adapters is where you implement application specific eventing.  The Gui itself may have some eventing but this is gui implementation specific and not to be confused with the eventing that the application uses.  Its the gui adapter for example, that intercepts gui specific eventing and rasies the appropriate application event.  The gui adapater similarly listens for the appropriate application event and does something with it, like poke values into controls on a windows form.&lt;/p&gt;
&lt;h3 id=&#34;the-bootstrapper&#34;&gt;The Bootstrapper&lt;/h3&gt;
&lt;p&gt;Instantiation of adapters and the things they adapt (the ‘ring’ objects) should be outside the App.  Theoretically you inject different ring adapters into the app and the app will still work.  That’s the whole point.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instantiates all instances of objects&lt;/li&gt;
&lt;li&gt;Injects normal dependencies, wires up the ring adapters to talk to each other if needed&lt;/li&gt;
&lt;li&gt;Can be considered configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dependency-injection&#34;&gt;Dependency Injection&lt;/h3&gt;
&lt;p&gt;The bootstrapper has aspects of a factory in that it instantiates the correct objects.&lt;/p&gt;
&lt;p&gt;It then uses dependency injection config bootup everywhere to configure&lt;/p&gt;
&lt;p&gt;When you wire up your objects to point to each other you are doing dependency injection - as long as the objects are not instantiating instances of the objects they are pointing to themselves, and the injection is done from ‘outside’. The objects being injected are thus depending on an abstraction or interface - which is injected later.&lt;/p&gt;
&lt;h2 id=&#34;hexmvc-in-detail&#34;&gt;HexMvc in Detail&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;All in One HexMvc Diagram&lt;/p&gt;
&lt;h3 id=&#34;app-to-gui-boundary&#34;&gt;App to GUI boundary&lt;/h3&gt;
&lt;p&gt;Swappable guis, just rewrite the gui adapter&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image23.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;view&#34;&gt;View&lt;/h3&gt;
&lt;p&gt;We should distinguish between the view adapter and the view ‘renderer’/controls.  The latter ‘ring object’ can be hand crafted by code or built by nice high level form building tools - and should have absolutely no knowledge of the app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Views renderers are totally dumb.  &lt;/li&gt;
&lt;li&gt;View Adapter on the other hand know both about the dirty details of view controls and how to populate them.&lt;/li&gt;
&lt;li&gt;The View Adapter binds to or overrides GUI specific events and translates these into application events.  Conversely the GUI adapter listens for relevant application events (e.g. model ‘I have changed’) and responds by updating the real GUI.&lt;/li&gt;
&lt;li&gt;The View Adapter talks directly to the app/controller to get information.  Just as with the server adapter, this information is made available as an abstract chunk of information that is independent of the view.  Its up to the view or ther server to ‘render’ it appropriately.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, its the gui adapters that recieve events from e.g. the model, regarding things that change and need to be re-rendered. Anytime you switch GUI implementations, you put in place a different adapter - ensuring it hooks into and participates in the same eventing infrastructure.&lt;/p&gt;
&lt;p&gt;The interface to your alternate gui adapters is, of course, the same.  &lt;/p&gt;
&lt;p&gt;Its the gui adapters that recieve events from e.g. the model, regarding things that change and need to be re-rendered. Anytime you switch GUI implementations, you put in place a different adapter - ensuring it hooks into and participates in the same eventing infrastructure.&lt;/p&gt;
&lt;p&gt;Typically the gui adapter listens for application events and updates the particular gui in a particular way.&lt;/p&gt;
&lt;h3 id=&#34;app-to-model-boundary&#34;&gt;App to Model boundary&lt;/h3&gt;
&lt;h4 id=&#34;model&#34;&gt;Model&lt;/h4&gt;
&lt;p&gt;The Model contains the raw domain classes and their relationships.  The model adapter interface is what the app deals with.&lt;/p&gt;
&lt;p&gt;HexMvc favours a thin model approach where the majority of domain and business logic is kept in the  controller because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A thin model means you can rebuild a model rapidly as needed, for different implementations (see more info on this below).  You preserve the hard domain and business logic in the controller, which never changes.  The App and Controller are the core which never changes.&lt;/li&gt;
&lt;li&gt;A centralised coordinated domain logic with undo/redo in a central place is something I’m trying out at this stage of my programming!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see that when the application talks to the model, it talks via an adapter, via an interface.&lt;/p&gt;
&lt;h4 id=&#34;eventing-in-the-model-adapter&#34;&gt;Eventing in the model adapter&lt;/h4&gt;
&lt;p&gt;Similarly the model adapter is the where model ‘onchange’ application events are raised.  The model remains pure and simple.  The model’s “Add Some Entity” operation is implemented by the model adapter, which pokes the information into the pure model and then its the model adapter which raises the relevant onchange application notification event.&lt;/p&gt;
&lt;h4 id=&#34;model-no-longer-at-the-bottom&#34;&gt;Model no longer at the bottom&lt;/h4&gt;
&lt;p&gt;It may seem strange to have the model as a sattelite rather than in the heart of the application.  But to put the model inside the app centre would to make the same ‘mistake’ as putting the model at the bottom of the traditional layer cake.  Its not necessarily wrong, its just inflexible and not in the spirit of pluggability.&lt;/p&gt;
&lt;h4 id=&#34;why-have-multiple-model-implementations&#34;&gt;Why have multiple model implementations?&lt;/h4&gt;
&lt;p&gt;This lets you switch out the model for a differently implemented model.  Now this may sound strange - swapping out a different model, as the model is typically a core part of an application and independent of any particular implementation.  But you need to be able to do this because I found that when implementing a ORM model which auto persists to a db, I had to annotate my classes with a certain syntax.  In my regular OO model, none of this syntax was needed. So I couldn’t use the same source code for my model - my model was not ‘pure’ enough. Implementation details were, rightly or wrongly, creeping into my pure model.  Further evidence of this was that my model implementations operated differently - my OO version had to work harder to store collections, whereas the ORM model had that functionality for free, due to the underlying SQL db.&lt;/p&gt;
&lt;p&gt;Thus switching model implementations is no different to switching out gui implementations.&lt;/p&gt;
&lt;p&gt;That’s why models are out on the ring and not in the centre - they are not reified but are just another application service.  This also means that a thin model approach is best, so that business logic is not duplicated, and can be kept in the core app - which is where I like it best these days anyway.&lt;/p&gt;
&lt;h4 id=&#34;different-back-ends-to-a-model&#34;&gt;Different ‘back ends’ to a model&lt;/h4&gt;
&lt;p&gt;Model swappability is not to be confused with the idea of different ‘back ends’ to a model.  When you keep the model code the same and switch in different persistence or database backends - that is merely a nice feature of a particular model implementation.  Its an implementation which has some persistence flexibility.  But if I don’t want to conform to that particular e.g. Ruby ActiveRecord paradigm, with its particular model annotations and syntax - I don’t have to.  HexMvc allows me to swap in a totaly different model paradigm, with entirely different model syntax and annotations - its completely flexible.&lt;/p&gt;
&lt;h3 id=&#34;model-to-persistence-boundary&#34;&gt;Model to Persistence boundary&lt;/h3&gt;
&lt;p&gt;As we said earlier, the model adapter provides the overall interface to the &amp;lsquo;model subsystem&amp;rsquo;. The model adapter methods include model manipulation and access methods, as well as persistence methods. e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Behind the model adapter is the pure model and possibly a persistence object.  The persistence class is itself adapted behind an interface, so that different persistence techniques can be used.  The model adapter coordinates both the pure model and the swappable persistence class.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The persistence class knows about the model, it has to, in order to get persistence data in and out of it.&lt;/p&gt;
&lt;p&gt;The underlying real model class provides the model methods, obviously.&lt;/p&gt;
&lt;p&gt;The underlying real persistence class provides the persistence methods.&lt;/p&gt;
&lt;h4 id=&#34;different-persistence-techniques&#34;&gt;Different persistence techniques&lt;/h4&gt;
&lt;p&gt;Typically you do not need an explicitly coded persistence object ‘backend’ if your model already uses the ORM pattern, and persistes automatically to a db.  And usually you can choose the db vendor through config files.&lt;/p&gt;
&lt;p&gt;But if you are hand-crafting your own persistence backend mechanism which can be swapped for other persistence mechanisms, then the following design seems a reasonable approach.&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;is-an-abstract-persistence-interface-possible&#34;&gt;Is an abstract persistence interface possible?&lt;/h4&gt;
&lt;p&gt;An alternative ‘swappable persistence backend approach’ I tried was to have the model communicate with an abstract persistence interface which you can swap - this prooved too hard. But again, if you can pull it off, that&amp;rsquo;s fine. Just hide all this stuff behind the Model Adapter.&lt;/p&gt;
&lt;h4 id=&#34;switchable-db-persistence-backends-to-a-particular-model&#34;&gt;Switchable db persistence backends to a ‘particular’ model.&lt;/h4&gt;
&lt;p&gt;Here we are talking about a model that has swappable persistence backends.  As mentioned earlier, the idea of different persistence/implementation ‘back ends’ to a model is to be distinguished from swapping entire model implementations.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you swap model implementations your model code changes and has different code syntax annotations and implementation logic.&lt;/li&gt;
&lt;li&gt;When you swap persistence back-ends, the model code stays the same and a configuration file lets you switch in different a persistence / database backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;on-file-names-and-connection-strings&#34;&gt;On file names and connection strings&lt;/h4&gt;
&lt;p&gt;The Model Adapter LoadAll() optionally does take a filename as a parameter e.g. LoadAll(‘mydata.txt’). This is fine for when the app wants to specify a persistence file to load/save to and is the common case catered for.  &lt;/p&gt;
&lt;p&gt;If you are e.g. persisting to a database using a connection string, there is now more information to be specified than a mere filename e.g. database name, username, password etc.  We arguably should not contaminate the interface of ModelAdapter with all sorts of Persistence specific methods and parameters - after all, the ModelAdapter must be a straightforward interface that can be implemented by various persistence implementations - so that persistence implementations can be swapped in/out seamlessly.&lt;/p&gt;
&lt;p&gt;The solution is to move this problem into the configuration/wiring/bootup stage where the Persistance object is instantiated and configured. For example, In the case of Sql database persistence, a Persistence class is not needed since the Model is auto persisted.  In this case the ModelSqlAdapter implements the required LoadAll methods by doing nothing. And the connection string etc. is done in the configuration.&lt;/p&gt;
&lt;h3 id=&#34;app-to-server-boundary&#34;&gt;App to Server boundary&lt;/h3&gt;
&lt;p&gt;Server thread is like another gui layer, just write a different server adapter&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image22.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;careful-with-your-call-sequence&#34;&gt;Careful with your call sequence&lt;/h4&gt;
&lt;p&gt;A slightly different call sequence is needed when providing a server interface to your app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can’t simply have the server subscribe to model onchange notifications, because the server must prepare and return a response immediately - at the end of the incoming request.  &lt;/li&gt;
&lt;li&gt;You can’t can’t have the server raise an application event which the controller then picks up and acts on, because you typically want an immediate response so that a response object can be built.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means the server must call directly into the controller and get the information it needs, and the controller must call directly into the model (adapter) to make changes and get results.  This is not strange, this is simply the web mvc approach.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image19.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;its-not-necesssarily-a-synchronous--asynchronous-issue&#34;&gt;Its not necesssarily a synchronous / asynchronous issue&lt;/h4&gt;
&lt;p&gt;Note that this is not a synchronous / asynchronous issue - since most eventing whilst appearing semantically asynchronous is actually all implemented synchronously.  Its more an issue of incoming function calls on the server needing to do all their work within the same function call, whereas with an eventing approach, work is broken up across several function calls and returned using several function calls.&lt;/p&gt;
&lt;h4 id=&#34;implications&#34;&gt;Implications&lt;/h4&gt;
&lt;p&gt;This all means that controller commands must be able to be invoked directly or invocable as a result of an event being raised.&lt;/p&gt;
&lt;p&gt;Note that the model can still send its onChange notifications, its just that the server is not hooked up to them - but other subsystems might be.  So this allows for webpages to indirectly affect a desktop GUI view - neat.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Example of using the REST api via a web browser.  The GUI updates itself simultaneously!&lt;/p&gt;
&lt;p&gt;Aside: Threading introduces a bit of complexity, watch out for communication between threads, added a mutex method on the app, which can do anything needed&lt;/p&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;h3 id=&#34;adapters&#34;&gt;Adapters&lt;/h3&gt;
&lt;p&gt;More elaboration on &lt;a href=&#34;https://abulka.github.io/patterns/hexmvc-adapters&#34;&gt;HexMVC adapters&lt;/a&gt; and Adapter Patterns in general.&lt;/p&gt;
&lt;h3 id=&#34;events&#34;&gt;Events&lt;/h3&gt;
&lt;p&gt;More elaboration on &lt;a href=&#34;https://abulka.github.io/patterns/hexmvc-eventing&#34;&gt;HexMVC eventing&lt;/a&gt; and Event Patterns in general.&lt;/p&gt;
&lt;h3 id=&#34;hexmvc-source-code&#34;&gt;HexMVC Source Code&lt;/h3&gt;
&lt;p&gt;Here is the directory of code used to develop the ideas in this article. It contains various versions of implementations, mainly in Python and .NET.  I need to document it sometime.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/abulka/pynsource/tree/master/Research/hexmvc&#34;&gt;https://github.com/abulka/pynsource/tree/master/Research/hexmvc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P.S. There is no reason it is located in the &lt;code&gt;pynsource&lt;/code&gt; GitHub project directory - it just happened that way. It should be moved to its own repository.&lt;/p&gt;
&lt;h2 id=&#34;presentation-in-2012&#34;&gt;Presentation in 2012&lt;/h2&gt;
&lt;p&gt;I presented the HexMVC pattern to the Melbourne Patterns Group in 2012.&lt;/p&gt;
&lt;p&gt;Re the talk - yeah it was full on 1.75 hours, 10 people - quite a complex topic.  I got some useful feedback re points that could be clearer etc. A couple of heart felt applauses and one guy came up to me and shook my hand with enthusiasm.   A few others didn&amp;rsquo;t say as much as I hoped - I guess I was looking for a bit more feedback. I probably didn&amp;rsquo;t pause enough and allow audience participation like I normally do - I just barrelled through the material a bit.  Its not easy, esp. - when presenting something complex and new-ish for the first time.&lt;/p&gt;
&lt;h3 id=&#34;post-presentation-clarifications&#34;&gt;Post Presentation Clarifications&lt;/h3&gt;
&lt;p&gt;Thanks for those who came and listened to my HexMvc talk last night. If anyone is interested in accessing and commenting on the google doc which will soon be an article on my website, please &lt;a href=&#34;mailto:abulka@gmail.com&#34;&gt;email me&lt;/a&gt; for access.  I was also hoping for some ‘peer review’ on my talk so please send me your thoughts if you get time - I would really appreciate the feedback.&lt;/p&gt;
&lt;p&gt;Meanwhile here are some more considered responses to a few of last night’s questions:&lt;/p&gt;
&lt;h4 id=&#34;q-whats-the-distinction-between-the-model-and-the-model-adapter&#34;&gt;Q: ‘What’s the distinction between the model and the model adapter’&lt;/h4&gt;
&lt;p&gt;A: The application should treat the model adapter as if it were the model. And as Stewart reminded me of my own point (thanks!), the adapter adds the application eventing so that the model is not contaminated with that eventing infrastructure stuff. The adapter also hides model specific operations that are done in different ways e.g. FindThings() lives in the model adapter and is implemented totally differently in the OO model adapter implementation vs. the SQL model adapter implementation (which utilises a fast sql query).  Yes, there seems to be some flexibility re whether you put model subsystem functionality into the model or its model adapter. Certainly business rules and exceptions I would put in the controller, and keep the model subsystem thin.&lt;/p&gt;
&lt;h4 id=&#34;q-the-server-becomes-just-another-view&#34;&gt;Q: ‘The server becomes just another view’&lt;/h4&gt;
&lt;p&gt;A: Yes - and yey - it all turns out to be very symmetrical.  Though because the services offered by the server REST api are available via http then you might access these services without any sort of browser/view - just trawling for data and making command calls into the application.  Perhaps this subsystem should be called ‘services’ not server?  Done, I’ve renamed it.&lt;/p&gt;
&lt;h4 id=&#34;q-why-in-the-diagram-does-the-app-point-to-the-gui-but-in-fact-the-gui-gets-updated-directly-from-the-model-via-notifications&#34;&gt;Q: ‘Why in the diagram does the App point to the GUI but in fact the GUI gets updated directly from the model via notifications’&lt;/h4&gt;
&lt;p&gt;A: Good point, my ‘arrows’ and their directions could have been made clearer.  The connection between the core app and the gui is one of composition and rarely used.  Its the eventing from view to controller and from model to view that forms 90% of the communication with the view.  My sequence diagrams showed this, but my overal structural diagram was, let us say, a bit more abstract and loose re this point.  Here is an updated diagram that should make things clearer:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;POST TALK THOUGHTS:&lt;/p&gt;
&lt;p&gt;Look at the ideas of &lt;a href=&#34;https://www.google.com/url?q=http://obvious.retromocha.com/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497596031&amp;amp;usg=AOvVaw3G_JvaDfacMb4Ki6Z4oU07&#34;&gt;‘obvious’ framework&lt;/a&gt; which is based on Uncle Bob’s thoughts. It has an independent APP and a plugs/jacks approach.&lt;/p&gt;
&lt;p&gt;Asked for more info in a &lt;a href=&#34;https://www.google.com/url?q=https://github.com/RetroMocha/obvious/issues/2&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497596383&amp;amp;usg=AOvVaw1J3id81clTw9cpbH3F_u04&#34;&gt;github post.&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: GUI Showdown</title>
      <link>https://abulka.github.io/blog/2022/02/11/gui-showdown/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2022/02/11/gui-showdown/</guid>
      <description>
        
        
        &lt;p&gt;Andy&amp;rsquo;s &lt;a href=&#34;https://abulka.github.io/gui-showdown&#34;&gt;GUI Showdown&lt;/a&gt; - The same application, implemented in various ways - which is better, cleaner, more understandable etc?&lt;/p&gt;
&lt;p&gt;Like the TodoMVC &amp;ldquo;Rosetta Stone&amp;rdquo; project, but uses a different example application, and includes Python as well as Javascript implementations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This project was originally intended to see if an ECS (Entity Component System), which is commonly used in building games, could be used to implement a &amp;ldquo;normal&amp;rdquo; GUI application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;five-javascript-implementations&#34;&gt;Five Javascript implementations:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://abulka.github.io/gui-showdown&#34;&gt;Live Demo&lt;/a&gt; of all Javascript implementations.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Technique&lt;/th&gt;
&lt;th&gt;Lines&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OO&lt;/td&gt;
&lt;td&gt;279&lt;/td&gt;
&lt;td&gt;Gui wired via OO (Object Oriented Models with Observer)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MVCA&lt;/td&gt;
&lt;td&gt;383&lt;/td&gt;
&lt;td&gt;Gui wired via &lt;a href=&#34;https://github.com/abulka/todomvc-oo&#34;&gt;MVCA&lt;/a&gt; Architectural Pattern 🆕!!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;228&lt;/td&gt;
&lt;td&gt;Gui wired via ECS (Entity Component System)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PLAIN&lt;/td&gt;
&lt;td&gt;154&lt;/td&gt;
&lt;td&gt;Gui wired via plain JQuery&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VUE&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;td&gt;Gui wired via Vue.js&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;two-wxpython-implementations&#34;&gt;Two wxPython implementations:&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Technique&lt;/th&gt;
&lt;th&gt;Lines&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;344&lt;/td&gt;
&lt;td&gt;Gui wired via ECS (Entity Component System)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OO&lt;/td&gt;
&lt;td&gt;290&lt;/td&gt;
&lt;td&gt;Gui wired via OO (Object Oriented Models with Observer)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- P.S. Why is the python ESC version bigger than OO, yet the js ESC version is **smaller** than js OO!?? --&gt;
&lt;p&gt;Counting the number of lines is approximate.  Implementation code that is a convenient extension to a library or framework is not counted.  E.g. Vue.js itself is not counted, obviously.  ECS uses Jecs library, which is not counted, nor are some extension functions I added.  OO technique uses an observer design pattern, whose short implementation code is not counted - its the least I could do to help the OO approach which came in at a whopping 300 lines.&lt;/p&gt;
&lt;p&gt;There is an index.html launch page to get to all these implementations, as well as a debug view showing models in real time as you work with the GUI.&lt;/p&gt;
&lt;h2 id=&#34;the-application-being-implemented&#34;&gt;The Application being implemented&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/abulka/gui-showdown/raw/master/docs/images/2019-07-17_11-41-03.gif&#34; alt=&#34;The UI&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;specification&#34;&gt;Specification&lt;/h3&gt;
&lt;p&gt;Whilst not that complex, this application has a few interesting nuances which challenge any implementation. The main nuance is that whilst the &amp;ldquo;model&amp;rdquo; can be edited and manipulated (made uppercase, set to certain phrases) the top header area displays the model according to various &amp;ldquo;display options&amp;rdquo;.  Changing the display options changes how to top area appears but does not change the model.&lt;/p&gt;
&lt;p&gt;Specifically, the behaviour we are implementing is:&lt;/p&gt;
&lt;p&gt;Model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;welcome message&lt;/strong&gt;, default &amp;ldquo;Welcome&amp;rdquo;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;user&lt;/strong&gt;, with a &lt;code&gt;firstname&lt;/code&gt; and &lt;code&gt;surname&lt;/code&gt;, default &amp;ldquo;Sam Smith&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;welcome_msg&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Welcome&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;firstname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Sam&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;surname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Smith&amp;#34;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The GUI displays:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the welcome message twice
&lt;ul&gt;
&lt;li&gt;top left: pure message&lt;/li&gt;
&lt;li&gt;top right: message + user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;text entry, which allows editing of the welcome message&lt;/li&gt;
&lt;li&gt;text entry, which allows editing of the user name and surname&lt;/li&gt;
&lt;li&gt;checkbox1, which toggles the model welcome message uppercase/lowercase&lt;/li&gt;
&lt;li&gt;checkbox2, which toggles the top right user to uppercase (not via model)&lt;/li&gt;
&lt;li&gt;button1, which resets the welcome message to &amp;ldquo;Hi&amp;rdquo;&lt;/li&gt;
&lt;li&gt;button2, which resets the user to &amp;ldquo;Fred Flinstone&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;commentary&#34;&gt;Commentary&lt;/h2&gt;
&lt;p&gt;More commentary and evaluation of the techniques to come.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Patterns: Relationship Manager - Design Pattern</title>
      <link>https://abulka.github.io/patterns/relationship-manager/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/patterns/relationship-manager/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/62371233035718bgDSC1367.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Basically describes a lightweight, in-memory Object Database.&lt;/p&gt;
&lt;p&gt;Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional &amp;ldquo;pointer&amp;rdquo; and &amp;ldquo;arraylist&amp;rdquo; techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved, especially when back-pointers are involved.&lt;/p&gt;
&lt;p&gt;Using a &lt;code&gt;Relationship Manager&lt;/code&gt; object to manage the relationships can mitigate these problems and make managing relationships straightforward. It also opens up the possibility of powerful querying of relationships, a very simple version of something like &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/&#34;&gt;LINQ&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a sense, an &lt;a href=&#34;https://en.wikipedia.org/wiki/Object_database&#34;&gt;Object Database&lt;/a&gt;
is an elaborate implementation of the Relationship Manager pattern. However the
&lt;em&gt;intent&lt;/em&gt; of the Relationship Manager pattern is lighter weight, to replace the
wirings between objects rather than acting as a huge central database on disk -
though persistence is built into Relationship Manager too.&lt;/p&gt;
&lt;h2 id=&#34;the-official-pattern&#34;&gt;The Official Pattern&lt;/h2&gt;
&lt;p&gt;Note this pattern was written and presented in 2001 - quite a while ago! In 2020 the API of the &lt;a href=&#34;https://github.com/abulka/relationship-manager&#34;&gt;Python Relationship Manager&lt;/a&gt; implementation was revised and improved - see full &lt;a href=&#34;https://abulka.github.io/relationship-manager/relmgr/index.html&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/andybulkarelationshipmanagerpattern.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Download as &lt;a href=&#34;https://abulka.github.io/files/pdfs/AndyBulkaRelationshipManagerPattern.pdf&#34;&gt;pdf&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-example&#34;&gt;Quick Example&lt;/h2&gt;
&lt;p&gt;The examples on this page use the modern v2. Python implementation.&lt;/p&gt;
&lt;p&gt;Relationship Manager has also been implemented in Python, C# (.net4 and .net core) and Java - see the Relationship Manager &lt;a href=&#34;https://github.com/abulka/relationship-manager&#34;&gt;GitHub project&lt;/a&gt; for all implementation source code.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install relationship-manager
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; relmgr &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; RelationshipManager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RelationshipManager()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;enforce(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;onetoone&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;directional&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_rel(x, y, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;find_target(x, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;benefits&#34;&gt;Benefits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Modelling relationships is easy and consistent&lt;/li&gt;
&lt;li&gt;Back pointer are free&lt;/li&gt;
&lt;li&gt;Using a query language (think LINQ) is possible over your objects&lt;/li&gt;
&lt;li&gt;Optional constraints ensure wrong wirings are not made&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Traditional object oriented programmers wire up their objects manually using pointers and arrays, whereas database programmers save their objects in a database and let the database model the relationships.&lt;/p&gt;
&lt;p&gt;Programmers often use ORM mappers to get the best of both worlds - objects which also have a representation in a database. Relationship Manager is another solution to being able to more easily model and query your objects - without needing a database.&lt;/p&gt;
&lt;h3 id=&#34;queries&#34;&gt;Queries&lt;/h3&gt;
&lt;p&gt;You can make queries on the Relationship Manager instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# query API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;find_targets&lt;/span&gt;(self, source, rel_id) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; List:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;find_target&lt;/span&gt;(self, source, rel_id) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;find_sources&lt;/span&gt;(self, target, rel_id) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; List: &lt;span style=&#34;color:#6272a4&#34;&gt;# Back pointer query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;find_source&lt;/span&gt;(self, target, rel_id) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;: &lt;span style=&#34;color:#6272a4&#34;&gt;# Back pointer query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;find_rels&lt;/span&gt;(self, source, target) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; List:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;is_rel&lt;/span&gt;(self, source, target, rel_id&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bool&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;constrained-relationships&#34;&gt;Constrained Relationships&lt;/h3&gt;
&lt;p&gt;You can enforce relationships. For example &lt;code&gt;enforce()&lt;/code&gt; works like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;enforce(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;onetoone&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;directional&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The relationship is registered as being one to one and directional, so that e.g. when you add a second relationship between the same two objects the first relationship is automatically removed - ensuring the relationship is always one to one. Alternatively, the implementation could raise an exception (go into the source and change it if this is what you need).&lt;/p&gt;
&lt;h2 id=&#34;modelling-relationships&#34;&gt;Modelling relationships&lt;/h2&gt;
&lt;p&gt;What methods do I put where when modelling relationships?&lt;/p&gt;
&lt;p&gt;What are all the possibilities of relationships between two classes?&lt;/p&gt;
&lt;p&gt;When looking at all the possibilities of relationships between two classes, you get&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one to one&lt;/li&gt;
&lt;li&gt;one to many&lt;/li&gt;
&lt;li&gt;many to one&lt;/li&gt;
&lt;li&gt;many to many&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then you have the variations generated by whether the relationships are either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;directional&lt;/li&gt;
&lt;li&gt;bi-directional&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, you have variations of whether you put pointer methods &lt;em&gt;(e.g. set, get, add)&lt;/em&gt; on one class or the other, or both.&lt;/p&gt;
&lt;p&gt;For example, assuming you have a two classes one on the lhs and one on the rhs - you could omit methods on e.g. the rhs. class, or you could go to the other extreme and provide a full range of methods on the rhs. class. &lt;/p&gt;
&lt;p&gt;I recommend that you use the &lt;a href=&#34;#table-of-relationship-scenarios&#34;&gt;table of relationship scenarios&lt;/a&gt; table to figuring out what methods to put where for each type of classic relationship you want to model.  For example, to implement a &lt;strong&gt;one to many&lt;/strong&gt; relationship between two classes X and Y, you would use template 4 or 5 (use the latter if you want bidirectionality)&lt;/p&gt;
&lt;p&gt;Note that some combinatorial possibilities do not make sense and are left out of the table below. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; means &lt;strong&gt;singular&lt;/strong&gt; &lt;strong&gt;API&lt;/strong&gt; - this makes sense for one to one relationships, or the many side (ironically) of one to many relationships.  It consists of methods like &lt;strong&gt;get, set, clear&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; means &lt;strong&gt;plural&lt;/strong&gt; &lt;strong&gt;API&lt;/strong&gt;- this makes sense where you are dealing with collections, a &lt;em&gt;many&lt;/em&gt; concept.  It consists of methods like &lt;strong&gt;add, remove, getall&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;   means no methods relating to the relationship have been implemented on that class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Blank cells mean &amp;ldquo;not applicable&amp;rdquo;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scenario # see &lt;a href=&#34;#table-of-relationship-scenarios&#34;&gt;below&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;directional&lt;/th&gt;
&lt;th&gt;bi-directional&lt;/th&gt;
&lt;th&gt;comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;one to one&lt;/em&gt;&lt;br&gt;&lt;code&gt;1 --&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;one to one&lt;/em&gt;&lt;br&gt;&lt;code&gt;1 &amp;lt;--&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#1.&lt;/td&gt;
&lt;td&gt;S       -&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#2.&lt;/td&gt;
&lt;td&gt;-       S&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#3.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;S        S&lt;/td&gt;
&lt;td&gt;using &amp;lsquo;bidirectional&amp;rsquo; relationship, which creates two relationship entries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#3A.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;S        S&lt;/td&gt;
&lt;td&gt;alternative implementation using a single &amp;lsquo;direction&amp;rsquo; relationship - the bidirectionality is figured out using the magic of &lt;code&gt;rm.find_source()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;one to many&lt;/em&gt;&lt;br&gt;&lt;code&gt;1 --&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;one to many&lt;/em&gt;&lt;br&gt;&lt;code&gt;1 &amp;lt;--&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#4.&lt;/td&gt;
&lt;td&gt;P      -&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#5.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;P       S&lt;/td&gt;
&lt;td&gt;using &amp;lsquo;bidirectional&amp;rsquo; relationship, which creates two relationship entries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#5A.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;P       S&lt;/td&gt;
&lt;td&gt;alternative implementation using a single &amp;lsquo;direction&amp;rsquo; relationship - the bidirectionality is figured out using the magic of &lt;code&gt;rm.find_source()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;many to one&lt;/em&gt;&lt;br&gt;&lt;code&gt;* --&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;many to one&lt;/em&gt;&lt;br&gt;&lt;code&gt;* &amp;lt;--&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#6.&lt;/td&gt;
&lt;td&gt;-       P&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#7.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;S         P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;many to many&lt;/em&gt;&lt;br&gt;&lt;code&gt;* --&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;many to many&lt;/em&gt;&lt;br&gt;&lt;code&gt;* &amp;lt;--&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#8.&lt;/td&gt;
&lt;td&gt;P      -&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#9.&lt;/td&gt;
&lt;td&gt;-      P&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#10.&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;P       P&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;An attempt at mapping the theoretical relationship possibilities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The above table shows all the possible relationship scenarios between two classes.  It indicates various possibilities as to the methods you can add to either class.  For example a one to many relationship where the &amp;ldquo;many&amp;rdquo; side has no need of any methods to see who is pointing at it, would use template 4.&lt;/p&gt;
&lt;h3 id=&#34;table-of-relationship-scenarios&#34;&gt;Table of Relationship Scenarios&lt;/h3&gt;
&lt;p&gt;How to implement relationships using sets of Relationship Manager methods&lt;/p&gt;
&lt;p&gt;Here is a list of classic &amp;ldquo;relationship scenarios&amp;rdquo; (e.g. one to one, one to many etc.) and how to implement them using the Relationship Manager API.&lt;/p&gt;
&lt;p&gt;The right hand side of the below table shows python code using calls to RM (relationship manager) using the shorthand notation for the function names.  For long hand names just substitute in the appropriate name e.g. instead of RM.R() you would call rm.AddRelationship().&lt;/p&gt;
&lt;p&gt;Note: The method names below are just suggestions. Normally you would use better method names that pertain to your application domain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of &lt;code&gt;.addY(y)&lt;/code&gt; you might have &lt;code&gt;addOrder(order)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;.getX()&lt;/code&gt; you might have &lt;code&gt;getCustomer()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;getAllY()&lt;/code&gt; you might have &lt;code&gt;.getOrders()&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the table:&lt;/p&gt;
&lt;p&gt;
    Look up the scenario you need to implement on the left, then use the template implementation on the right in your code.
&lt;/p&gt;
&lt;table cellspacing=&#34;1&#34; cellpadding=&#34;9&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;Relationship Scenario&lt;/th&gt;
            &lt;th&gt;Example Python Implementation&lt;/th&gt;
        &lt;/tr&gt;


        

        &lt;tr&gt;
            &lt;td colspan=&#34;3&#34;&gt;
                &lt;h3&gt;Implementing &lt;b&gt;one&lt;/b&gt; to &lt;b&gt;one&lt;/b&gt; relationships between class X and Y&lt;/h3&gt;
            &lt;/td&gt;
            &lt;td&gt;
            &lt;/td&gt;
            &lt;td&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#1.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 → 1, directional, all methods on X&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
  Singular API             No API
 ______________        ______________
|       X      |      |       Y      |
|______________|      |______________|
|              |      |              |
|void  setY(y) |1    1|              |
|Y     getY()  |⎯⎯⎯⎯⎯⎯⎯⎯⎯→|              |
|void  clearY()|      |              |
|______________|      |______________|
        &lt;/pre&gt;
                &lt;p&gt;Note: The &lt;code&gt;clearY()&lt;/code&gt; implementation needs to get a reference to &lt;code&gt;y&lt;/code&gt; in order to call &lt;code&gt;remove_rel(x, y, ...)&lt;/code&gt; which is done by calling &lt;code&gt;getY()&lt;/code&gt; on itself.&lt;/p&gt;
            &lt;/td&gt;

            &lt;td&gt;
                &lt;pre&gt;
class X:
  def __init__(self): 
    rm.enforce(&#34;xtoy&#34;, &#34;onetoone&#34;, &#34;directional&#34;)
	
  def setY(self, y): 
    rm.add_rel(self, y, &#34;xtoy&#34;)
	
  def getY(self): 
    rm.find_target(source=self, rel_id=&#34;xtoy&#34;)
	
  def clearY(self): 
    rm.remove_rel(self, self.getY(), &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  pass
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;





        &lt;tr&gt;
            &lt;td&gt;#2.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 → 1, directional, all methods on Y&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
    No API              Singular API
 ______________        ______________
|       X      |      |       Y      |
|______________|      |______________|
|              |      |              |
|              |1    1| setX(x)      |
|              |⎯⎯⎯⎯⎯⎯⎯⎯→ | getX()       |
|              |      | clearX()     |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  pass
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def __init__(self): 
    rm.enforce(&#34;xtoy&#34;, &#34;onetoone&#34;, &#34;directional&#34;)

  def setX(self, x):
    rm.add_rel(x, self, &#34;xtoy&#34;)

  def getX(self):
    rm.find_source(target=self, rel_id=&#34;xtoy&#34;)

  def clearX(self):
    rm.remove_rel(self.getX(), self, &#34;xtoy&#34;)
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#3.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 ←→ 1, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;

                &lt;pre&gt;
   Singular API         Singular API
 ______________        ______________
|       X      |      |       Y      |
|______________|      |______________|
|              |      |              |
|void  setY(y) |1    1| setX(x)      |
|Y     getY()  | ←⎯⎯⎯⎯→ | getX()       |
|void  clearY()|      | clearX()     |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:                    
  def __init__(self):
    rm.enforce(&#34;xy&#34;, &#34;onetoone&#34;, &#34;bidirectional&#34;)
  
  def setY(self, y):
    rm.add_rel(self, y, &#34;xy&#34;)
  
  def getY(self):
    rm.find_target(self, &#34;xy&#34;)
  
  def clearY(self):
    rm.remove_rel(self, self.getY(), &#34;xy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def __init__(self):
    rm.enforce(&#34;xy&#34;, &#34;onetoone&#34;, &#34;bidirectional&#34;)

  def setX(self, x):
    rm.add_rel(self, x, &#34;xy&#34;)

  def getX(self):
    rm.find_target(self, &#34;xy&#34;)

  def clearX(self):
    rm.remove_rel(self, self.getX(), &#34;xy&#34;)
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;



        &lt;tr&gt;
            &lt;td&gt;#3A.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 ←→ 1, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;
                &lt;p&gt;Alternative implementation of scenario 3, using &#34;directional&#34; and a backpointer method&lt;/p&gt;

                &lt;pre&gt;
diagram as above
        				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:                    
  def __init__(self):
    rm.enforce(&#34;xy&#34;, &#34;onetoone&#34;, &#34;directional&#34;)  # different to 3.
    # uses &#39;directional&#39; not &#39;bidirectional&#39;

  def setY(self, y):
    rm.add_rel(self, y, &#34;xy&#34;)  # same as 3.
  
  def getY(self):
    rm.find_target(self, &#34;xy&#34;)  # same as 3.
  
  def clearY(self):
    rm.remove_rel(self, self.getY(), &#34;xy&#34;)  # same as 3.
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def __init__(self):
    rm.enforce(&#34;xy&#34;, &#34;onetoone&#34;, &#34;directional&#34;)  # different to 3.
    # uses &#39;directional&#39; not &#39;bidirectional&#39;
    # redundant call since already called in X&#39;s constructor

  def setX(self, x):  # different to 3.
    rm.add_rel(self, x, &#34;xy&#34;)
    # source and target params swapped

  def getX(self):  # different to 3.
    rm.find_source(self, &#34;xy&#34;)
    # uses &#39;find_source&#39; not &#39;find_target&#39;

  def clearX(self):  # different to 3.
    rm.remove_rel(self, self.getX(), &#34;xy&#34;)
    # source and target params swapped
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;


        &lt;tr&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td colspan=&#34;2&#34;&gt;
                &lt;p&gt;Notes on Scenario 3 and 3A:&lt;/p&gt;
                &lt;ol&gt;
                    &lt;li&gt;
                        &lt;p&gt;When you create a bi-directional enforcement rule (Scenario 3) with a call to &lt;code&gt;rm.enforce(&#34;xy&#34;, &#34;onetoone&#34;, &#34;bidirectional&#34;)&lt;/code&gt; you are actually causing rm to create &lt;i&gt;two&lt;/i&gt; relationship entries in the rm. This means
                            you can reliably use a &lt;code&gt;rm.find_target(source=self)&lt;/code&gt; call from either side, knowing there is a relationship in both directions.&lt;/p&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                        &lt;p&gt;When you create a directional enforcement rule (Scenario 3A) with a call to &lt;code&gt;rm.enforce(&#34;xy&#34;, &#34;onetoone&#34;, &#34;directional&#34;)&lt;/code&gt; or leave out this call altogether, you are causing rm to create &lt;i&gt;only&lt;/i&gt; the relationships
                            that you ask for. Thus classes on the &#39;target&#39; side of a relationship cannot call &lt;code&gt;rm.find_target(source=self)&lt;/code&gt; to find out who is pointing to them. They can however, thanks to the magic of rm, call &lt;code&gt;rm.find_source()&lt;/code&gt;                            to derive this information.
                        &lt;/p&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                        &lt;p&gt;This means bidirectional relationships never actually need to be used or declared, 😲, since an implicit back-pointer (i.e. a back reference) is &lt;i&gt;always deducible&lt;/i&gt; using &lt;code&gt;rm.find_source()&lt;/code&gt;, when using a Relationship
                            Manager! In fact a bidirectional relationship creates extra entries in the rm datastructure, and slightly more overhead in performance (maintaining both relationships e.g. in the case of creation and removal).&lt;/p&gt;
                        &lt;p&gt;However you may still want to declare a bidirectional relationship for its semantic value in your particular business logic domain, or for domain modelling accuracy - or even just for your own implementation preferences.
                        &lt;/p&gt;
                    &lt;/li&gt;
                &lt;/ol&gt;

            &lt;/td&gt;
        &lt;/tr&gt;




        


        &lt;tr&gt;
            &lt;td colspan=&#34;3&#34;&gt;
                &lt;h3&gt;Implementing &lt;b&gt;one&lt;/b&gt; to &lt;b&gt;many&lt;/b&gt; relationships between class X and Y&lt;/h3&gt;
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;


        &lt;tr&gt;
            &lt;td&gt;#4.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 → *, directional, all methods on X&lt;/i&gt;&lt;/p&gt;


                &lt;pre&gt;
  Plural  API             No API
 _____________        ______________
|      X      |      |       Y      |
|_____________|      |______________|
|             |      |              |
|addY(y)      |1    *|              |
|getAllY()    | ⎯⎯⎯⎯⎯⎯→ |              |
|removeY(y)   |      |              |
|_____________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  def __init__(self):
    rm.enforce

  def addY(self, y):
    rm.add_rel(self, y, &#34;xtoy&#34;)

  def getAllY(self):
    rm.find_targets(self, &#34;xtoy&#34;)

  def removeY(self, y):
    rm.remove_rel(self, y, &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:  # no methods on rhs
  pass
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#5.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 ←→ *, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;

                &lt;pre&gt;
  Plural  API          Singular API
 _____________        ______________
|      X      |      |       Y      |
|_____________|      |______________|
|             |      |              |
|addY(y)      |1    *| setX(x)      |
|getAllY()    | ←⎯⎯⎯⎯→ | getX()       |
|removeY(y)   |      | clearX()     |
|_____________|      |______________|
        &lt;/pre&gt;
                &lt;ul&gt;
                    &lt;li&gt;X has the required plural API&lt;/li&gt;
                    &lt;li&gt;Y has the reciprocal singular API&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;
                    Since there are two API&#39;s, one on each class, this makes it a bidirectional relationship.
                &lt;/p&gt;
                &lt;p&gt;
                    However - there still remains a sense of
                    &lt;i&gt;directionality&lt;/i&gt; because the one to many is directional
                    &lt;i&gt;i.e.&lt;/i&gt; the the lhs. &#39;one&#39; side is the X and the rhs. &#39;many&#39; side is the Y, not the other way around.
                &lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  def __init__(self):
    rm.enforce(&#34;xtoy&#34;, &#34;onetomany&#34;, &#34;bidirectional&#34;)

  def addY(self, y):
    rm.add_rel(self, y, &#34;xtoy&#34;)

  def getAllY(self):
    rm.find_targets(self, &#34;xtoy&#34;)

  def removeY(self, y):
    rm.remove_rel(self, y, &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  # though bi, there is still a direction!
  def setX(self, x):
    rm.add_rel(x, self, &#34;xtoy&#34;)

  def getX(self):
    rm.find_target(self, &#34;xtoy&#34;)

  def clearX(self):
    rm.remove_rel(self, self.getX(), &#34;xtoy&#34;)
				&lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;






        &lt;tr&gt;
            &lt;td&gt;#5A.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;1 ←→ *, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;
                &lt;p&gt;Alternative implementation of scenario 5, using &#34;directional&#34; and a backpointer method&lt;/p&gt;
                &lt;pre&gt;
diagram as above
                &lt;/pre&gt;

            &lt;/td&gt;
            &lt;td&gt;
                &lt;pre&gt;
class X:
  def __init__(self):
    rm.enforce(&#34;xtoy&#34;, &#34;onetomany&#34;, &#34;directional&#34;)  # different to 5
    # uses &#39;directional&#39; not &#39;bidirectional&#39;

  def addY(self, y):
    rm.add_rel(self, y, &#34;xtoy&#34;)  # same as 5.

  def getAllY(self):
    rm.find_targets(self, &#34;xtoy&#34;)  # same as 5.

  def removeY(self, y):
    rm.remove_rel(self, y, &#34;xtoy&#34;)  # same as 5.
      &lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def setX(self, x):
    rm.add_rel(x, self, &#34;xtoy&#34;)  # same as 5.

  def getX(self):
    rm.find_source(self, &#34;xtoy&#34;)  # different to 5
    # uses &#39;find_source&#39; not &#39;find_target&#39;

  def clearX(self):
    rm.remove_rel(self.getX(), self, &#34;xtoy&#34;)  # different to 5
    # source and target params swapped
      &lt;/pre&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        


        &lt;tr&gt;
            &lt;td colspan=&#34;3&#34;&gt;
                &lt;h3&gt;Implementing &lt;b&gt;many&lt;/b&gt; to &lt;b&gt;one&lt;/b&gt; relationships between class X and Y&lt;/h3&gt;
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;


        &lt;tr&gt;
            &lt;td&gt;#6.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* → 1, directional, all methods on Y&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
    No API              Plural  API
 ______________        ______________
|     X        |      |       Y      |
|______________|      |______________|
|              |      |              |
|              |*    1|addX(x)       |
|              | ⎯⎯⎯⎯⎯⎯→ |getAllX()     |
|              |      |removeX(x)    |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (not tested)&lt;/p&gt;
                &lt;pre&gt;
class X:
  pass
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def addX(x) -&gt; None:
    rm.add_rel(x, this, &#34;xtoy&#34;)

  def getAllX() -&gt; List:
    return rm.find_sources(this, &#34;xtoy&#34;)

  def removeX(x) -&gt; None:
    rm.remove_rel(x, this, &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;p&gt;&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#7.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* ←→ 1, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;




                &lt;pre&gt;
  Singular API          Plural  API
 ______________        ______________
|     X        |      |       Y      |
|______________|      |______________|
|              |      |              |
|void  setY(y) |*    1|addX(x)       |
|Y     getY()  | ←⎯⎯⎯⎯→ |getAllX()     |
|void  clearY()|      |removeX(x)    |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (not tested)&lt;/p&gt;
                &lt;pre&gt;
class X:
  def setY(y) -&gt; None:
    rm.add_rel(this, y, &#34;xtoy&#34;)

  def getY() -&gt; Y:
    rm.find_target(this, &#34;xtoy&#34;)

  def clearY() -&gt; None:
    rm.remove_rel(this, getY(), &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;pre&gt;
class Y:
  def addX(x) -&gt; None:
    rm.add_rel(x, this, &#34;xtoy&#34;)

  def getAllX() -&gt; List:
    rm.find_sources(this, &#34;xtoy&#34;)

  def removeX(x) -&gt; None:
    rm.remove_rel(x, this, &#34;xtoy&#34;)
				&lt;/pre&gt;
                &lt;p&gt;&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        


        &lt;tr&gt;
            &lt;td colspan=&#34;3&#34;&gt;
                &lt;h3&gt;Implementing &lt;b&gt;many&lt;/b&gt; to &lt;b&gt;many&lt;/b&gt; relationships between class X and Y&lt;/h3&gt;
            &lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;


        &lt;tr&gt;
            &lt;td&gt;#8.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* → *, directional, all methods on X&lt;/i&gt;&lt;/p&gt;
                &lt;pre&gt;
  Plural  API              No API
 _____________        ______________
|      X      |      |       Y      |
|_____________|      |______________|
|             |      |              |
|addY(y)      |*    *|              |
|getAllY()    | ⎯⎯⎯⎯⎯⎯→ |              |
|removeY(y)   |      |              |
|_____________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (TODO, not tested)&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;




        &lt;tr&gt;
            &lt;td&gt;#9.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* → *, directional, all methods on Y&lt;/i&gt;&lt;/p&gt;

                &lt;pre&gt;
      No API            Plural  API
 ______________        ______________
|     X        |      |       Y      |
|______________|      |______________|
|              |      |              |
|              |*    *|addX(x)       |
|              | ⎯⎯⎯⎯⎯⎯→ |getAllX()     |
|              |      |removeX(x)    |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (TODO, not tested)&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;





        &lt;tr&gt;
            &lt;td&gt;#10.&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;&lt;i&gt;* ←→ *, bi-directional, methods on both X and Y&lt;/i&gt;&lt;/p&gt;

                &lt;pre&gt;
   Plural  API          Plural  API
 ______________        ______________
|     X        |      |       Y      |
|______________|      |______________|
|              |      |              |
| addY(y)      |*    *| addX(x)      |
| getAllY()    | ←⎯⎯⎯⎯→ | getAllX()    |
| removeY(y)   |      | removeX(x)   |
|______________|      |______________|
				&lt;/pre&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;DRAFT API (TODO, not tested)&lt;/p&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These scenarios are all unit tested in &lt;code&gt;tests/python/test_enforcing.py&lt;/code&gt; in the &lt;a href=&#34;https://github.com/abulka/relationship-manager&#34;&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;back-pointers&#34;&gt;Back pointers&lt;/h2&gt;
&lt;p&gt;One of the benefits of the relationship manager pattern is that &lt;em&gt;you don&amp;rsquo;t have to explicitly wire up and maintain back-pointers&lt;/em&gt;.  Once you add a pointer relationship, you get the back pointer relationship available, for free.  And once you delete the pointer relationship, the back-pointer relationship goes away automatically too.&lt;/p&gt;
&lt;p&gt;The following &lt;a href=&#34;http://www.atug.com/andypatterns/code/proxydecorator01.zip&#34;&gt;code&lt;/a&gt; is a good example of how the use of RM saves you from having to explicitly maintain backpointers. P.S. To run the code you also need the support files found &lt;a href=&#34;http://www.atug.com/downloads/pythonRmProof.zip&#34;&gt;here&lt;/a&gt;.  View the code below (requires the flash plugin) - showing an implementation of a Composite Pattern, with back pointer - or simply read the &lt;a href=&#34;http://www.atug.com/downloads/rm_annotation_by_ANDY_01.PDF&#34;&gt;pdf&lt;/a&gt; directly.&lt;/p&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/rm_annotation_by_ANDY_01.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Backpointers are pointers on the &amp;ldquo;target end&amp;rdquo; of a relationship, so that the target object knows who is pointing at it.  For example when a Customer places an Order, it might be convenient for any particular order instance to know which customer ordered it.  I think you can choose to conceive of the backpointer in a few different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as an extra, separate relationship or&lt;/li&gt;
&lt;li&gt;as part of the one bidirectional relationship or&lt;/li&gt;
&lt;li&gt;merely a convenience method in the implementation in the r.h.s. class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The easiest way of implementing this backpointer without using relationship manager is to follow the Martin Fowler refactoring technique - see Martin Fowler &amp;lsquo;Refactorings&amp;rsquo; p. 197 &amp;ldquo;Change Unidirectional Association to Bidirectional&amp;rdquo; - this will ensure you get the wiring correct.  In this refactoring, you decide which class is the master and which is the slave etc.  See the before and after python pdf below for an example of the correct wiring.&lt;/p&gt;
&lt;p&gt;The way of implementing a backpointer using relationship manager is simply to call the &lt;code&gt;rm.find_source(target=self)&lt;/code&gt; method.  Since a rm holds all relationships, it can answer lots of questions for free - just like SQL queries to a database.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bi-directional-relationships&#34;&gt;Bi-directional relationships&lt;/h2&gt;
&lt;p&gt;A bi-directional relationship between X and Y means both sides have pointers to each other.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/images/uml/content/patterns/uml/rm-bidirectionality.svg&#34; alt=&#34;svg your image&#34;&gt;&lt;/p&gt;
&lt;p&gt;or just&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/images/uml/content/patterns/uml/rm-bidirectionality2.svg&#34; alt=&#34;svg your image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Within this seemingly obvious idea are a myriad of nuances:&lt;/p&gt;
&lt;p&gt;We must distinguish between a relationship that in its domain meaning, goes both ways, and a relationship which goes one way only.  And furthermore, implementationally, you can have RM methods on one class only, on the other class only, or on both classes.  The meaning of the relationship and the implementation (methods to create and look up those relationships) are two different things!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As the diagram above shows, one bi-bidirectional relationship is arguably shorthand for two directional relationships.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact in the Python rm implementation, when you create a bi-directional enforcement rule (e.g. Scenario 3) with a call to &lt;code&gt;rm.enforce(&amp;ldquo;xy&amp;rdquo;, &amp;ldquo;onetoone&amp;rdquo;, &amp;ldquo;bidirectional&amp;rdquo;)&lt;/code&gt; you are actually causing rm to create &lt;i&gt;two&lt;/i&gt; relationship entries in the rm. This means you can reliably use a &lt;code&gt;rm.find_target(source=self)&lt;/code&gt; call from either side, knowing there is a relationship in both directions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The methods you implement on your classes to create and look up relationships can influence your perception of what is pointing to what.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you put an API (relationship manager methods) on both classes this might seem to imply that you are implementing bi-directionality - however this does &lt;em&gt;not mean&lt;/em&gt; that the &amp;ldquo;semantic relationship&amp;rdquo; points in both directions.  The meaning of the relationship is often in one direction only, and the existence of methods on both classes merely gives you a convenient way of querying the directional relationship that exists.&lt;/p&gt;
&lt;p&gt;A rm, like a database, allows you to &amp;lsquo;cheat&amp;rsquo; and find out who is pointing to a class even though that class has no actual pointers implementing &amp;lsquo;am pointed to by&amp;rsquo;. This is accomplished by using &lt;code&gt;rm.find_source(target=self)&lt;/code&gt;. But just because a rm let&amp;rsquo;s you find out this knowledge doesn&amp;rsquo;t mean there is a official modelling of this back-relationship in your domain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Back-pointer relationships are not the same thing as official, semantic relationships.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However you may still want to declare a bidirectional relationship for its semantic value in your particular business logic domain, or for domain modelling accuracy - or even just for your own implementation preferences.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bi-directional relationship (pair) can be implemented more efficiently by a single directional relationship together with the magic rm back-pointer lookup call &lt;code&gt;rm.find_source(target=self)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you create a directional enforcement rule (e.g. Scenario 3A) with a call to &lt;code&gt;rm.enforce(&amp;ldquo;xy&amp;rdquo;, &amp;ldquo;onetoone&amp;rdquo;, &amp;ldquo;directional&amp;rdquo;)&lt;/code&gt; or leave out this call altogether, you are causing rm to create &lt;i&gt;only&lt;/i&gt; the relationships that you ask for. Thus classes on the &amp;rsquo;target&amp;rsquo; side of a relationship cannot call &lt;code&gt;rm.find_target(source=self)&lt;/code&gt; to find out who is pointing to them. They can however, thanks to the back-pointer lookup magic of rm, call &lt;code&gt;rm.find_source(target=self)&lt;/code&gt; to derive this information.&lt;/p&gt;
&lt;p&gt;This means bidirectional relationships never actually need to be used or declared, 😲, since an implicit back-pointer (i.e. a back reference) is &lt;i&gt;always deducible&lt;/i&gt; using &lt;code&gt;rm.find_source()&lt;/code&gt;, when using a Relationship Manager! In fact a bidirectional relationship creates extra entries in the rm datastructure, and slightly more overhead in performance (maintaining both relationships e.g. in the case of creation and removal).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name your relationships with direction in mind&lt;/li&gt;
&lt;li&gt;If you choose to implement relationship related methods on both classes use the same relationship id on both sides.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The same relationship id should be used in both classes e.g. &lt;code&gt;&amp;quot;xtoy&amp;quot;&lt;/code&gt; (notice the sense of directionality is built into the name of the relationship!). Even though there is an API on both classes allowing each class to find the other class, does not turn the relationship semantics to be bi-directional from the point of view of domain modelling, but only in a convenient implementation sense. &lt;/p&gt;
&lt;p&gt;Some may frown on this ability of an implementation to cheat and betray the domain model. Perhaps a flag could be set in the rm to disallow use of the back-pointer lookup magic &lt;code&gt;rm.find_source(target=self)&lt;/code&gt; of rm,.&lt;/p&gt;
&lt;p&gt;In the following implementation of a one to many relationship between class X and class Y, notice the same relationship id &lt;code&gt;&amp;quot;xtoy&amp;quot;&lt;/code&gt; must be used in both classes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;X&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):        rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;enforce(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;onetoone&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;directional&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setY&lt;/span&gt;(self, y):         rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_rel(self, y, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getY&lt;/span&gt;(self):     &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;find_target(self, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;clearY&lt;/span&gt;(self):          rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;remove_rel(self, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getY(), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Y&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):        rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;enforce(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;onetoone&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;directional&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#6272a4&#34;&gt;# probably redundant&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setX&lt;/span&gt;(self, x):         rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_rel(x, self, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getX&lt;/span&gt;(self):     &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;find_source(self, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;clearX&lt;/span&gt;(self):          rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;remove_rel(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getX(), self, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xtoy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that both classes calling &lt;code&gt;rm.enforce&lt;/code&gt; is possibly redundant, since its telling the rm the same information - depending on the order of initialisation of your classes.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;python-example---observer-pattern&#34;&gt;Python Example - Observer pattern&lt;/h3&gt;
&lt;p&gt;Here is an example of hiding the use of Relationship Manager,
found in the examples folder as &lt;code&gt;relmgr/examples/observer.py&lt;/code&gt; - the
classic Subject/Observer pattern:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; relmgr &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; RelationshipManager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RelationshipManager()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Observer&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @property
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;subject&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;find_target(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @subject&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;subject&lt;/span&gt;(self, _subject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_rel(self, _subject)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;notify&lt;/span&gt;(self, subject, notification_type):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# implementations override this and do something&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Subject&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;notify_all&lt;/span&gt;(self, notification_type: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;str&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        observers &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;find_sources(self)  &lt;span style=&#34;color:#6272a4&#34;&gt;# all things pointing at me&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; o &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; observers:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Notify(self, notification_type)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;add_observer&lt;/span&gt;(self, observer):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_rel(observer, self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;remove_observer&lt;/span&gt;(self, observer):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;remove_rel(source&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;observer, target&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;self)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When using the Subject and Observer, you use their methods without realising their functionality has been implemented using rm.  See &lt;code&gt;tests/python/examples/test_observer.py&lt;/code&gt; in the &lt;a href=&#34;https://github.com/abulka/relationship-manager&#34;&gt;GitHub project&lt;/a&gt; for the unit tests for this code.&lt;/p&gt;
&lt;h3 id=&#34;c-example---modelling-person----order&#34;&gt;C# Example - modelling Person &amp;ndash;&amp;gt;* Order&lt;/h3&gt;
&lt;p&gt;Say you want to model a Person class which has one or more Orders.  The Order class needs to have a backpointer - back to the Person owning that order.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/PersonToOrderUsingRM001.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Instead of hand coding and reinventing techniques for doing all the AddOrder() methods and GetOrders() methods etc. using ArrayLists and whatever, we can do it using the relationship manager object instead, which turns out to be simpler and faster and less error prone. &lt;/p&gt;
&lt;p&gt;The RM (relationship manager) is implemented in this particular example as a static member of the base BO (business object) class.  Thus in this situation all business objects will be using the same relationship manager.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the use of Relationship Manager is hidden, and is a mere implementation detail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the c# code to implement the above UML. This code uses the v1 API documented in the Relationship Manager &lt;a href=&#34;https://github.com/abulka/relationship-manager&#34;&gt;GitHub project&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; System.Collections;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; RelationshipManager.Interfaces;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; RelationshipManager.Turbo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;namespace&lt;/span&gt; Example_Person_Order_Console_App
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; jane = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Person(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jane&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; order1 = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Order(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Boots&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; order2 = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Order(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Clothes&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            jane.AddOrder(order1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            jane.AddOrder(order2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;// test forward pointer wiring&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Console.WriteLine(jane + &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; has &amp;#34;&lt;/span&gt; + jane.GetOrders().Count + &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; orders&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;// test the backpointer wiring&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; order &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; jane.GetOrders())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Console.WriteLine(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;The person who ordered &amp;#34;&lt;/span&gt; + order + &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; is &amp;#34;&lt;/span&gt; + order.GetPerson());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Console.WriteLine(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Done!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;///   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// BO is the base Business Object class which holds a single static reference  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// to a relationship manager. This one relationship manager is  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// used for managing all the relationships between Business Objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// like Person and Order.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;///   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;BO&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// Base business object  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;protected&lt;/span&gt; RelationshipMgrTurbo rm = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; RelationshipMgrTurbo();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;///   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// Person class points to one or more orders.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// Implemented using a relationship manager rather   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// than via pointers and arraylists etc.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;///   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Person&lt;/span&gt; : BO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; Person()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                rm.EnforceRelationship(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;, Cardinality.OneToMany, Directionality.DirectionalWithBackPointer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; Person(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; ToString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Person: &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt; AddOrder(Order o)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                rm.AddRelationship(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, o, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt; RemoveOrder(Order o)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                rm.RemoveRelationship(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, o, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; List&amp;lt;Order&amp;gt; GetOrders()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                IList list = rm.FindObjectsPointedToByMe(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#6272a4&#34;&gt;// cast from list of &amp;#39;object&amp;#39; to list of &amp;#39;Person&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; result = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; List&amp;lt;Order&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; order &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    result.Add((Order)order);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#6272a4&#34;&gt;// attempts at other simpler ways to cast a whole list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#6272a4&#34;&gt;//result = list as List&amp;lt;Order&amp;gt;;  // crash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#6272a4&#34;&gt;//result = new List&amp;lt;Order&amp;gt;(list); // syntax error?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;///   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// Order class points back to the person holding the order.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// Implemented using a relationship manager rather&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/// than via pointers and arraylists etc.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;///  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Order&lt;/span&gt; : BO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; description;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; Order(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; description)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.description = description;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; ToString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Order Description: &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.description;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt; SetPerson(Person p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#6272a4&#34;&gt;// though mapping is bidirectional, there is still a primary relationship direction!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                rm.AddRelationship(p, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; Person GetPerson()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#6272a4&#34;&gt;// cast from &amp;#39;object&amp;#39; to &amp;#39;Person&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (Person)rm.FindObjectPointingToMe(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt; ClearPerson()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                rm.RemoveRelationship(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.GetPerson(), &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p-&amp;gt;o&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Person: Jane has 2 orders
The person who ordered Order Description: Clothes is Person: Jane
The person who ordered Order Description: Boots is Person: Jane
Done!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;c-future-directions&#34;&gt;C# Future Directions&lt;/h2&gt;
&lt;p&gt;A generics version of relationship manager would be cool - that way no casting would be required. Presently all calls to relationship manager return objects or lists of objects - which you have to cast to the specific type you actually have stored. You can see this casting in the above example.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python Implementation &lt;a href=&#34;https://github.com/abulka/relationship-manager&#34;&gt;README&lt;/a&gt; and &lt;a href=&#34;https://github.com/abulka/relationship-manager&#34;&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full Python Relationship Manager &lt;a href=&#34;https://abulka.github.io/relationship-manager/relmgr/index.html&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=44&#34;&gt;original andypatterns page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Official &lt;a href=&#34;https://abulka.github.io/patterns/relationship-manager/&#34;&gt;Relationship Manager Pattern&lt;/a&gt; page incl. academic paper by Andy Bulka (this page).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Patterns: MGM Pattern</title>
      <link>https://abulka.github.io/patterns/mgm-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/patterns/mgm-pattern/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/33971232953329bg-pods1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article is twenty years old - its ideas are now simplified and clarified at &lt;a href=&#34;https://abulka.github.io/patterns/mvca-pattern/&#34;&gt;MVCA pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://abulka.github.io/todomvc-oo/&#34;&gt;live demo&lt;/a&gt; running in a browser.&lt;/p&gt;
&lt;p&gt;Tip for understanding this article:
This is arguably the traditional MVC pattern with terminology tweaked and clarified, and updated for &amp;lsquo;modern&amp;rsquo; times where Views are no longer manually drawn but are instead off the shelf GUI widgets or DOM elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mediator == Controller&lt;/li&gt;
&lt;li&gt;GUI == View&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-pattern&#34;&gt;The Pattern&lt;/h2&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/andybulkamodelguimediatorpattern.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Download as &lt;a href=&#34;https://abulka.github.io/files/pdfs/AndyBulkaModelGuiMediatorPattern.pdf&#34;&gt;pdf&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;
&lt;p&gt;Comments now disabled due to spam.&lt;/p&gt;
&lt;h3 id=&#34;posted-onjan-18th-2009&#34;&gt;Posted on Jan 18th, 2009&lt;/h3&gt;
&lt;p&gt;Hi Andy,&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve read your article about the MGM Patterns, it&amp;rsquo;s a great pattern.&lt;br&gt;
However, I have a question, could you please show me.&lt;/p&gt;
&lt;p&gt;Let say I have a Textbox (GUI), a business object with only 1 property Text,&lt;br&gt;
a mediator-view as your pattern defined.&lt;/p&gt;
&lt;p&gt;When changing Business.Text, this procedure is called:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;procedure setText(Value: String);  
begin  
  FText := Value;  
  NotifyChanges; // \*\*\* notify mediator to change Editbox content  
end;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;therefore, mediator is notified:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;procedure BusinessChanged;  
begin  
  FGUI.Text := FBusiness.Text; // this makes Editbox OnChange fires  
end;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OnChange event of Editbox:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;procedure Edit1Change();  
begin  
Mediator := FindMediator(Self)  
Mediator.Business.Text := TEdit(Self).Text;  
{ \*\*\* This line would call Business.setText and make an infinity loop }  
end;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only method I&amp;rsquo;ve thought of is let the Mediator modify FText field of&lt;br&gt;
Business object. But in this way, Busniess and Mediator have to be in a same&lt;br&gt;
unit. Is there another way to solve this problem?&lt;/p&gt;
&lt;p&gt;Thanks for your sharing!&lt;br&gt;
Karr. C.&lt;/p&gt;
&lt;h3 id=&#34;posted-byandy-onjan-18th-2009&#34;&gt;Posted by Andy on Jan 18th, 2009&lt;/h3&gt;
&lt;p&gt;Thanks for your interest in the MGM pattern. Your assumption in the above code is that the Editbox OnChange fires when you programatically set the FGUI.Text, which would cause the event sequence&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gui changes -&amp;gt; mgm notified -&amp;gt; changes model -&amp;gt;  
model notifies mgm -&amp;gt; mgm modifies gui -&amp;gt; gui changes  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and so on, infinitely!! See your lines marked *** highlighted lines above.&lt;/p&gt;
&lt;p&gt;However the Editbox OnChange fires only seems to fire when the text is altered by the user in the gui. It does not fire when the edit1.text is changed programatically. So there is no loop.&lt;/p&gt;
&lt;p&gt;I tried it in Delphi 6. Here is a sample delphi app that proves it.&lt;br&gt;
&lt;a href=&#34;http://www.atug.com/downloads/mgmquickproof01.zip&#34;&gt;http://www.atug.com/downloads/mgmquickproof01.zip&lt;/a&gt;&lt;br&gt;
It has a cheaper form of mgm which I just whipped up, in order to demonstrate the point.&lt;/p&gt;
&lt;p&gt;P.S. If the event HAD fired, you could&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;temporarily disable the event by rewiring the event handler to Nil before writing to it programatically, then restoring the event handler again (yuk, but possible. You often have to do this when using mgm with treeviews.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provide a way of setting the model data which does not trigger a notification. Make the private data public. Again, yuk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;hellip; anyway thankfully you don&amp;rsquo;t need to do either of these things since Editbox OnChange does not fire when the edit1.text is changed programatically&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;br&gt;
-Andy Bulka&lt;/p&gt;
&lt;h3 id=&#34;posted-by-anononjan-21st-2009&#34;&gt;Posted by Anon on Jan 21st, 2009&lt;/h3&gt;
&lt;p&gt;Here is a &lt;a href=&#34;http://www.c-sharpcorner.com/UploadFile/shivprasadk/1246712242008074334AM/12467.aspx&#34;&gt;nice article&lt;/a&gt; on MVP pattern and the differences to MVC.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.andypatterns.com/index.php?cID=46&#34;&gt;Old link&lt;/a&gt; on andypatterns.com&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Patterns: MVC-App Architectural Pattern</title>
      <link>https://abulka.github.io/patterns/mvca-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/patterns/mvca-pattern/</guid>
      <description>
        
        
        &lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article describes the &amp;ldquo;MVC-App Architectural Pattern&amp;rdquo; which you can use to design your software applications, when you need to support a GUI.  It is not a framework, it is a small set of principles which let you build sane, modular GUIs in any language, using any off the shelf UI components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the original, deprecated, MGM pattern which initially inspired this &amp;ldquo;MVC-App Pattern&amp;rdquo; pattern, see &lt;a href=&#34;https://abulka.github.io/patterns/mgm-pattern/&#34;&gt;MGM pattern&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;todomvc-oo&#34;&gt;TodoMVC-OO&lt;/h2&gt;
&lt;p&gt;This is the classic Javascript &lt;a href=&#34;https://github.com/tastejs/todomvc&#34;&gt;TodoMVC app&lt;/a&gt; implemented &lt;strong&gt;without a framework&lt;/strong&gt; 😄, simply using plain Object Oriented programming + a traditional MVC design pattern.&lt;/p&gt;
&lt;p&gt;Distinct, mediating &lt;code&gt;Controller&lt;/code&gt; classes are the key to this implementation.&lt;/p&gt;
&lt;img src=&#34;https://github.com/tastejs/todomvc-app-css/raw/master/screenshot.png&#34; width=&#34;500&#34;&gt;
&lt;p&gt;Running demo &lt;a href=&#34;https://abulka.github.io/todomvc-oo/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mvca-architectural-pattern&#34;&gt;MVCA Architectural Pattern&lt;/h2&gt;
&lt;p&gt;This project fully implements the TodoMVC specification. It is implemented without a framework, using plain Object Oriented programming + the &lt;strong&gt;MVCA&lt;/strong&gt; architectural design pattern:&lt;/p&gt;
&lt;p&gt;Whilst the MVC (Model View Controller) pattern is commonly and glowingly referred to, implementations can vary widely. Most documentation on MVC, including the official &lt;a href=&#34;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;wikipedia article&lt;/a&gt; is vague on definitions and details.  This TodoMVC-OO project uses the MVCA pattern (formerly the &lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern) which is a clear and unambiguous interpretation of MVC, with the following key ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;View&lt;/strong&gt; means a modern GUI framework, and therefore is usually already available to be used by the programmer.&lt;/li&gt;
&lt;li&gt;One or more &lt;strong&gt;Controllers&lt;/strong&gt; mediate between the View and the rest of the Application, listening for GUI events. Nobody else knows about the View.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Model&lt;/strong&gt; is traditional data, may contain some business logic, and may broadcast events when its attributes change.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Application&lt;/strong&gt; owns the model(s), holds view state and contains some business logic methods.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Eventing&lt;/strong&gt; system is needed, traditionally Observer pattern but the stronger decoupling and the proper event objects of the Publisher-Subscriber pattern is preferred.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus MVCA simply means &amp;ldquo;&lt;strong&gt;M&lt;/strong&gt;odel &lt;strong&gt;V&lt;/strong&gt;iew &lt;strong&gt;C&lt;/strong&gt;ontroller &lt;strong&gt;A&lt;/strong&gt;pplication&amp;rdquo; - all four roles are necessary to any implementation.&lt;/p&gt;
&lt;!-- ![MVCA Architecture](https://github.com/abulka/todomvc-oo/raw/master/out/docs_other/plantuml/mvca-architecture-v2.svg?sanitize=true) 
    this version doesn&#39;t render the internal images (which are base64 encoded) due to &#34;because it violates the following Content Security Policy directive:...&#34;
    but serving the same image via github.io works ok.
--&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/todomvc-oo/images/mvca-architecture-v2.svg?sanitize=true&#34; alt=&#34;MVCA Architecture&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The above diagram was generated semi-automatically from Javascript source code residing in GitHub using &lt;a href=&#34;www.gituml.com&#34;&gt;GitUML&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;a href=&#34;https://abulka.github.io/todomvc-oo/images/mvca-architecture-v2.svg?sanitize=true&#34;&gt;here&lt;/a&gt; for more diagram detail as a .svg and the ability to zoom. &lt;/li&gt;
&lt;li&gt;View this actual &lt;a href=&#34;https://www.gituml.com/viewz/181&#34;&gt;diagram 181&lt;/a&gt; on GitUML.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvca-in-detail&#34;&gt;MVCA In Detail&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s go through the four parts of the MVCA pattern, which is precisely adhered to by this TodoMVC-OO implementation. Actually there is a fifth important part - the eventing system - which glues it all together - let&amp;rsquo;s look at the Model first.&lt;/p&gt;
&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;Model&lt;/strong&gt; is traditional, may contain some business logic, and may broadcast events when its attributes change.&lt;/p&gt;
&lt;p&gt;By traditional, I mean the Model does not know about anything else except perhaps other models. Its the core model of your data, the domain of the what the application is all about. In the case of the Todo application, it is a collection of Todo items, which can be marked completed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; TodoItem {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(title, id, completed) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; title &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; title;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._completed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; completed &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; completed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; util.uuid() &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; id;  &lt;span style=&#34;color:#6272a4&#34;&gt;// no getter/setter needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get title() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._title;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set title(v) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; v;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.dirty()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get completed() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._completed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set completed(v) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._completed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; v;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.dirty()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get as_dict() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            id&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.id,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.title,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            completed&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.completed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        notify_all(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;deleted todoitem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dirty() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        notify_all(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;modified todoitem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, {during_load&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Model is usually broken into many smaller interconnected models in an attempt to reflect the real world domain being implemented as software. The Model can be implemented as mere objects in memory or a full-fledged database model, or a &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt; mapping between the two.  In our case, we have a pure memory model, which gets persisted into local browser storage as JSON.&lt;/p&gt;
&lt;p&gt;You will find that some &amp;lsquo;model&amp;rsquo; concepts are more about how the information is presented in the GUI, thus I recommend these are kept as attributes of the Application class, and referred to as the &lt;em&gt;view state&lt;/em&gt; or &lt;em&gt;view model&lt;/em&gt;. The attribute &lt;code&gt;filter&lt;/code&gt; is an example of such view state.  The Application class can also hold collections of models which is what we do in this project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Application {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(config) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.todos &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []  &lt;span style=&#34;color:#6272a4&#34;&gt;// model collection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.filter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// view model, options are: &amp;#39;all&amp;#39;, &amp;#39;active&amp;#39;, &amp;#39;completed&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The model can be fat or thin - a fat model will have more business logic in the model. A thin model will most business or application logic in the Application class, treating the model as just data structures.&lt;/p&gt;
&lt;p&gt;Finally, the Model needs to participate in the internal eventing system. Whenever an attribute changes it should send out a notification event - this is why most attributes of our &lt;code&gt;TodoItem&lt;/code&gt; class are accessed via getter and setter methods. For example setting &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;completed&lt;/code&gt; will trigger an internal event to whoever may be listening. This internal eventing mechanism is how Controllers know to update the GUI with updated model information.&lt;/p&gt;
&lt;h3 id=&#34;view&#34;&gt;View&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;View&lt;/strong&gt; means a modern GUI framework, and as such is already available to be used by the programmer.
In our case, our modern GUI framework is the browser DOM which you can build in HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;toggle-all&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;toggle-all&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then Controllers use the GUI native eventing system to listen for interesting events&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.gui.$toggle_all.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;change&amp;#39;&lt;/span&gt;, handler)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;
&lt;p&gt;The Controller is the most interesting aspect of MVC.&lt;/p&gt;
&lt;p&gt;In many software designs, the Controller isn&amp;rsquo;t necessarily a single thing. A bunch of stray GUI event handler functions are in reality, part of the &amp;lsquo;controller role&amp;rsquo;. Code that copies data from the model into the GUI/DOM is also part of the Controller role.
I feel the challenge of GUI architectures is to tame the role of Controller into some semblance of coherance and symmetric organisation. Which is why MVCA prescribes creating Controller classes.&lt;/p&gt;
&lt;p&gt;In TodoMVC-OO we have a Controller class &lt;code&gt;ControllerTodoItem&lt;/code&gt; and instantiate one per TodoItem model instance. That&amp;rsquo;s arguably a lot of controller instances, but this approach allows fine grained updating of the DOM. In contrast, the Jquery version of TodoMVC rebuilds the entire todo DOM on each refresh - something that might become inefficient for non-toy apps.&lt;/p&gt;
&lt;p&gt;In TodoMVC-OO we have a Controller class &lt;code&gt;ControllerHeader&lt;/code&gt; for looking after the header part of the GUI and &lt;code&gt;ControllerFooter&lt;/code&gt; for looking after the footer area, which is where the &lt;code&gt;filter&lt;/code&gt; buttons are and the count of uncompleted todo items is displayed. The number of Controllers you create is up to you: one Controller per GUI element for fine grained updates, a more relaxed approach of one Controller per related group of GUI elements (my preference) or arguably even one Controller for all GUI elements! I go into more academic detail on this topic in my &lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern paper.&lt;/p&gt;
&lt;p&gt;By clearly defining what a mediating Controller is, and organising our app into different sensible controllers, we tame our design and prevent it from turning into spaghetti.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View events &lt;em&gt;only&lt;/em&gt; talk to Controllers:
&lt;ul&gt;
&lt;li&gt;View events (&amp;lsquo;gui events&amp;rsquo; e.g. via &lt;code&gt;.on(&#39;click&#39;, ...)&lt;/code&gt;) go to one or more Controllers.&lt;/li&gt;
&lt;li&gt;Controllers update the View, usually in reponse to an &amp;lsquo;internal event&amp;rsquo; notification.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Controller talks to the rest of the system:
&lt;ul&gt;
&lt;li&gt;Accesses App view state.&lt;/li&gt;
&lt;li&gt;Calls App business logic methods.&lt;/li&gt;
&lt;li&gt;Modifies the Model directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Controller listens for &amp;lsquo;internal events&amp;rsquo; broadcast from Model &amp;amp; App.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whilst that may seem like a lot to understand, its basically saying Controllers talk to the GUI - nobody else does. Controllers then call into the rest of the system to get things done&lt;/p&gt;
&lt;p&gt;Importantly, we must resist putting business logic into the Controller, simply let the controller call the Application to do what needs to be done. The Controller should do the minimal possible work, mediating and translating between the View and the rest of the system (the App + Model).&lt;/p&gt;
&lt;h3 id=&#34;application&#34;&gt;Application&lt;/h3&gt;
&lt;p&gt;The role of the Application is also important and often overlooked/undocumented. The Application owns the Model, and looks after persisting it. The Application can listen for internal Model events.&lt;/p&gt;
&lt;p&gt;Whilst it is fine to wire Controllers directly to model instances, you will also need the Application to hold &amp;ldquo;view state&amp;rdquo; e.g. like the state of the active &amp;ldquo;filter&amp;rdquo; in this Todo application.  The Application is a centralised class, a kind of hub - to hold higher level business logic and more complex model manipulations. The Application class&amp;rsquo;s functionality can of course be composed of smaller pieces as software grows more complex but a class called &lt;code&gt;Application&lt;/code&gt; should always still exist.&lt;/p&gt;
&lt;h3 id=&#34;eventing-system&#34;&gt;Eventing System&lt;/h3&gt;
&lt;p&gt;Eventing is an important consideration in decoupling models from controllers, and to facilitate abstract communication between objects.&lt;/p&gt;
&lt;p&gt;Two eventing systems should be distinguished:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GUI native&lt;/strong&gt;: The native eventing system of the GUI Framework e.g. DOM &lt;code&gt;.on(&#39;click&#39;, ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal&lt;/strong&gt;: Your choice of an application system wide eventing system e.g. Publish-Subscribe e.g. &lt;code&gt;document.addEventListener(&amp;quot;hello&amp;quot;, (event) =&amp;gt; { ... })&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both eventing systems are used in the TodoMVC-OO implementation. As you can see in the diagram above, DOM eventing reaches the Controllers, but no further. The remaining eventing is internal.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/abulka/lcodemaps&#34;&gt;Literate Code Map&lt;/a&gt; of the event flow of TodoMVC-OO. Events are reified as coloured objects, each different event gets a different colour.
&lt;img src=&#34;https://raw.githubusercontent.com/abulka/todomvc-oo/master/out/docs_other/plantuml/todomvc-oo-event-flow-gituml-134.png&#34; alt=&#34;todomvc event flow&#34;&gt;
&lt;em&gt;TodoMVC-OO event flow.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The above diagram was generated semi-automatically from Javascript source code residing in GitHub using &lt;a href=&#34;www.gituml.com&#34;&gt;GitUML&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;a href=&#34;https://abulka.github.io/todomvc-oo/images/todomvc-oo-event-flow-gituml-134.svg&#34;&gt;here&lt;/a&gt; for more diagram detail as a .svg and the ability to zoom. &lt;/li&gt;
&lt;li&gt;View this actual &lt;a href=&#34;https://www.gituml.com/viewz/134&#34;&gt;diagram 134&lt;/a&gt; on GitUML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The eventing pattern depicted here is &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;Publisher-Subscriber&lt;/a&gt; where real event objects are &amp;lsquo;broadcast&amp;rsquo; into the ether/event bus/system/whatever - allowing any code in the system to subscribe and respond - the point is, the code emitting the event does not have references to receiver object/methods.&lt;/p&gt;
&lt;p&gt;The Javascript built in Publisher-Subscriber eventing approach is more flexible and powerful than the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;Observer&lt;/a&gt; pattern since the Observer pattern &lt;em&gt;requires observers to know about&lt;/em&gt; and subscribe to Subject objects, which is not always possible or convenient. More dicussion on the differences can be found &lt;a href=&#34;https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c&#34;&gt;in this article&lt;/a&gt; and on &lt;a href=&#34;https://stackoverflow.com/questions/6439512/difference-between-observer-pattern-and-event-driven-approach&#34;&gt;Stackoverflow&lt;/a&gt;. Thus we use Publisher-Subscriber eventing (event name → object method) rather than the traditional Observer pattern (object → object) approach.&lt;/p&gt;
&lt;p&gt;I used to be a fan of the traditional Observer pattern but in my later years find the Publisher-Subscriber pattern to be simpler and more powerful - plus Publisher-Subscriber is built into Javascript you simply &lt;code&gt;document.addEventListener(&amp;quot;hello&amp;quot;, (event) =&amp;gt; { ... })&lt;/code&gt; to listen and &lt;code&gt;document.dispatchEvent(new CustomEvent(event_name, { detail: {from: from, data: data } }))&lt;/code&gt; to notify all.&lt;/p&gt;
&lt;p&gt;The Javascript built in Publisher-Subscriber eventing system is used as the internal eventing system of this TodoMVC-OO implementation.&lt;/p&gt;
&lt;h2 id=&#34;application-bootstrapping&#34;&gt;Application Bootstrapping&lt;/h2&gt;
&lt;p&gt;To get things running, some bootstrapping code will create an instance of the Application which in turn creates all the Controllers and loads the Model.
The bootstrapping in TodoMVC-OO is done in &lt;code&gt;app.js&lt;/code&gt; which creates an instance of Application which is defined in &lt;code&gt;application.js&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; config &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {...}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Application(config)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that a &lt;code&gt;config&lt;/code&gt; object with a list of callback methods is passed into the Application.&lt;/p&gt;
&lt;p&gt;Giving the Application class knowledge of individual Controller classes and all the GUI view elements they need is arguably contaminating the Application class with too much GUI view and Controller knowledge.&lt;/p&gt;
&lt;p&gt;The solution I use is to pass the Application a &lt;code&gt;config&lt;/code&gt; object which contains a bunch of callbacks. Each callback function will magically create a Controller instance, wired to look after its GUI elements. Each callback function hides, within itself, references to the DOM - which we don&amp;rsquo;t want the Application to have. In this way, the bootstrapping code and the Controller code are the only parts of the architecture that know about the View specifics (which we want to restrict).&lt;/p&gt;
&lt;p&gt;Thus whenever the Application needs to instantiate a Controller (e.g. each time a TodoItem is created) it calls a &lt;code&gt;config&lt;/code&gt; callback function.
Another example is during bootup - some permanent Controllers need to be created, like the Controller looking after the header area, so the Application calls
&lt;code&gt;this.callback_config.cb_header(this)&lt;/code&gt; which creates an instance of the &lt;code&gt;ControllerHeader&lt;/code&gt; wired to &lt;code&gt;$(&#39;.new-todo&#39;)&lt;/code&gt; and &lt;code&gt;$(&#39;.toggle-all&#39;)&lt;/code&gt;.  The Application only needs to know the callback function names and thus remains pure.&lt;/p&gt;
&lt;p&gt;Notice in the &lt;code&gt;config&lt;/code&gt; object below that each callback refers to the view through JQuery syntax e.g. &lt;code&gt;$(&#39;ul.todo-list&#39;)&lt;/code&gt; and passes these references into the contructor of the Controller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; config &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Callback to create the todo item controllers - are added as needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cb_todo&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (app, todo) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ControllerTodoItem(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            app,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            todo,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            { $todolist&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ul.todo-list&amp;#39;&lt;/span&gt;) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Callbacks to create the permanent controllers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cb_header&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (app) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ControllerHeader(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            app,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                $input&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.new-todo&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                $toggle_all&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.toggle-all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cb_footer&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (app) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ControllerFooter(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            app,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                $footer&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;footer&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                $footer_interactive_area&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.footer&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course the Controller itself will have further references to View DOM elements, however these references should be based on searching &lt;em&gt;within&lt;/em&gt; the outer DOM element passed to the Controller - thus achieving some degree of &amp;lsquo;component-isation&amp;rsquo; and re-use. For example the same Controller could be used to look after different DOM elements with different element id&amp;rsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;todomvc-oo-conclusion&#34;&gt;TodoMVC-OO Conclusion&lt;/h2&gt;
&lt;p&gt;This project fully implements the TodoMVC specification and is implemented without a framework, using plain Object Oriented programming + MVCA architectural design pattern, as described above.&lt;/p&gt;
&lt;p&gt;Running demo &lt;a href=&#34;https://abulka.github.io/todomvc-oo/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;improvements&#34;&gt;Improvements&lt;/h3&gt;
&lt;p&gt;In this implementation, I notice that footer renders too early rather than right at the end of the initial render. Its just a subtle flash of the footer when the page is initially redrawn, but I&amp;rsquo;d like to correct this.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Official &lt;a href=&#34;http://todomvc.com/&#34;&gt;TodoMVC project&lt;/a&gt; with other TodoMVC implementations (e.g. Vue, Angular, React etc.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abulka/todomvc-ecs&#34;&gt;TodoMVC-ECS&lt;/a&gt; - My &amp;ldquo;Entity Component System&amp;rdquo; implementation of TodoMVC&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://abulka.github.io/gui-showdown/main_mvca.html&#34;&gt;MVCA&lt;/a&gt; another example of an app implemented using the MVCA architecture (Javascript, open source)&lt;/li&gt;
&lt;li&gt;Andy&amp;rsquo;s &lt;a href=&#34;https://abulka.github.io/gui-showdown&#34;&gt;GUI Showdown&lt;/a&gt; The same application, implemented in various ways - which is better, cleaner, more understandable etc. (Javascript, open source)
&lt;ul&gt;
&lt;li&gt;OO&lt;/li&gt;
&lt;li&gt;MVCA&lt;/li&gt;
&lt;li&gt;ECS&lt;/li&gt;
&lt;li&gt;PLAIN&lt;/li&gt;
&lt;li&gt;VUE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern (older version of MVCA, presented at a Patterns Conference)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- - [Used by](https://github.com/abulka/todomvc-oo) --&gt;
&lt;!-- - [Website](https://www.gituml.com/editz/134) --&gt;
&lt;!-- - [Blog](https://www.gituml.com/editz/136) --&gt;
&lt;!-- - [FAQ](https://www.gituml.com/editz/136) --&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m recently loving &lt;a href=&#34;https://flet.dev/docs/&#34;&gt;Flet&lt;/a&gt; which lets you build Flutter GUIs using Python.  However I miss the reactivity of Vuejs and even Flutter. So I put together a quick solution - instead of imperitively allowing the Flet UI control event callbacks e.g. on_click, to update the UI directly, we update a reactive model, which in turn updates the Flet UI.  A full example is at &lt;a href=&#34;https://github.com/abulka/freactive-python&#34;&gt;https://github.com/abulka/freactive-python&lt;/a&gt;.  It shows how such a simplified architecture can (even without the Observer classes) can achieve similar functionality to the TodoMVC-OO architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;diagramming&#34;&gt;Diagramming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gituml.com&#34;&gt;GitUML&lt;/a&gt; diagramming used for this project&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abulka/lcodemaps&#34;&gt;Literate Code Mapping&lt;/a&gt; diagramming used for this project&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- - [Medium article]()  (coming in Apr 2020) --&gt;
&lt;!-- ### Support

- [Stack Overflow](http://stackoverflow.com/questions/tagged/MVCA)
- [Twitter](http://twitter.com/unjazz) --&gt;
&lt;h2 id=&#34;credit&#34;&gt;Credit&lt;/h2&gt;
&lt;p&gt;Created by &lt;a href=&#34;http://andypatterns.com&#34;&gt;Andy Bulka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: This project is not not officially part of the &lt;a href=&#34;http://todomvc.com/&#34;&gt;TodoMVC project&lt;/a&gt; - as it is does not use a MVC framework library, nor does it meet the criterion of &amp;ldquo;having a community&amp;rdquo; around it.  On the other hand, perhaps a pattern is equivalent enough to a framework - after all there is a plain Javascript TodoMVC implementation officially available using ad-hoc techniques. Plus, there has been a &amp;ldquo;community&amp;rdquo; around the Object Oriented MVC pattern for decades now - hasn&amp;rsquo;t there? 😉&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Patterns: Transformation Interface Design Pattern</title>
      <link>https://abulka.github.io/patterns/transformation-interface/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/patterns/transformation-interface/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/71241233039311bgDSC1068.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back again. A pair of methods on some class e.g. load/save are often the signature of a Transformation Interface.&lt;/p&gt;
&lt;h2 id=&#34;the-pattern&#34;&gt;The Pattern&lt;/h2&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/andybulkatransformationinterfacepattern.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Download as &lt;a href=&#34;https://abulka.github.io/files/pdfs/AndyBulkaTransformationInterfacePattern.pdf&#34;&gt;pdf&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Refactoring to PureMVC</title>
      <link>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2009/04/01/refactoring-to-puremvc/</guid>
      <description>
        
        
        &lt;p&gt;Let&amp;rsquo;s look at how to refactor an existing architecture to the PureMVC architecture. Your application requires that you display &amp;lsquo;model&amp;rsquo; data in some sort of UI &amp;lsquo;view&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvc20921233037638bgDSC9636.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;h3 id=&#34;mvc-architectural-pattern&#34;&gt;MVC Architectural Pattern&lt;/h3&gt;
&lt;p&gt;I have long been fascinated by the MVC (Model View Controller) architectural pattern, first conceived in the 1960&amp;rsquo;s. What it promises, to those who can fathom its mysteries, is an orderly way of organising your application architecture. You define a de-coupled domain/business model that is oblivious to any GUI that might be displaying it. A mediating controller class usually looks after the dirty details of moving data between the model and GUI. You can even have multiple GUI representations of your single model e.g. a pie chart view and a bar chart view simultaneously displaying the same information out of the model.&lt;/p&gt;
&lt;p&gt;There are many variants of MVC, and people use different terminology to mean the same thing, and conversely people use the same terminology to mean different things e.g. the view could be the GUI or it could be the mediating class looking after the GUI, which means it could actually end up meaning the controller&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;model-gui-mediator&#34;&gt;Model Gui Mediator&lt;/h3&gt;
&lt;p&gt;Some History.&lt;/p&gt;
&lt;p&gt;I once wrote up a pattern called
&lt;a href=&#34;https://abulka.github.io/patterns/mvca-pattern/&#34;&gt;MGM (Model Gui Mediator)&lt;/a&gt;
which describes a version of MVC that I thought made sense in today&amp;rsquo;s modern programming age. Today, GUI views were usually comprised of sophisticated controls/widgets rather than laboriously handcrafted graphic code that needed custom controller code to handle the intricate details of interacting with the view/GUI. Most of that low level controller interaction is now built in to the off the shelf widgets/controls.&lt;/p&gt;
&lt;p&gt;The controller is now just a mediator between model and view – hence the “M” in MGM (Model-Gui-Mediator). You might prefer to think of the mediator as the controller, so the pattern could well have been called MGC (Model-Gui-Controller). Many modern variants of MVC e.g. MVP (Model View Presenter) and PAC (Presentation Abstraction Controller) and others probably fit into the basic idea of MGM.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussMGM.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The behaviour of the MGM architecture is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussMGM_UMLsequence.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MGM pattern sequence diagram.&lt;br&gt;
M=Model (Data class) G=Gui (Form with an edit control on it) M=Mediator (Controller class)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What we have illustrated above are two use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the first the user types some text into an edit field on a form, which causes the model to change – the model broadcasts the change and the GUI is updated (watch out for infinite loops here of course, which can be avoided by the gui update not triggering another change event).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second use case is the model changing for some reason (e.g. being loaded from a file or some other part of the system altering the data) and the model broadcasting the change – again the Controller is observing and intercepts the broadcast and updates the GUI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is interesting about MGM is that it shows how simple the MVC pattern really can be, when understood in terms of today&amp;rsquo;s modern GUI components. It also serves as a way of contrasting what PureMVC is offering. Read on.&lt;/p&gt;
&lt;h3 id=&#34;puremvc&#34;&gt;PureMVC&lt;/h3&gt;
&lt;p&gt;Along comes PureMVC.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve since (2008-2009) become quite interested in the &lt;a href=&#34;http://www.puremvc.org&#34;&gt;PureMVC&lt;/a&gt; framework because it adds a few things that were missing from MGM.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussCONCEPT1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PureMVC Conceptual Architecture&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Firstly PureMVC explicitly adds command classes – rather than just burying behaviour in controllers/mediators, we have an official way of organising behaviour. Sure, in MVC and MGM, any controller is free to delegate and invoke command classes to perform behaviour in a more organised way - but in PureMVC the details of this are a little more spelled out.&lt;/p&gt;
&lt;p&gt;Secondly PureMVC adds service location, so that you end up with a nice de-coupled design – events are raised and anyone can register interest in an event/message. Thus the whole architecture becomes a lot more pluggable, flexible and neat.&lt;/p&gt;
&lt;p&gt;Thirdly I believe PureMVC addresses scalability – for example it tells you exactly how to add multiple mediators to the system. Multiple commands and data proxies are also supported. You simply register all these classes and specify what noification messages are of interest to each of them.&lt;/p&gt;
&lt;h2 id=&#34;rules-of-puremvc&#34;&gt;Rules of PureMVC&lt;/h2&gt;
&lt;p&gt;The model notifies, but doesn&amp;rsquo;t listen and ultimately knows nothing about anything else in the system. Mediators notify and listen to messages. Commands are invoked (cmd.execute()) automatically by certain messages and they send out messages if they want to.&lt;/p&gt;
&lt;p&gt;The facade is the communication hub.&lt;/p&gt;
&lt;p&gt;Mediators look after gui elements, and this forms the view. Commands forms the controller. Proxies wrap model elements and this forms the model.  &lt;em&gt;Note that in the above diagram, there is a one to many relationship between the View and the Mediators, and between the Controller and the Commands, and between the Model and the Proxies.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;refactoring-to-puremvc&#34;&gt;Refactoring to PureMVC&lt;/h2&gt;
&lt;p&gt;To show you just how useful and simple incorporating PureMVC can be, I have designed a step by step tutorial on how you introduce a PureMVC command driven, message notification driven architecture to your existing wxpython application.&lt;/p&gt;
&lt;p&gt;We will start with a simple application that doesn&amp;rsquo;t even have a model. We will first add a mediator, then a command class and then a proper model.&lt;/p&gt;
&lt;p&gt;The application is a simple form which displays a textfield. When you hit ENTER, it converts anything you type into uppercase and displays it in the textfield. There is no “model” and no PureMVC architecture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfuss_pythonGui.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Three screenshots of our simple wxPython application.&lt;br&gt;
We will use this as our starting point and refactor to PureMVC.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-starting-point&#34;&gt;1. Starting Point&lt;/h3&gt;
&lt;p&gt;Here is the code for our simple wxpython application illustrated above. It has no proper model and does not use PureMVC. This is our starting point.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep0gui.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Starting point – a simple wxpython app - a single form with a textfield control.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent,&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;,&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Refactoring to PureMVC&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;got&amp;#34;&lt;/span&gt;, mydata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;2-add-a-mediator&#34;&gt;2. Add a mediator&lt;/h3&gt;
&lt;p&gt;Import PureMVC and add a mediator.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add a mediator and create a PureMVC “view”. Mediators in PureMVC are classes which look after a gui – e.g. a wxpython form. Mediators can be built that look after larger or smaller chunks of your gui – depending on your situation. In our case we will build a mediator to look after the one form and its single textfield.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Step 2 – the Mediator now intercepts the ENTER key event&lt;br&gt;
and performs the uppercasing behaviour in its onSubmit() handler.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add the puremvc import statements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a Mediator class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move the binding and onSubmit method out of the AppFrame and into the Mediator class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have the AppFrame create a PureMVC facade and register a mediator instance with the facade&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.interfaces &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.mediator &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent,&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;,&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Mediator, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;IMediator): &lt;span style=&#34;color:#6272a4&#34;&gt;# ADD THIS CLASS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MyFormMediator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, viewComponent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(MyFormMediator, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;got (mediator)&amp;#34;&lt;/span&gt;, mydata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Refactoring to PureMVC&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getInstance()  &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerMediator(MyFormMediator(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm ))  &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# self.myForm.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.myForm.inputFieldTxt) #DELETE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# def onSubmit(self, evt):  #DELETE THIS METHOD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;#     mydata = self.myForm.inputFieldTxt.GetValue()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;#     print &amp;#34;got&amp;#34;, mydata&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;#     self.myForm.inputFieldTxt.SetValue(mydata.upper())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now, instead of our AppFrame class binding to the &lt;code&gt;ENTER&lt;/code&gt; key event and handling it via an &lt;code&gt;onSubmit&lt;/code&gt; method, the mediator now does this – binding to the &lt;code&gt;ENTER&lt;/code&gt; event in the constructor of the mediator.&lt;/p&gt;
&lt;p&gt;All the &lt;code&gt;AppFrame&lt;/code&gt; does now is create a PureMVC facade and register a mediator instance with the facade. Notice that we pass the GUI object, in this case the form, to the mediator as a parameter to the mediator&amp;rsquo;s constructor – the GUI object is referred to by the mediator as the viewComponent.&lt;/p&gt;
&lt;p&gt;The application now behaves exactly as before, except we now get the following diagnostic message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfuss_step2mediator.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;which proves the mediator is active. Of course this step doesn&amp;rsquo;t really buy us any functionality yet, but at least we are on the road&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-command-class&#34;&gt;3. Command class&lt;/h3&gt;
&lt;p&gt;Move the business logic into a Command class.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now move the behaviour (changing text to uppercase) out of the mediator and into a proper command class. This makes the mediator dumber – which is good, as all we want the mediator to do is look after the GUI, not house application logic.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep3cmd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Step 3 – the uppercasing behaviour is moved to the command class.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Import the puremvc command import&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a command class &lt;strong&gt;DataSubmittedCommand&lt;/strong&gt; and implement execute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move the logic for updating the GUI display with uppercase text - out of the mediator and into the command object&amp;rsquo;s execute method. The mediator now simply raises a &lt;code&gt;DATA_SUBMITTED&lt;/code&gt; notification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define our own facade class called &lt;strong&gt;AppFacade&lt;/strong&gt;and&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Define the &lt;code&gt;DATA_SUBMITTED&lt;/code&gt; message&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Override &lt;code&gt;getInstance()&lt;/code&gt; to implement the singleton design pattern ( just return a new &lt;code&gt;AppFacade&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Override &lt;code&gt;initializeController()&lt;/code&gt; registering the &lt;code&gt;DataSubmittedCommand&lt;/code&gt; class, associating it with the &lt;code&gt;DATA_SUBMITTED&lt;/code&gt; message. In other words, whenever the &lt;code&gt;DATA_SUBMITTED&lt;/code&gt; message is raised, DataSubmittedCommand.&lt;code&gt;execute()&lt;/code&gt; is called.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use our new concrete Facade rather than the default Facade in the &lt;code&gt;AppFrame&lt;/code&gt; class startup code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.mediator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.command &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent,&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;,&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Mediator, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;IMediator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MyFormMediator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, viewComponent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(MyFormMediator, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;got (mediator)&amp;#34;&lt;/span&gt;, mydata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# self.viewComponent.inputFieldTxt.SetValue(mydata.upper()) # DELETE THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, mydata, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent)  &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand): &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD CLASS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;execute (command)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        viewComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getType()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Facade): &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD CLASS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @staticmethod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; AppFacade()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;initializeController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, DataSubmittedCommand)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Refactoring to PureMVC&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# self.mvcfacade = puremvc.patterns.facade.Facade.getInstance() # DELETE THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getInstance()  &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerMediator(MyFormMediator(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that we had to create our own concrete Facade class instead of merely creating an instance of the default Facade class that PureMVC provides. This is because we now want to start defining our own messages (e.g. &lt;code&gt;DATA_SUBMITTED&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Also notice (and this is the crux of this refactoring step) that the mediator no longer performs the business logic of converting the text to uppercase. Now instead it simply raises a notification &lt;code&gt;DATA_SUBMITTED&lt;/code&gt; which the command class then picks up and acts upon.&lt;/p&gt;
&lt;p&gt;Again, as with any good refactoring step, the behaviour of the application is exactly the same as before except for our diagnostic message which now emits:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfuss_step3command.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-gui-access-logic&#34;&gt;4. GUI access logic&lt;/h3&gt;
&lt;p&gt;Move the ability to access the GUI out of the Command class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hey - isn&amp;rsquo;t the command class doing too much now?&lt;/strong&gt; Notice, in the previous refactoring step, that the command class is not only converting the text to upercase (our simple business logic), but is also getting a bit too big for its boots – it is also stuffing the result back into the gui itself – altogether bypassing the meditor. We are actually encouraging this because we pass both the gui textfield data and a reference to the textfield as part of the notification message. This gives the command class direct access to the gui. The command class should really simply raise a notification and let the mediator do what it was designed to do, and stuff the uppercase text into the appropriate part of the GUI. Let&amp;rsquo;s now do this.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now have the command raise a notification message after it has done its work, and let the &lt;em&gt;mediator&lt;/em&gt; look after putting the result back into the gui.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a new message type &lt;code&gt;DATA_CHANGED&lt;/code&gt; in the facade - don&amp;rsquo;t register it against a command since it is simply a message that will be listened for by the existing meditor. In PureMVC, message notifications can be associated with the triggering of commands or simply be listened for by mediators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the message &lt;code&gt;DATA_CHANGED&lt;/code&gt; to the list of messages the mediator is interested in viz.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [ AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inside the mediator&amp;rsquo;s handleNotification method, check for the message matching &lt;code&gt;DATA_CHANGED&lt;/code&gt; and move the logic that updates the gui in here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We stop passing the meditor&amp;rsquo;s view component as part of the message to the command – the command class doesn&amp;rsquo;t need that reference to the gui anymore.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ironically the code that updates the GUI started in wxapp, then moved to the meditor, then into the command class, then end up now back in the meditor again! What sort of refactoring is this!?&lt;/p&gt;
&lt;p&gt;Well the point is that we have separated two aspects of that code - the uppercase logic is now correctly in the command class and the updating of the GUI correctly in the mediator class. The roles are being performed by the correct classes. The meditor is the only one that knows about the intricacies of the GUI. And its all notification message driven and nicely de-coupled – the command class is triggered in response to an abstract notification &lt;code&gt;DATA_SUBMITTED&lt;/code&gt; and sends the result back to the mediator using another abstract notification DATA_CHANGED. PureMVC is working as intended (though we don&amp;rsquo;t have a proper model yet).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.mediator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent,&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;,&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Mediator, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;IMediator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MyFormMediator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, viewComponent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(MyFormMediator, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [ AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED ]   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getName() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED:                  &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;handleNotification (mediator)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()     &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()                                   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata)                 &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;got (mediator)&amp;#34;&lt;/span&gt;, mydata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, mydata, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;execute (command)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# viewComponent = notification.getType() # DELETE THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# viewComponent.inputFieldTxt.SetValue(mydata.upper()) # DELETE THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Facade):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_CHANGED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_CHANGED&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @staticmethod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; AppFacade()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;initializeController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, DataSubmittedCommand)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Refactoring to PureMVC&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getInstance()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerMediator(MyFormMediator(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm ))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our diagnostic now shows how the flow of execution moves from the GUI to the mediator, to the command, and then back to the mediator again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfuss_step4command.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-add-a-model&#34;&gt;5. Add a Model&lt;/h3&gt;
&lt;p&gt;You&amp;rsquo;ve been waiting for this step, I know. Let&amp;rsquo;s add a proper model.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep5model.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adding a model to our architecture.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the PureMVC framework&amp;rsquo;s way of looking at things, the Model should be wrapped by a “Model Proxy” class. Just like the mediator wraps and looks after the GUI, the proxy wraps and looks after the model. In this refactoring step, we are going to add the Proxy class and use it as the model.&lt;/p&gt;
&lt;p&gt;From the command class point of view, instead of putting the result of the business logic straight back into the GUI, the command class now writes the uppercase string to the model proxy. The model proxy then sends out a notification that the model data has changed - which the mediator picks up and acts on by updating the form inputfield control/widget. Basically we have a complete PureMVC architecture functioning now (see sequence diagram below).&lt;/p&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Import the proxy namespace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define a class &lt;code&gt;DataModelProxy&lt;/code&gt; which will hold the data (the string we are entering in and upper-casing). The proxy class sends a notification whenever the data changes, enabling e.g. the mediator to update the gui.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create and register the the Proxy class in the startup phase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the command so that it looks up the model proxy and updates it with the uppercase string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mediator is told about the data that changes by the model proxy raising a DATA_CHANGED message. In response, the meditor takes the data and puts it in the GUI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When the mediator has been notified by the model - how does the mediator get access to the model proxy data?&lt;/p&gt;
&lt;p&gt;Well it can be given a reference to the data proxy so that it can get the data itself, or the notification message can contain the actual data (remember that notification messages have two additional parameters after the message name – &lt;code&gt;getBody()&lt;/code&gt; and &lt;code&gt;getType()&lt;/code&gt; and it is up to you what you put there. Finally, the Mediator is within its rights to look up the data proxy itself if it wants using the &lt;code&gt;self.facade.retrieveProxy(...)&lt;/code&gt; lookup technique.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.mediator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.proxy &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent,&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;,&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Mediator, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;IMediator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MyFormMediator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, viewComponent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(MyFormMediator, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [ AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getName() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;handleNotification (mediator)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;got (mediator)&amp;#34;&lt;/span&gt;, mydata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, mydata, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;execute (command)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# self.sendNotification(AppFacade.DATA_CHANGED, mydata.upper())  # DELETE LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;retrieveProxy(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME)  &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setData(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())                           &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;proxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Proxy): &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DataModelProxy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(DataModelProxy, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, [])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setData&lt;/span&gt;(self, data):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;setData (model)&amp;#34;&lt;/span&gt;, data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Facade):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_CHANGED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_CHANGED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @staticmethod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; AppFacade()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;initializeController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, DataSubmittedCommand)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Refactoring to PureMVC&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getInstance()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerMediator(MyFormMediator(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm ))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerProxy(DataModelProxy())   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfuss_step5model.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;taking-stock&#34;&gt;Taking Stock&lt;/h2&gt;
&lt;p&gt;Intermission – Taking Stock.&lt;/p&gt;
&lt;p&gt;At this stage the PureMVC architecture is fully operational.&lt;/p&gt;
&lt;p&gt;Here is the class diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep5takestock.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Class diagram of our application thus far.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here is the sequence diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep5sequence.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sequence diagram of what happens after the user types in some text&lt;br&gt;
and hits ENTER in the GUI.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note that the proxy, mediator and command classes actually have a very convenient &lt;code&gt;sendNotification&lt;/code&gt; method &lt;em&gt;on themselves&lt;/em&gt; (rather than having a reference to the facade&amp;rsquo;s &lt;code&gt;sendNotification&lt;/code&gt; method as illustrated in the above sequence diagram). In actuality, these self.&lt;code&gt;sendNotification&lt;/code&gt; methods ultimately get routed to the facade anyway, so the sequence diagram above is essentially correct.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Aha” moment – several roles have been distilled out of two hacky lines of code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Its interesting that we have distilled three roles out of the original, two simple lines of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code gets some user input text, converts it to uppercase and stuffs it back into the GUI. After our PureMVC refactoring steps, those roles are now spread out across various classes and a major architectural revamp. The roles are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Getting the data in and out of the GUI (mediator)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Converting the text to uppercase (command)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we have added in an additional role which the original code didn&amp;rsquo;t do&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Holding and storing an independent representation of the text being displayed (model proxy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sure, we&amp;rsquo;ve added complexity – boy have we ever. But now we have something amazingly scalable. We won&amp;rsquo;t be scaling this application up in this tutorial, however there are a couple more refactoring steps to do in order to tidy up a few things.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-model-proxy&#34;&gt;6. Model Proxy&lt;/h3&gt;
&lt;p&gt;Add a real Model behind the Model Proxy and Initialise the Model.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now add a proper model that the model proxy wraps. In our simple example so far, this step seems redundant as it may seem easier to keep the string stored in the model proxy. Why not make the model proxy be the model?&lt;/p&gt;
&lt;p&gt;In more complex projects, model proxies can become properly useful – possibly representing a number of model objects under the one model proxy, or even returning result sets due to the underlying data model being a database.&lt;/p&gt;
&lt;p&gt;Another reason to separate the ModelProxy from the Model is that the ModelProxy class is free to “play ball” with the PureMVC framework e.g. sending out various notification messages whenever data gets changed etc. whereas a Model class is typically oblivious to such things (and probably should remain so). In our example, the DataModelProxy sends out a &lt;code&gt;DATA_CHANGED&lt;/code&gt; notification – both in the constructor, and also whenever setData() is called.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adding a real model behind the model proxy.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add a proper model class &lt;code&gt;Data&lt;/code&gt; and have the &lt;code&gt;DataModelProxy&lt;/code&gt; wrap it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialise the model with an initial string - and watch the default text appear in the GUI when the application starts up!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.mediator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.proxy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent,&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;,&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Mediator, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;IMediator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MyFormMediator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, viewComponent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(MyFormMediator, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [ AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getName() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;handleNotification (mediator)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;got (mediator)&amp;#34;&lt;/span&gt;, mydata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, mydata, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;execute (command)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;retrieveProxy(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setData(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;proxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Proxy):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DataModelProxy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(DataModelProxy, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, [])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;#self.data = &amp;#34;&amp;#34; # DELETE THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Data()   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setData&lt;/span&gt;(self, data):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;#self.data = data # DELETE THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;setData (model)&amp;#34;&lt;/span&gt;, data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;#self.sendNotification(AppFacade.DATA_CHANGED, self.data) # DELETE THIS LINE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Data&lt;/span&gt;: &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD CLASS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello - hit enter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Facade):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_CHANGED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_CHANGED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @staticmethod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; AppFacade()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;initializeController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, DataSubmittedCommand)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Refactoring to PureMVC&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getInstance()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerMediator(MyFormMediator(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm ))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerProxy(DataModelProxy())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-application-initialisation-sequence&#34;&gt;The Application Initialisation Sequence&lt;/h3&gt;
&lt;p&gt;Getting intitial Model data into the GUI.&lt;/p&gt;
&lt;p&gt;A nice effect here is that the string &lt;strong&gt;&amp;ldquo;Hello - hit enter&amp;rdquo;&lt;/strong&gt; in the Data class magically appears in the GUI when the application starts up. How cool – some of this PureMVC architecture is starting to pay off. How does this happen? Well, notice that the DataModelProxy sends out a DATA_CHANGED notification in its constructor (when it is also creating the instance of the real model Data class). The mediator intercepts this notification and displays the string in the GUI form.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfuss_step6refine.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Two screenshots of our PureMVC wxPython application, showing how the model data magically appears in the GUI form on application startup.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;7-startup-code&#34;&gt;7. Startup code&lt;/h3&gt;
&lt;p&gt;Move the startup code into a startup command class&lt;/p&gt;
&lt;p&gt;Personally I&amp;rsquo;m not convinced this step is really necessary - however this step follows the convention on how PureMVC applications are put together.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep7startupcmd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The new startup command class.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Moving most of the startup code into its own command class may have the benefit of organising your code a little more, at the cost of complexity – I mean, we already have a nice place for constructing classes etc in the constructor of the AppFrame class. Even if we move some startup code into its own startup command class, we still need to create the form and the facade in AppFrame, so why not keep all the startup code in the one place? On the other hand, by moving what we can into the startup command, we may be helping decouple the AppFrame startup code from the knowledge of all the other clases involved in your framework e.g. mediators, commands etc. Certainly in a Flex application where namespaces are tightly controlled, or even a more serious python application where namespaces are more of an issue, having a startup comand class is a good thing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Move the startup code into a startup command class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change our initialisation to invoke the startup command via a notification message&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.mediator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.proxy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent,&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;,&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Mediator, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;IMediator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MyFormMediator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, viewComponent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(MyFormMediator, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [ AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getName() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;handleNotification (mediator)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;got (mediator)&amp;#34;&lt;/span&gt;, mydata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, mydata, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;execute (command)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;retrieveProxy(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setData(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;StartupCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand): &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD CLASS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;startup execute (command)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody(), notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getType()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wxapp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerMediator(MyFormMediator(wxapp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerProxy(DataModelProxy())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;proxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Proxy):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DataModelProxy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(DataModelProxy, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, [])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Data()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setData&lt;/span&gt;(self, data):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;setData (model)&amp;#34;&lt;/span&gt;, data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Data&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello - hit enter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Facade):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    STARTUP &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;STARTUP&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_CHANGED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_CHANGED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @staticmethod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; AppFacade()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;initializeController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;STARTUP, StartupCommand)   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, DataSubmittedCommand)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;startup&lt;/span&gt;(self, app):   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD METHOD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification( AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;STARTUP, app )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Refactoring to PureMVC&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getInstance()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# self.mvcfacade.registerMediator(MyFormMediator(self.myForm )) # DELETE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# self.mvcfacade.registerProxy(DataModelProxy()) # DELETE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;startup(self)   &lt;span style=&#34;color:#6272a4&#34;&gt;#ADD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfuss_step7startupcmd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here is the final UML.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvcfussUMLstep999.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Final UML of our example&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You may notice that there are hardly any dependencies between classes. This is because classes communicate with each other via the PureMVC message notification system. This takes the form of a string message broadcast to the “world” e.g. e.g. &lt;strong&gt;facade.sendNotification(“DATA_CHANGED”, notificationMsg)&lt;/strong&gt; - the sender doesn&amp;rsquo;t really care who handles it. Or it can take the form of looking up model instances, again by string references e.g. &lt;strong&gt;facade.retreiveProxy(“datamodelproxy1”)&lt;/strong&gt;. We end up with a very decoupled design. Nice.&lt;/p&gt;
&lt;h3 id=&#34;too-much-complexity&#34;&gt;Too much Complexity?&lt;/h3&gt;
&lt;p&gt;This series of refactorings has shown how you can really complicate your application by utilising the PureMVC framework. :-)&lt;/p&gt;
&lt;p&gt;Seriously, on the positive side, you now have a scalable architecture where you can add more notification messages, more mediators, more commands – and everything will fit together. I think that a framework has value not just because of what it does, but rather because it guides you in how to structure your application – how to name your classes and where to put them, and how they play together.&lt;/p&gt;
&lt;p&gt;If your application is simple it may not be worthwhile incorporating PureMVC, however hopefully this tutorial has shown you that it is not that hard to start with the PureMVC approach. I may have inspired you to use PureMVC with even your simple apps!&lt;/p&gt;
&lt;p&gt;Finally, this tutorial has shown that you can hack something up in wxPython and then later, switch to PureMVC when you need to, in a step by step way.&lt;/p&gt;
&lt;p&gt;Source code for all the steps is available &lt;a href=&#34;http://www.atug.com/downloads/puremvcrefactor_python.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you prefer a java example walkthrough, click &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=86&#34; title=&#34;Refactoring to PureMVC - Java version&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;-Andy Bulka&lt;br&gt;
March 2009&lt;/p&gt;
&lt;p&gt;P.S. This blog posting was presented as a talk to the Melbourne Patterns Group on the 1st April, 2009.&lt;/p&gt;
&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;
&lt;h3 id=&#34;posted-by-arun-george-on-feb-15th-2012&#34;&gt;Posted by Arun George on Feb 15th, 2012&lt;/h3&gt;
&lt;p&gt;Great article on pureMVC and its applicalbility through a simple example. This is cool. A very simple example which explains the complexity :) .&lt;/p&gt;
&lt;h3 id=&#34;posted-by-byron-harris-on-may-25th-2012&#34;&gt;Posted by Byron Harris on May 25th, 2012&lt;/h3&gt;
&lt;p&gt;Thanks for providing this example. It helps me in applying the concepts in the PureMVC documentation to Python and wxPython.&lt;/p&gt;
&lt;p&gt;A few minor points about the example code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;code&gt;DataSubmittedCommand.execute()&lt;/code&gt;, it&amp;rsquo;s not necessary to add attribute datamodelProxy since Command classes are meant to be stateless. Therefore you can just make datamodelProxy a method variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;StartupCommand.execute()&lt;/code&gt;, the variable named wxapp is inappropriate named. It&amp;rsquo;s actually an AppFrame instance that is passed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;posted-by-tjaved-on-sep-25th-2012&#34;&gt;Posted by T.Javed on Sep 25th, 2012&lt;/h3&gt;
&lt;p&gt;Thank You so much!&lt;/p&gt;
&lt;p&gt;I had read all the pureMVC documentation but was finding it hard to grasp it until I came across this nice little tutorial. It helped me a lot to clearly understand the pureMVC concept and implementation.&lt;/p&gt;
&lt;p&gt;cheers!&lt;/p&gt;
&lt;h3 id=&#34;posted-by-demolishun-on-oct-20th-2012&#34;&gt;Posted by Demolishun on Oct 20th, 2012&lt;/h3&gt;
&lt;p&gt;Putting logic in the controller does not make sense to me:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model&#34;&gt;http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/235233/asp-net-mvc-should-business-logic-exist-in-controllers&#34;&gt;http://stackoverflow.com/questions/235233/asp-net-mvc-should-business-logic-exist-in-controllers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am starting down the path to using pureMVC in my projects, but your example is confusing. It seems to me that the controller is supposed to be light weight and act as glue. What is the reasoning for putting the business logic in the controller and not the model?&lt;/p&gt;
&lt;p&gt;When I began to understand MVC it clicked in my head that the model would be independent and could be swapped out just like the view. I am also a little concerned about the AppFrame knowing about the Facade. This makes it harder to swap out the view. Or am I looking at this the wrong way?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;java-example&#34;&gt;Java Example&lt;/h2&gt;
&lt;p&gt;Refactoring to PureMVC - Java&lt;/p&gt;
&lt;p&gt;Here is a Java version of the tutorial I originally wrote in wxPython. It leaves out most of the commentary and concentrates on the code, so please read the &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=84&#34; title=&#34;Refactoring to PureMVC&#34;&gt;original tutorial&lt;/a&gt; for more detail about the meaning of the refactoring steps.&lt;/p&gt;
&lt;p&gt;I have used the same class names and the logic is identical (except for the parameters to the notification message DATA_SUBMITTED, which I have swapped around due to the fact that in the Java PureMVC framework the getBody() parameter is of type object whereas in dynamic Python the type of this paramter is more flexible – more explanation is found below).&lt;/p&gt;
&lt;h3 id=&#34;1-starting-point-1&#34;&gt;1. Starting Point&lt;/h3&gt;
&lt;p&gt;Step 1. Create a Basic Java GUI application form&lt;/p&gt;
&lt;p&gt;Create a Java GUI application. Either hand code it or e.g. use Netbeans to kick start you. Then drop a&lt;/p&gt;
&lt;p&gt;&lt;code&gt;javax.swing.JTextField jTextField1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to the form. Don&amp;rsquo;t bother adding any behaviour yet, lets get cracking with the refactoring.&lt;/p&gt;
&lt;h3 id=&#34;2-add-a-mediator-1&#34;&gt;2. Add a mediator&lt;/h3&gt;
&lt;p&gt;Step 2. Import PureMVC and add a mediator&lt;/p&gt;
&lt;p&gt;Here is the mediator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * MyFormMediator.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.mediator.Mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.INotification&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javapuremvcminimal01.JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.awt.event.ActionEvent&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.awt.event.ActionListener&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Mediator &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ActionListener &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyFormMediator&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01Form viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;NAME&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        setViewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;addActionListener&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;actionPerformed&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ActionEvent evt&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        JavaPureMVCMinimal01Form form &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        form&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;form&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;toUpperCase&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the application startup code, which was generated automatically by Netbeans 6.5 and the startup method was modified to create the PureMVC facade and mediator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * JavaPureMVCMinimal01App.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; javapuremvcminimal01&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.jdesktop.application.Application&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.jdesktop.application.SingleFrameApplication&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.facade.Facade&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.andy.MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * The main class of the application.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * Based on a Netbeans 6.5 template.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JavaPureMVCMinimal01App&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; SingleFrameApplication &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; JavaPureMVCMinimal01Form myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * At startup create and show the main frame of the application.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;startup&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Facade mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;registerMediator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        show&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we need access to the textField in the swing form generated by netbeans, we declare a public variable for ourselves. Netbeans seems to make all the gui elements private – so we are fighting that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * JavaPureMVCMinimal01Form.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *  (by default Netbeans names this JavaPureMVCMinimal01View but I renamed it).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; javapuremvcminimal01&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javax.swing.JFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JavaPureMVCMinimal01Form&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; FrameView &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; javax&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;swing&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;JTextField&lt;/span&gt; inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ADD
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JavaPureMVCMinimal01Form&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;SingleFrameApplication app&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;app&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        initComponents&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; jTextField1&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ADD
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-command-class-1&#34;&gt;3. Command class&lt;/h3&gt;
&lt;p&gt;Step 3. Move the business logic into a Command class&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now move the behaviour (changing text to uppercase) out of the mediator and into a proper command class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * DataSubmittedCommand.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.ICommand&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.INotification&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.command.SimpleCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javapuremvcminimal01.JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; SimpleCommand &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ICommand &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;INotification notification&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        JavaPureMVCMinimal01Form viewComponent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getBody&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;toUpperCase&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the execute method gets called the first thing the execute code should do is decode the notification message for juicy information. Its fairly arbitrary how you use the notification class fields .getBody() and getType(). In the java implementation the only limitation is that getBody() holds an object and getType() a string. Use your own convention on how to use these two parameters, which can be different for each unique notifcation message - just make sure your sendNotification sends the right things to match how you are decoding things.&lt;/p&gt;
&lt;p&gt;In the example so far, in the notification message DATA_SUBMITTED I use the getBody() field to pass a reference to the viewcomponent, i.e. the form. This is only a temporary situation, we will later change this so that the command simply raises a message and let the mediator deal with the viewcomponent (which is the mediators job). I use the getType() parameter of the notification message to hold the text of the edit control at the time when the use hit ENTER.&lt;/p&gt;
&lt;p&gt;Now the mediator has changed a little. It no longer does the work of uppercase, it delegates this entirely to the command class simply by raising a DATA_SUBMITTED message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * MyFormMediator.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.mediator.Mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.INotification&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javapuremvcminimal01.JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.awt.event.ActionEvent&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.awt.event.ActionListener&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Mediator &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ActionListener &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyFormMediator&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01Form viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;NAME&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        setViewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;addActionListener&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;actionPerformed&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ActionEvent evt&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        JavaPureMVCMinimal01Form form &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// form.inputFieldTxt.setText(form.inputFieldTxt.getText().toUpperCase());  // DELETE THIS LINE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;sendNotification&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DATA_SUBMITTED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; form&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that another way to send a notification message (instead of sendNotification) is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.observer.Notification&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;facade&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;notifyObservers&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Notification&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DATA_SUBMITTED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; form&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;however this is a bit PureMVC old school and not quite as clean as what we have used.&lt;/p&gt;
&lt;p&gt;We also have needed to create our own concrete Facade class so that we can define our own message types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * AppFacade.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.facade.Facade&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Facade &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; AppFacade instance &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; AppFacade &lt;span style=&#34;color:#50fa7b&#34;&gt;getInst&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            instance &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; instance&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        registerCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;DATA_SUBMITTED&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; DataSubmittedCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And of course we instantiate our own concrete facade instead of the base class facade:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * JavaPureMVCMinimal01App.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;startup&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Facade mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Facade mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getInst&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;registerMediator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        show&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-gui-access-logic-1&#34;&gt;4. GUI Access Logic&lt;/h3&gt;
&lt;p&gt;Step 4. Move the ability to access the GUI out of the Command class&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now have the command raise a notification message after it has done its work, and let the &lt;em&gt;mediator&lt;/em&gt; look after putting the result back into the gui.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * MyFormMediator.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.mediator.Mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.INotification&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javapuremvcminimal01.JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.awt.event.ActionEvent&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.awt.event.ActionListener&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Mediator &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ActionListener &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyFormMediator&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01Form viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;NAME&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        setViewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;addActionListener&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;actionPerformed&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ActionEvent evt&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        JavaPureMVCMinimal01Form form &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// form.inputFieldTxt.setText(form.inputFieldTxt.getText().toUpperCase());  DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;sendNotification&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DATA_SUBMITTED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; form&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#ff79c6&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#ff79c6&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DATA_CHANGED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;INotification notification&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DATA_CHANGED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;handleNotification (mediator) &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            JavaPureMVCMinimal01Form form &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            form&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;inputFieldTxt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * DataSubmittedCommand.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.ICommand&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.INotification&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.command.SimpleCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// import javapuremvcminimal01.JavaPureMVCMinimal01Form;  DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; SimpleCommand &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ICommand &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;INotification notification&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// JavaPureMVCMinimal01Form viewComponent = (JavaPureMVCMinimal01Form) notification.getBody();  DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// viewComponent.inputFieldTxt.setText(mydata.toUpperCase());  DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;sendNotification&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DATA_CHANGED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;toUpperCase&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that the mediator is putting the result of the command behaviour (the uppercasing of user entered text) into the gui – the command is not touching the GUI anymore, which explains why the command no longer needs to import the GUI form class JavaPureMVCMinimal01Form.&lt;/p&gt;
&lt;p&gt;The command class DataSubmittedCommand simply raises a notification, passing the changed text as part of the notifcation message (we are using the getType() parameter to hold the uppercased string – though we could have passed it around in the getBody() parameter).&lt;/p&gt;
&lt;p&gt;Finally we need to add the new notification message type to the facade:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * AppFacade.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.facade.Facade&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Facade &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String DATA_CHANGED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_CHANGED&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-add-a-model-1&#34;&gt;5. Add a Model&lt;/h3&gt;
&lt;p&gt;Step 5. Add a Model&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add a proper model. For now we leave out the real model behind the proxy and use the proxy class as both proxy and model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * DataModelProxy.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.proxy.Proxy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Proxy &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DataModelProxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; String data&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;NAME&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setData&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;String data&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;setData (model) &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;sendNotification&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DATA_CHANGED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We alter the command class to poke the uppercase string into the model. We then let the model notify the world that the model data has altered.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * DataSubmittedCommand.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.ICommand&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.INotification&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.command.SimpleCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; SimpleCommand &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ICommand &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;INotification notification&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// this.sendNotification(AppFacade.DATA_CHANGED, null, mydata.toUpperCase());  DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        DataModelProxy datamodelProxy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;retrieveProxy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        datamodelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;setData&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;toUpperCase&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we need to instantiate and register the DataModelProxy instance in the application&amp;rsquo;s startup code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * JavaPureMVCMinimal01App.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; javapuremvcminimal01&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.jdesktop.application.Application&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.jdesktop.application.SingleFrameApplication&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.facade.Facade&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.andy.MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JavaPureMVCMinimal01App&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; SingleFrameApplication &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; JavaPureMVCMinimal01Form myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * At startup create and show the main frame of the application.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;startup&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Facade mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getInst&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;registerMediator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;registerProxy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        show&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;6-model-proxy-1&#34;&gt;6. Model Proxy&lt;/h3&gt;
&lt;p&gt;Step 6. Add a real Model behind the Model Proxy and Initialise the Model&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now add a proper model that the model proxy wraps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * Data.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Data&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; String data&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Data&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello - hit enter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * DataModelProxy.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.proxy.Proxy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Proxy &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DataModelProxy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// private String data; DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; Data realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;NAME&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// this.data = &amp;#34;&amp;#34;; DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;realdata&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Data&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;sendNotification&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DATA_CHANGED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;realdata&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setData&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;String data&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// this.data = data; DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;realdata&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;setData (model) &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// this.sendNotification(AppFacade.DATA_CHANGED, null, this.data); DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// this.sendNotification(AppFacade.DATA_CHANGED, null, this.realdata.data); DELETE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have make the model string data public to keep the example simple. Feel free to add setters and getters.&lt;/p&gt;
&lt;h3 id=&#34;7-startup-code-1&#34;&gt;7. Startup code&lt;/h3&gt;
&lt;p&gt;Step 7. Move the startup code into a startup command class&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now create a startup command and move as much of the startup logic into there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * StartupCommand.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.ICommand&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.interfaces.INotification&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.command.SimpleCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javapuremvcminimal01.JavaPureMVCMinimal01App&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;StartupCommand&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; SimpleCommand &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ICommand &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;INotification notification&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;startup execute (command) &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getBody&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        JavaPureMVCMinimal01App app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01App&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getBody&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;registerMediator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;app&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;myForm&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;registerProxy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need register the startup command with the facade and define a STARTUP message which will be used to trigger it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * AppFacade.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; org.andy&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.puremvc.java.patterns.facade.Facade&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javapuremvcminimal01.JavaPureMVCMinimal01App&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Facade &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String STARTUP &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;STARTUP&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String DATA_CHANGED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_CHANGED&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; AppFacade instance &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; AppFacade &lt;span style=&#34;color:#50fa7b&#34;&gt;getInst&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;instance &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            instance &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; instance&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        registerCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;STARTUP&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; StartupCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        registerCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;DATA_SUBMITTED&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; DataSubmittedCommand&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;startup&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;JavaPureMVCMinimal01App app&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;sendNotification&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;STARTUP&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; app&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we need to alter the application startup code to do less. Notice that we lose the need for some imports, thus proving that a reason for having the startup command is to decouple and loosen dependencies.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * JavaPureMVCMinimal01App.java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; javapuremvcminimal01&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.jdesktop.application.Application&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.jdesktop.application.SingleFrameApplication&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// import org.puremvc.java.patterns.facade.Facade;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.andy.AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// import org.andy.MyFormMediator;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// import org.andy.DataModelProxy;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JavaPureMVCMinimal01App&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; SingleFrameApplication &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; JavaPureMVCMinimal01Form myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * At startup create and show the main frame of the application.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;startup&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; JavaPureMVCMinimal01Form&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Facade AppFacade mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getInst&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// mvcfacade.registerMediator(new MyFormMediator(myForm));
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// mvcfacade.registerProxy(new DataModelProxy());
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;startup&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        show&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;myForm&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    …
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we are calling a brand new &lt;code&gt;startup()&lt;/code&gt; method on our concrete facade, and this method is not declared in the Facade base class, we need to change the declaration we have been using from Facade to AppFacade. The author of PureMVC recommends this technique of bootstrapping however whether the &lt;code&gt;startup()&lt;/code&gt; method officially makes it into the base class in future versions of PureMVC remains to be seen. We don&amp;rsquo;t have to hold our breath for this, as you can see, we simply define our own &lt;code&gt;startup()&lt;/code&gt; method on our own concrete facade class.&lt;/p&gt;
&lt;h3 id=&#34;8-packaging&#34;&gt;8. Packaging&lt;/h3&gt;
&lt;p&gt;Step 8. Java specific – Organise the classes into packages&lt;/p&gt;
&lt;p&gt;You could potentially move the classes into packages that reflect the roles they are playing. How about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data and DataModelProxy → &lt;strong&gt;Model&lt;/strong&gt; package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DataSubmittedCommand and StartupCommand → &lt;strong&gt;Controller&lt;/strong&gt; package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MyFormMediator and JavaPureMVCMinimal01Form → &lt;strong&gt;View&lt;/strong&gt; package&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and we might as well&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaPureMVCMinimal01App and AppFacade → &lt;strong&gt;App&lt;/strong&gt; package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a couple of screenshots of the GUI in operation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/images/PureMvcRefactorImages/puremvcfussJAVA1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;compile:

run:

startup execute (command) javapuremvcminimal01.JavaPureMVCMinimal01App@1e67ac

handleNotification (mediator) Hello - hit enter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;User hits ENTER&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/images/PureMvcRefactorImages/puremvcfussJAVA2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;setData (model) HELLO - HIT ENTER

handleNotification (mediator) HELLO - HIT ENTER
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;conclusion-java&#34;&gt;Conclusion (Java)&lt;/h3&gt;
&lt;p&gt;We have seen how we can introduce PureMVC into an existing Netbeans application, step by step. I haven&amp;rsquo;t hooked up the about box or the menus into the PureMVC system because these things were created by default by Netbeans and I was focussed simply on duplicating the Python minimalist example.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;#1-starting-point&#34;&gt;Python refactoring steps above&lt;/a&gt; contain more explanation than this Java example, so that may be useful to study too.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.atug.com/downloads/puremvcrefactor_java.zip&#34;&gt;Java source code&lt;/a&gt; for this example.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.atug.com/downloads/puremvcrefactor_python.zip&#34;&gt;Python source code&lt;/a&gt; for this example.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: PureMVC</title>
      <link>https://abulka.github.io/blog/2009/03/01/puremvc/</link>
      <pubDate>Sun, 01 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2009/03/01/puremvc/</guid>
      <description>
        
        
        &lt;p&gt;PureMVC - Architectural Pattern incl. a minimal wxPython example.&lt;/p&gt;
&lt;p&gt;Understanding PureMVC can be hard, even though it is a relatively simple framework.  That&amp;rsquo;s why a minimal example can help.  Here is one I created for wxPython and Python users.  This will run fine on windows, mac and linux.  Install the &lt;a href=&#34;http://trac.puremvc.org/PureMVC_Python/&#34;&gt;PureMVC python port&lt;/a&gt; and &lt;a href=&#34;http://www.wxpython.org/&#34;&gt;wxPython&lt;/a&gt; (which is already present on Mac 10.5) and you should be able to run it.&lt;/p&gt;
&lt;p&gt;Incidentally there is a helpful &lt;a href=&#34;http://www.as3dp.com/2007/12/27/minimalist-mvc-example-using-the-puremvc-framework/&#34;&gt;minimal example for Actionscript users&lt;/a&gt; too.  To actually run that example in Flex you need to create a Flex project, import the source, move the startup function found in main.as into the mxml, and trigger it via a onloadcomplete event in the mxml.  Leave the startup code exactly the way it is - passing in the stage as a parameter to the startup code is fine, even in Flex.&lt;/p&gt;
&lt;h2 id=&#34;a-tip-on-understanding-puremvc&#34;&gt;A tip on understanding PureMVC&lt;/h2&gt;
&lt;p&gt;A potential pitfall to understanding PureMVC is that you merrily visit the &lt;a href=&#34;http://www.puremvc.org&#34;&gt;puremvc.org&lt;/a&gt; website and start to read about the wonderful architecture of the framework - the facade, the controller and its commands, the view with its mediators and the proxies with their references to your model.  You read about what notifies what, who points where - then you look in awe at the wonderful framework diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/puremvc_conceptual_diagram.png&#34; alt=&#34;puremvc_conceptual_diagram.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;and wonder where to get started!  The trouble is, you don&amp;rsquo;t need to understand the intricate details of how the framework itself works in order to use it (though you should eventually read all the PureMVC documentation and even read the PureMVC source code - its a suprisingly small amount of code).&lt;/p&gt;
&lt;p&gt;In fact all you need to create in order to &lt;em&gt;use&lt;/em&gt; the framework is a concrete &lt;strong&gt;facade&lt;/strong&gt; class in order to define your notification messages, a &lt;strong&gt;mediator&lt;/strong&gt; class for any gui that you have, a &lt;strong&gt;proxy&lt;/strong&gt; class for you model class and finally one ore more &lt;strong&gt;command&lt;/strong&gt; classes depending on what behaviour you want to have.&lt;/p&gt;
&lt;h2 id=&#34;overview-of-the-python-minimal-example&#34;&gt;Overview of the Python Minimal Example&lt;/h2&gt;
&lt;p&gt;This demo illustrates the simplest way (that I could think of) to build a PureMVC application in python using wxPython as the GUI. A string in the model is displayed in the GUI in a textfield. Anything you type gets converted to uppercase and stored back in the model, courtesy of a command class triggered when you hit the ENTER key in the GUI.&lt;/p&gt;
&lt;p&gt;We are modelling and visualising a single string of a model class Data.  If you want to imagine a sequence diagram&amp;hellip; On startup, the model&amp;rsquo;s data is pushed to the GUI. When the user hits ENTER in the GUI, the mediator picks up on this wx event and broadcasts the pureMVC message DATA_SUBMITTED. A command class thus gets triggered which converts the text to uppercase (this is the business logic) and stuffs the info into the model. The model&amp;rsquo;s setter broadcasts a DATA_CHANGED message, which the mediator intercepts, updating the GUI.&lt;/p&gt;
&lt;p&gt;Thus anything you type gets converted to uppercase and stored in the model.&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;The single python file can be downloaded from &lt;a href=&#34;http://www.atug.com/downloads/puremvcminimalwx0.py.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.interfaces  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.facade  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.command  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.mediator  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.proxy  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;view&#34;&gt;View&lt;/h3&gt;
&lt;p&gt;MyForm is the GUI, built in wxpython. MyFormMediator is the mediator which knows about and specifically looks after MyForm, intercepting wx events from the GUI and broadcasting pureMVC notification messages. The mediator also listens for pureMVC notification messages and stuffs data back into the GUI. The &amp;ldquo;View&amp;rdquo; in pureMVC is the entire system comprised of class View (part of the pureMVC framework) which holds references to one or more mediators, each of which looks after a GUI form or part of a GUI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self, parent, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Mediator, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;IMediator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MyFormMediator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, viewComponent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(MyFormMediator, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getName() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;handleNotification (mediator) got&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, mydata)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;StartupCommand&lt;/code&gt; and &lt;code&gt;DataSubmittedCommand&lt;/code&gt; are the command classes, triggered by notification messages AppFacade.STARTUP and AppFacade.DATA_SUBMITTED respectively. The &amp;ldquo;Controller&amp;rdquo; in pureMVC is the entire system comprised of class Controller (part of the pureMVC framework) which holds references to one or more commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;StartupCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;startup execute (command)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxapp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerMediator(MyFormMediator(wxapp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerProxy(DataModelProxy())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;submit execute (command)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;retrieveProxy(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setData(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;
&lt;p&gt;DataModelProxy is the proxy for class Data. The &amp;ldquo;Model&amp;rdquo; in pureMVC is the entire system comprised of class Model (part of the pureMVC framework) which holds references to one or more proxies (e.g. DataModelProxy) each of which looks after a model (e.g. Data). Note that a model class could be more complex and the associated proxy could look after looping and pulling out larger chunks of information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;proxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Proxy):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DataModelProxy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(DataModelProxy, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, [])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Data()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setData&lt;/span&gt;(self, data):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;setData (model) to&amp;#34;&lt;/span&gt;, data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Data&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello - hit enter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;facade&#34;&gt;Facade&lt;/h3&gt;
&lt;p&gt;The facade is a singleton and is where you define all messages types (all just strings) and where you associate command classes with particular messages. There can be messages NOT associated with commands, which are used for mediators to listen to (e.g. model indirectly talking to mediators).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Facade):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; STARTUP &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;STARTUP&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; DATA_CHANGED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_CHANGED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; @staticmethod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; AppFacade()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;initializeController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;STARTUP, StartupCommand)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, DataSubmittedCommand)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;startup&lt;/span&gt;(self, app):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;STARTUP, app);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self,parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;PureMVC Minimalist Demo&amp;#34;&lt;/span&gt;,size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getInstance()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;startup(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;p&gt;Pardon the pun but PureMVC often uses &lt;code&gt;note&lt;/code&gt; to refer to the notification message parameter, which I found confusing.  For example when a meditor receives a notification.  I use &lt;code&gt;notification&lt;/code&gt; as the parameter name.&lt;/p&gt;
&lt;p&gt;Notification messages have a &lt;code&gt;.getName()&lt;/code&gt;, &lt;code&gt;.getBody()&lt;/code&gt; and &lt;code&gt;.getType()&lt;/code&gt;.  Except for the name, you can pass any info you like in the second two parameters, its up to you. Typical parameters are references to forms, apps, data that has changed, reference to objects, other string messages of your own devising. You could use more than one parameter if say, you wanted to broadcast both the data that changed and an actual reference to the object whose data had changed.&lt;/p&gt;
&lt;h2 id=&#34;alternative-implementation---even-simpler&#34;&gt;Alternative implementation - even simpler!&lt;/h2&gt;
&lt;p&gt;Here is an even simpler implementation, essentially the same, however I have removed the startup command.  You can initialise the bits and pieces of the application, creating the mediator and model proxy etc. in regular code rather than going through all the fancy startup command stuff (see the bold code).  This helps reduce complexity and increases your chances of understanding what is going on with the PureMVC architectural pattern.  In practice, in a complex project, a startup command may very well be a good idea.&lt;/p&gt;
&lt;p&gt;You can download this example &lt;a href=&#34;http://www.atug.com/downloads/puremvcminimalwx0nostartupcmd.py.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.facade
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.mediator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; puremvc.patterns.proxy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyForm&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, parent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Panel&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self, parent, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TextCtrl(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), pos&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;), style&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TE_PROCESS_ENTER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFormMediator&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Mediator, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;IMediator):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MyFormMediator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, viewComponent):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(MyFormMediator, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(MyFormMediator&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, viewComponent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Bind(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;EVT_TEXT_ENTER, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onSubmit,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;listNotificationInterests&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handleNotification&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getName() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;handleNotification (mediator) got&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetValue(mydata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSubmit&lt;/span&gt;(self, evt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;viewComponent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inputFieldTxt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, mydata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataSubmittedCommand&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;command&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleCommand, puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;interfaces&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ICommand):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(self, notification):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;submit execute (command)&amp;#34;&lt;/span&gt;, notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mydata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; notification&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getBody()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;retrieveProxy(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;datamodelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setData(mydata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;upper())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DataModelProxy&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;proxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Proxy):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NAME &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DataModelProxy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(DataModelProxy, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(DataModelProxy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;NAME, [])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Data()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setData&lt;/span&gt;(self, data):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;setData (model) to&amp;#34;&lt;/span&gt;, data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sendNotification(AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_CHANGED, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;realdata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Data&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello - hit enter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFacade&lt;/span&gt;(puremvc&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;patterns&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;facade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Facade):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_SUBMITTED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_SUBMITTED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DATA_CHANGED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DATA_CHANGED&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @staticmethod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getInstance&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; AppFacade()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initializeController&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;initializeController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;(AppFacade, self)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerCommand(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DATA_SUBMITTED, DataSubmittedCommand)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AppFrame&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Frame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(self, parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      title&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;PureMVC Minimalist Demo&amp;#34;&lt;/span&gt;, size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyForm(parent&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getInstance()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerMediator(MyFormMediator(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myForm))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mvcfacade&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;registerProxy(DataModelProxy())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WxApp&lt;/span&gt;(wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;App):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OnInit&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; AppFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;appFrame&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; WxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wxApp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this minimalist example helps you understand PureMVC.  Of course read the pdf &lt;a href=&#34;http://puremvc.org/&#34;&gt;documentation&lt;/a&gt; on PureMVC by Cliff.  For a step by step guide to buildng a PureMVC based application in wxPython - or any other language for that matter, see my blog entry &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=84&#34; title=&#34;Refactoring to PureMVC&#34;&gt;Refactoring to PureMVC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;-Andy&lt;/p&gt;
&lt;h2 id=&#34;comments&#34;&gt;Comments:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Posted by Toby de Havilland on Mar 4th, 2009&lt;/strong&gt;&lt;br&gt;
Excellent example Andy, great stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Posted by diamondtearz on Dec 10th, 2009&lt;/strong&gt;&lt;br&gt;
Wow! Thanks for putting this out there. I&amp;rsquo;ve recently jumped on the Python boat and have used PureMVC in Actionscript. I was looking for a good example to get me going and this fits the bill perfectly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Posted by Fabio on Jan 18th, 2014&lt;/strong&gt;&lt;br&gt;
Dear Andy,&lt;br&gt;
I hope you&amp;rsquo;re still around after all this time. Sorry but I found your wonderful blog just now! Your example is very nice, but, unfortunately, I don&amp;rsquo;t get it to work. There is a very strange Traceback here that I cannot really get rid of. I&amp;rsquo;m running python 2.7.3 on Windows (8&amp;hellip;)&lt;br&gt;
I cannot really understand why this strange error. self.realdata is absolutely well defined!&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\NewPython27\Scripts\python.exe C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py startup execute (command)

Traceback (most recent call last):
File &amp;#34;C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py&amp;#34;, line 156, in wxApp = WxApp(redirect=False)
File &amp;#34;C:\NewPython27\lib\site-packages\wx\_core.py&amp;#34;, line 7978, in __init__ self._BootstrapApp()
File &amp;#34;C:\NewPython27\lib\site-packages\wx\_core.py&amp;#34;, line 7552, in _BootstrapApp return _core_.PyApp__BootstrapApp(*args, **kwargs)
File &amp;#34;C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py&amp;#34;, line 151, in OnInit self.appFrame = AppFrame()
File &amp;#34;C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py&amp;#34;, line 145, in __init__ self.mvcfacade.startup(self)
File &amp;#34;C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py&amp;#34;, line 135, in startup self.sendNotification(AppFacade.STARTUP, app);
File &amp;#34;C:\NewPython27\lib\site-packages\puremvc\patterns\facade.py&amp;#34;, line 265, in sendNotification notificationName, body, noteType
File &amp;#34;C:\NewPython27\lib\site-packages\puremvc\patterns\facade.py&amp;#34;, line 284, in notifyObservers self.view.notifyObservers(notification)
File &amp;#34;C:\NewPython27\lib\site-packages\puremvc\core.py&amp;#34;, line 306, in notifyObservers obsvr.notifyObserver(notification)
File &amp;#34;C:\NewPython27\lib\site-packages\puremvc\patterns\observer.py&amp;#34;, line 88, in notifyObserver self.getNotifyMethod()(notification)
File &amp;#34;C:\NewPython27\lib\site-packages\puremvc\core.py&amp;#34;, line 91, in executeCommand commandInstance.execute(note)
File &amp;#34;C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py&amp;#34;, line 93, in execute self.facade.registerProxy(DataModelProxy())
File &amp;#34;C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py&amp;#34;, line 106, in __init__ super(DataModelProxy, self).__init__(DataModelProxy.NAME, [])
File &amp;#34;C:\NewPython27\lib\site-packages\puremvc\patterns\proxy.py&amp;#34;, line 46, in __init__ self.setData(data)
File &amp;#34;C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py&amp;#34;, line 111, in setData self.realdata.data = data
AttributeError: &amp;#39;DataModelProxy&amp;#39; object has no attribute &amp;#39;realdata&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Central Patterns Repository</title>
      <link>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</link>
      <pubDate>Thu, 12 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2009/02/12/central-patterns-repository/</guid>
      <description>
        
        
        &lt;p&gt;Towards a central repository of Design Patterns&lt;/p&gt;
&lt;p&gt;An authoritative central repository of Design Patterns does not exist.  There is a book called &lt;a href=&#34;http://www.amazon.com/Pattern-Almanac-2000-Linda-Rising/dp/0201615673/ref=sr_1_4?ie=UTF8&amp;amp;s=books&amp;amp;qid=1236691007&amp;amp;sr=8-4&#34;&gt;The Pattern Almanac 2000&lt;/a&gt; by Linda Rising however this is no more than an index of patterns - nothing of substance except a one line descrtipion.  And furthermore, it leaves out hundreds if not thousands of patterns - scattered across books, websites and people&amp;rsquo;s code. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 Update: Central repositories on the internet are now commonplace. For IDE plugins, programming language library packages (&lt;code&gt;npm&lt;/code&gt; for Javascript, &lt;code&gt;pypi&lt;/code&gt; for Python etc.), apps, software components for linux etc. Its more difficult to create such systems for design patterns because patterns are more nebulous - requiring textual descriptions rather concrete code. As such the best source of patterns is &lt;a href=&#34;https://github.com/DovAmir/awesome-design-patterns&#34;&gt;Awesome Design Patterns&lt;/a&gt; which links to all sorts of other web pages and resources incl. lists of patterns used in particular domains e.g. &lt;a href=&#34;https://github.com/ziyasal/design-patterns-and-idioms-in-es6&#34;&gt;es6 design patterns&lt;/a&gt;, language specific patterns, &lt;a href=&#34;https://github.com/DovAmir/awesome-design-patterns#cloud-architecture&#34;&gt;cloud architecture patterns&lt;/a&gt;, &lt;a href=&#34;https://github.com/DovAmir/awesome-design-patterns#big-data&#34;&gt;Big Data patterns&lt;/a&gt; etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;prerequisites-for-a-repository&#34;&gt;Prerequisites for a repository&lt;/h2&gt;
&lt;p&gt;Any new effort needs to have broad support and a way of contributing without having to go through vetting.  This way people can contribute their own patterns and the project can utilise the community.  Better to have too many patterns than not enough.  Perhaps a &amp;ldquo;moderated&amp;rdquo; category could be added for higher quality entries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A specific &amp;ldquo;template&amp;rdquo; for inserting patterns would be a must.&lt;/li&gt;
&lt;li&gt;A UML diagram (png) - also a must.&lt;/li&gt;
&lt;li&gt;Code sample (any language / psuedo code) - highly desirable.  &lt;/li&gt;
&lt;li&gt;You could have a page of thumbnails of uml diagrams - very enticing way to browse the repository.&lt;/li&gt;
&lt;li&gt;Drop down tags for type of pattern - architectural, design, coding idiom.&lt;/li&gt;
&lt;li&gt;Tags for related patterns - not sure how the references would work, perhaps like a wiki, so each pattern should have a unique id (no spaces).  e.g. Observer or MVC or NullObject etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;on-the-copyrighted-design-pattern-material-in-books&#34;&gt;On the copyrighted design pattern material in books&lt;/h2&gt;
&lt;p&gt;Getting all the patterns from published design patterns books would be a boon - even if we could at least get the basic UML and idea of each pattern - and leave the copyrighted content alone.  Existing patterns books are a huge source of material if we could mine them.  It could perhaps be pitched to authors as a way of stimulating book sales since people who want to learn more could buy the book via the usual link to Amazon etc.&lt;/p&gt;
&lt;h2 id=&#34;other-ideas&#34;&gt;Other ideas&lt;/h2&gt;
&lt;p&gt;It might be good to see the existing class libraries of the programming languages (e.g. Java, .NET, Python, Delphi and PHP) mined for patterns - and there is a real opportunity there to form pattern languages of how these patterns fit together within the one language platform. &lt;/p&gt;
&lt;p&gt;The repository should include architectural patterns, design patterns and language and coding patterns (sometimes known as idioms) - forming a wonderful continuum of detail.  Of course the essential ideas in the deep implementation detail would probably be found at the high level and vice vera, such is the nature of reality. :-)&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;In the absence of a central repository, here are some links to lists of design patterns and books.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DovAmir/awesome-design-patterns&#34;&gt;Awesome Design Patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Pattern-Almanac-2000-Linda-Rising/dp/0201615673&#34;&gt;Amazon.com: The &lt;em&gt;Pattern&lt;/em&gt; Almanac 2000: Linda &lt;em&gt;Rising&lt;/em&gt;: Books&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20080516215348/http://www.vico.org/pages/PatronsDisseny.html&#34;&gt;A list&lt;/a&gt; of GOF patterns including part-whole and view-handler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.google.com.au/url?sa=t&amp;amp;source=web&amp;amp;ct=res&amp;amp;cd=2&amp;amp;url=http%3A%2F%2Fhillside.net%2Fplop%2F2005%2Fproceedings%2FPLoP2005_shasso0_3.pdf&amp;amp;ei=ftOLSfeRGonOsAPhz8H-CA&amp;amp;usg=AFQjCNHHTPiWHzhVz-2nolHMEYMz_JnnWA&amp;amp;sig2=bzx7wyq2Mj--05ehoO61ow&#34;&gt;A Theoretically-based Process for Organizing Design Pattern&lt;/a&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20070510145935/http://hillside.net/patterns/onlinepatterncatalog.htm&#34;&gt;Hillside.net - Online &lt;em&gt;Pattern Catalog&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There was a new project starting up in 2009 -  not sure what came of it. Perhaps more information can be found by contacting &lt;a href=&#34;https://scholar.google.com.au/scholar?q=Paris+Avgeriou+and+Uwe+Van+Heesch&amp;amp;hl=en&amp;amp;as_sdt=0&amp;amp;as_vis=1&amp;amp;oi=scholart&#34;&gt;Paris Avgeriou and Uwe Van Heesch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Netbeans Uml</title>
      <link>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</link>
      <pubDate>Wed, 11 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</guid>
      <description>
        
        
        &lt;p&gt;Let&amp;rsquo;s take a look at the UML and design pattern support in Netbeans and investigate Netbean&amp;rsquo;s cool ability to build &amp;ldquo;custom&amp;rdquo; design patterns - visually.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;UML and Design Pattern Support in Netbeans 6.5&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_bgnetbeans01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Netbeans is an opensource IDE from Sun and importantly Netbeans offers a wonderful GUI form designer plus UML facilities, which Eclipse doesn&amp;rsquo;t come bundled with out of the box.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unfortunately the UML support described in this article &lt;em&gt;has been removed&lt;/em&gt; from later versions of Netbeans. This article should be considered a historical article where we can learn from how this fascinating UML tool once worked. See also my &lt;a href=&#34;https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/&#34; title=&#34;Patterns, ModelMaker &amp;amp; Beyond&#34;&gt;blog post on ModelMaker&lt;/a&gt; (another discontinued tool) for a similarly groundbreaking UML tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Update: It seems there is &lt;a href=&#34;http://hg.netbeans.org/community-uml&#34;&gt;some activity&lt;/a&gt; on reviving this tool in 2020&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-uml-diagrammer&#34;&gt;The UML diagrammer&lt;/h2&gt;
&lt;p&gt;The UML diagramming is quite good.  You drag out objects from a palette or use the &amp;ldquo;hover palette&amp;rdquo; next to a class to drag out links to either existing or new classes.  This gui metaphor is nice to use and saves you constantly returning to a palette on the side of the screen in order to add objects and connections.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_01.png&#34; alt=&#34;62021233793272netbeanspic01.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Use the &amp;ldquo;hover palette&amp;rdquo; next to a class to drag out links to either existing or new classes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course you need a nice palette of UML objects too:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_02.png&#34; alt=&#34;99041233793360netbeanspic02.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Netbean&amp;rsquo;s UML palette&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-uml-model&#34;&gt;The UML &amp;ldquo;Model&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;Any UML you do in Netbeans requires you to create a special &amp;ldquo;UML project&amp;rdquo;.  This contains a model of your classes and methods etc. as objects.  The UML view is driven off the model.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can generate code OUT into another project&lt;/li&gt;
&lt;li&gt;You can reverse engineer code IN from another project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UML markers in the code help code sync e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_03.png&#34; alt=&#34;64891233793556netbeanspic03.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Markers in generated code - careful not to delete them&lt;br&gt;
unless you know what you are doing!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;which actually comprise comments with a unique guid e.g.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//   
// #\[regen=yes,id=DCE.548B84AB-2DF4-1944-BA69-85F33CA61C99\]  
// 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;code-generation&#34;&gt;Code generation&lt;/h2&gt;
&lt;p&gt;UML generates classes, interfaces, enums, methods and attributes No substantive code is generated Attributes can be one to many etc. When you click on a association line, select properties and select multiplicity, you get a choice of implementation e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_04.png&#34; alt=&#34;12741233793699netbeanspic04.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A choice of one to many implementations&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A lot of language make do with one list and one hash type and build it into thelanguage (e.g. python, ruby, groovy, javascript).  Hey but this is Java and you can&amp;rsquo;t make it too easy!  Of course there are special needs for different collection types, so this is a pretty cool way of picking the implementationn that you want.&lt;/p&gt;
&lt;p&gt;Note that you must specify the association as “navigable” to get an &amp;ldquo;arrow&amp;rdquo; on your line and to get any code generated for that association.&lt;/p&gt;
&lt;p&gt;Attribute code generation seems a bit buggy and often doesn’t compile E.g. Here is a class X having a one to many association with class Z&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.util.ArrayList&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;     &lt;span style=&#34;color:#6272a4&#34;&gt;// ok
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; Z mZ&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// surely Z should be ArrayList
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; ArrayList &lt;span style=&#34;color:#50fa7b&#34;&gt;getZ&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; mZ&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setZ&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ArrayList val&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;mZ&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; val&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in the above code you don&amp;rsquo;t get your X.Add(z) method you instead get some strange setter which accepts an entire arraylist - as if anyone does that.&lt;/p&gt;
&lt;h3 id=&#34;freemarker-templates&#34;&gt;Freemarker templates&lt;/h3&gt;
&lt;p&gt;Code generation using Freemarker templates.&lt;/p&gt;
&lt;p&gt;You can build code generation templates to generate more substantial code.  Netbeans uses this templating system throughout itself e.g. the default java class stub you get when you create a new java class is a freemarker template.&lt;/p&gt;
&lt;p&gt;To generate code using freemarker via UML you need to mark your UML classes with stereotypes and associate those stereotypes with a template. &lt;/p&gt;
&lt;p&gt;Unfortunately the whole code generation aspect is currently poorly documented and there is no API published except a code class interface that one is meant to decipher. The one &lt;a href=&#34;http://www.netbeans.org/kb/61/uml/codegen.html&#34;&gt;tutorial&lt;/a&gt; uses a 441 line freemarker template to generate a couple of lines of code !!  And the Sun developers in this area claim there are no resources to provide any more documentation.  &lt;img src=&#34;%7BCCM:BASE_URL%7D/concrete/js/tiny_mce_309/plugins/emotions/img/smiley-cry.gif&#34; alt=&#34;Cry&#34; title=&#34;Cry&#34;&gt;  View the forum discussion &lt;a href=&#34;http://markmail.org/search/?q=uml+code+generation+pattern#query:uml%20code%20generation%20pattern+page:1+mid:dvdtp22m2f7qq4hb+state:results&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;design-pattern-support&#34;&gt;Design Pattern Support&lt;/h2&gt;
&lt;p&gt;All GOF patterns supplied as templates which you can graft into your workspace:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_05.png&#34; alt=&#34;19881233794183netbeanspic05.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Invoking the design pattern wizard.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can specify existing classes as fulfilling roles, or have the wizard create new classes for those roles:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_06.png&#34; alt=&#34;24371233794247netbeanspic06.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mapping design pattern roles to existing or new classes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Again, only the basic structure of the pattern is created – you get no actual substantive code.  For example with the Singleton pattern you get the getInstance() method generated but there is no code inside! Here is the class before and after:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_07.png&#34; alt=&#34;98491233794359netbeanspic07.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Before and after applying the Singleton design pattern.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And the code that was generated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WhiteHouse&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; WhiteHouse uniqueInstance&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// correct
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; singletonData&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WhiteHouse&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// should have been made private   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;                       &lt;span style=&#34;color:#6272a4&#34;&gt;// to prevent multiple instantiations
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; WhiteHouse &lt;span style=&#34;color:#50fa7b&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// correct declaratation  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;// but sorely needs functional code here...instead of returning null !  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;singletonOperation&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getSingletonData&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; 0&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// huh? Shouldn&amp;#39;t this return this.singletonData ?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It seems that when generating sub methods, if the method returns a value, there is some default code generation which returns null or 0 or something that will allow the generated code to compile.  However this might confuse newcomers who perhaps see this generate code as properly functinal in some way.  Let me repeat, there is no code generation of body code from design patterns except for the default return values that you normally get with UML code generation.&lt;/p&gt;
&lt;p&gt;Yes you can generate code from UML but that requires that you write FreeMarker templates and associate these templates with stereotypes (just set the stereotype property of a uml class or method).  The design patterns don&amp;rsquo;t apply these stereotypes, nor do they provide any freemarker code generation templates.&lt;/p&gt;
&lt;p&gt;Without code generation the design patterns are of limited value.  Code generation is extremely difficult, relying on Freemarker template technology and next to no documentation.  I am hoping that &amp;ldquo;marking&amp;rdquo; design pattern related classes with stereotypes will solve the code generation problem - but nobody seems to have actually done it&lt;br&gt;
The code generation that exists is buggy anyway esp. with multiplicity of attributes.&lt;/p&gt;
&lt;h2 id=&#34;custom-design-patterns&#34;&gt;Custom Design Patterns&lt;/h2&gt;
&lt;p&gt;One really nice thing is being able to create your own design patterns.  No coding or compilation is needed, just draw the diagram and save.  From the Tools/Other menus select the UML design centre:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_08.png&#34; alt=&#34;26961233795033netbeanspic08.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Invoking the UML Design Centre from a menu&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here you can view the existing patterns in the patterns &amp;ldquo;design centre&amp;rdquo;.  It is very easy to create a folder and add your own patterns. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_09.png&#34; alt=&#34;31261233795173netbeanspic09.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The UML Design Centre, where you can add your own patterns.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To create your own pattern simply draw a diagram of your pattern classes using a few special diagram objects - the collaboration and role objects:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_10.png&#34; alt=&#34;54611233795260netbeanspic10.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The UML palette relating to design patterns.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can only use the UML palette relating to design patterns whilst in the UML design centre, despite it being visible during normal UML operations.  This is a little confusing, especially as I&amp;rsquo;d love to be able to document my patterns once they have been applied, using the collaboration object - dragging a named role line to each class involved in the pattern&amp;hellip;&lt;/p&gt;
&lt;p&gt;When building a design pattern, instead of adding a class you add a &amp;ldquo;class role&amp;rdquo; object from this special design pattern palette.  The role objects are placeholders for a new or existing classes (or use cases or interfaces etc.), which you can fill in using combo drop downs etc. when the pattern is finally applied via the design pattern wizard.&lt;/p&gt;
&lt;p&gt;You link all the roles together with a collaboration object and you are done.  The collaboration object lets you name your pattern and becomes the anchor for all the roles.  Its a pity you don&amp;rsquo;t get collaboration object in regular diagramming in order to document your patterns once they have been applied.  You can instead use notes with multiple links (though this doesn&amp;rsquo;t let you label the links) or make do with tagging your UML classes with stereotypes, indicating the roles e.g. Adapter, Adaptee, Client etc.&lt;/p&gt;
&lt;p&gt;Here is a pattern I created:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_11.png&#34; alt=&#34;64361233795523netbeanspic11.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An example custom design pattern!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The example is a bit contrived, but you get the idea.  Once you build your pattern you can immediately go back to your normal workspace and apply it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_12.png&#34; alt=&#34;25671233795780netbeanspic12.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Applying my new pattern to my workspace.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;annoyances&#34;&gt;Annoyances&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In UML new classes are always created in the package in which the diagram resides, so you may need to move them to the correct package&lt;/li&gt;
&lt;li&gt;Right click shows disabled items in popup menu then right click again at slightly different pixel position and items are enabled again&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t copy and paste methods and attributes&lt;/li&gt;
&lt;li&gt;Weird keyboard combinations e.g. CTRL-ALT-SHIFT-N for pan&lt;/li&gt;
&lt;li&gt;Newly generated code java files don&amp;rsquo;t always appear in the project so you have to close and reopen the target project or wait till some emergency timer refresh kicks in.&lt;/li&gt;
&lt;li&gt;Synch to and fro is a pain and error prone. Whilst code rarely gets clobbered you can get unexpected multiple declarations of variables, loss of associations in your UML diagrams when re-reverse engineering (esp if generated by design pattern workflow)&lt;/li&gt;
&lt;li&gt;Code generation concepts &amp;ldquo;Add Merge Markers to Existing Source Elements&amp;rdquo; and &amp;ldquo;Generate Markers for Source File Merging&amp;rdquo; too complex, IMO.&lt;/li&gt;
&lt;li&gt;Apply a design pattern twice and you get two generalisation relationships between classes and other silly bugs&lt;/li&gt;
&lt;li&gt;Be careful when using design pattern &amp;ldquo;automation&amp;rdquo;.  The particular pattern implementation may not suit you situation.  For example &amp;ldquo;Adapter&amp;rdquo; is a object adapter not a class adapter. You need to understand patterns anyway to use these tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I found Netbeans to be generally very cool, fast and stable.  The UML tool is generally nice to use.  Its really a pity that the UML code generation is a bit buggy and that UML custom code generation is undocumented and uber complex.  The Design Patterns support and customization in Netbeans is outstanding (not at the level of IBM Rational though).  Again its a pity there is no design patterns code generation support, and that this part of Sun&amp;rsquo;s roadmap seems to be a dead end.  They even say on their &lt;a href=&#34;http://plugins.netbeans.org/plugin/1801/netbeans-uml&#34;&gt;UML plugin home page&lt;/a&gt; that if you want more - use the Visual Paradigm plugin for Netbeans. I live in hope that this opensource tool can be improved though.  Maybe I should start looking at the code base myself&amp;hellip; :-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seems there is &lt;a href=&#34;http://hg.netbeans.org/community-uml&#34;&gt;some activity&lt;/a&gt; on reviving this tool in 2020&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: State Pattern in Flex</title>
      <link>https://abulka.github.io/blog/2008/09/11/state-pattern-in-flex/</link>
      <pubDate>Thu, 11 Sep 2008 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2008/09/11/state-pattern-in-flex/</guid>
      <description>
        
        
        &lt;p&gt;A tutorial on how to implement the State design pattern in Flex 3.  We are going to have a traffic light move through several states (red, orange, green).  Of course there are other states the traffic light might be in, as well as transitional states (green and orange at the same time), but lets keep things simple!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note Flex and Flash are discontinued technologies. You can still run &lt;code&gt;.swf&lt;/code&gt; files locally on your computer using &lt;a href=&#34;https://www.online-tech-tips.com/computer-tips/flash-player-in-chrome-is-dead-in-2020-how-to-play-flash-files/#:~:text=Using%20The%20Adobe%20Flash%20Player,projector%20content%20debugger%20from%20Adobe.&#34;&gt;these&lt;/a&gt; instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are four approaches discussed here.  The first approach (version 1) uses flash for the graphics and flex for the logic.  The second approach (version 2)  uses two additional techniques within flex itself (no flash) to decouple graphics from logic.  My thanks for Carl de Jager for his assistance in talking through these designs with me and helping to code them.&lt;/p&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/9bRXxnPSo2f7tc&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/tcab22/state-pattern-in-flex&#34; title=&#34;State Pattern In Flex&#34;&gt;State Pattern In Flex&lt;/a&gt;&lt;/strong&gt; by &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/tcab22&#34;&gt;Andy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;state-design-pattern&#34;&gt;State Design Pattern&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m not going to go into the intricate details of state design pattern here, but at least here is the basic classic UML&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-stateuml.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In our case the states will offer a &lt;code&gt;Display()&lt;/code&gt; method and an &lt;code&gt;EmitSound()&lt;/code&gt; method. &lt;/p&gt;
&lt;p&gt;Each concrete state will impement these differently.  The client code only knows about the &amp;lsquo;context&amp;rsquo; class on the left - it is up to the context class to track which state it is in by holding a reference to a concrete state instance, and switching to a different concrete state instance when the state changes.  Client method calls (in our case &lt;code&gt;Display()&lt;/code&gt; and &lt;code&gt;EmitSound()&lt;/code&gt;) to the context class (in our case called &lt;code&gt;TrafficLightController&lt;/code&gt;) are routed to the concrete state instance that happens to be there at the time, resulting in different behaviour depending on the state.  Thus we do away with messy if then else logic and as a bonus can plug in future extra states easily without recoding any if else statements.&lt;/p&gt;
&lt;h2 id=&#34;version-1&#34;&gt;Version 1&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-swf-demo1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The embedded flash object (showing our demo) is unable to run in modern browsers so an animation is playing instead.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;implementation-steps&#34;&gt;Implementation Steps&lt;/h3&gt;
&lt;p&gt;So what we do in version 1 is to create both a Flex project and a Flash project. We leverage Flash&amp;rsquo;s ability to create nice graphics and animations etc. and leave the logic for the superior Flex environment (actionscript 3, more modern architecture, IDE suited for serious OO programmers etc) to handle.&lt;/p&gt;
&lt;p&gt;On the flash side of things we create&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traffic light graphics (red, green and orange circles plus a background)&lt;/li&gt;
&lt;li&gt;Reify a circle graphic as a symbol named &amp;rsquo;light&amp;rsquo;.  Create 3 instances of this and change the color accordingly.  Name the instances mc_red_light, mc_orange_light and mc_green_light&lt;/li&gt;
&lt;li&gt;Create a combined symbol named &amp;lsquo;TrafficLight&amp;rsquo; containing the three lights and a background graphic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-stateinflexvers1flash01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;So that we can refer to the flash symbol from Flex ensure that the TrafficLight symbol in the Library is marked as inheriting from our custom Flex class &lt;code&gt;com.TrafficLightController&lt;/code&gt; class (which we will create below, and which itself inherits from &lt;code&gt;mx.flash.UIMovieClip)&lt;/code&gt;.  &lt;em&gt;In Flash, you can right click on the symbol name in the Library pane to open the Linkage Properties dialog box to see this settings.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-stateinflexvers1flash02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We then need to include the flash &lt;strong&gt;trafficlight.swc&lt;/strong&gt; as an asset in our flex project so that we can refer to it from our flex code. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-stateinflexvers1flash03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now we switch over to Flex for the rest of the coding process.&lt;/p&gt;
&lt;h3 id=&#34;here-is-the-main-flex-code&#34;&gt;Here is the main flex code&lt;/h3&gt;
&lt;p&gt;Fire up the main MXML form and enter the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.mxml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Application&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns:mx=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://www.adobe.com/2006/mxml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;layout=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vertical&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns:local=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;creationComplete=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;init()&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;186&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;height=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;local:TrafficLight&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;trafficLight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;59&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;height=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;138&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:HBox&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:VBox&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;label=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;show red light&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;100%&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;click=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;trafficLight.setState(TrafficLightStates.RED_STATE)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;label=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;show orange light&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;100%&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;click=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;trafficLight.setState(TrafficLightStates.ORANGE_STATE)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;label=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;show green light&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;100%&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;click=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;trafficLight.setState(TrafficLightStates.GREEN_STATE)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/mx:VBox&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/mx:HBox&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; import com.TrafficLightStates;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; private function init():void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;    trafficLight.setState(TrafficLightStates.RED_STATE);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; ]]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/mx:Script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/mx:Application&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that we refer to the flash object with the phrase&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;local:TrafficLight&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;trafficLight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;59&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;height=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;138&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;controller-code&#34;&gt;Controller code&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;TrafficLightController.as&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; flash.display.MovieClip;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; mx.flash.UIMovieClip;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; TrafficLightController &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; UIMovieClip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; _states&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Array&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Array&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; _state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;ITrafficLightState;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; TrafficLightController()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			_states &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Array&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			_states[TrafficLightStates.RED_STATE] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; RedState(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			_states[TrafficLightStates.ORANGE_STATE] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; OrangeState(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			_states[TrafficLightStates.GREEN_STATE] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; GreenState(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#6272a4&#34;&gt;// ------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#6272a4&#34;&gt;// COMMANDS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#6272a4&#34;&gt;// ------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; setState(name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			_state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; _states[name];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			display();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; display()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			switchOffAllLights();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			_state.display();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; emitSound()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			_state.emitSound();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		internal &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; switchOffAllLights()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			red_light.visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			orange_light.visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			green_light.visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#6272a4&#34;&gt;// ------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#6272a4&#34;&gt;// QUERIES
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#6272a4&#34;&gt;// ------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		internal &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; get red_light()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;MovieClip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; getChildByName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mc_red_light&amp;#34;&lt;/span&gt;) as MovieClip;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		internal &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; get orange_light()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;MovieClip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; getChildByName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mc_orange_light&amp;#34;&lt;/span&gt;) as MovieClip;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		internal &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; get green_light()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;MovieClip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; getChildByName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mc_green_light&amp;#34;&lt;/span&gt;) as MovieClip;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;traffic-light-states&#34;&gt;Traffic Light States&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;TrafficLightStates.as&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; TrafficLightStates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; RED_STATE&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;RED_STATE&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; ORANGE_STATE&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ORANGE_STATE&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; GREEN_STATE&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GREEN_STATE&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;itrafficlightstate-interface&#34;&gt;ITrafficLightState interface&lt;/h3&gt;
&lt;p&gt;Traffic Light States all follow this interface&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ITrafficLightState.as&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;interface&lt;/span&gt; ITrafficLightState
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; display()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; emitSound()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; get context()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;concrete-states&#34;&gt;Concrete states&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;RedState.as&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; RedState &lt;span style=&#34;color:#ff79c6&#34;&gt;implements&lt;/span&gt; ITrafficLightState
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; _context&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; RedState(context&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			_context &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; get context()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; _context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; display()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			context.red_light.visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; emitSound()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;GreenState.as&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; GreenState &lt;span style=&#34;color:#ff79c6&#34;&gt;implements&lt;/span&gt; ITrafficLightState
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; _context&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; GreenState(context&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; _context &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; get context()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; _context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; display()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; context.green_light.visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; emitSound()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;OrangeState.as&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; OrangeState &lt;span style=&#34;color:#ff79c6&#34;&gt;implements&lt;/span&gt; ITrafficLightState
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; _context&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; OrangeState(context&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; _context &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; get context()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TrafficLightController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; _context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; display()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; context.orange_light.visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; emitSound()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;
&lt;p&gt;The flex code within the concrete state classes ends up setting the visibility of the individual flash graphic components.  Remember the flash graphics are really dumb and have no logic in them.  The flex code refers to the flash graphic symbols with the following technique&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;return&lt;/strong&gt; getChildByName(&amp;ldquo;mc_red_light&amp;rdquo;) as MovieClip;&lt;/p&gt;
&lt;p&gt;which dynamically looks up the graphic and hands it to the flex code which then sets the &lt;strong&gt;.visible&lt;/strong&gt; property as needed. Ironically the code that drives the flash color changing lives in the TrafficLightController class, as a bunch of utility methods that the concrete state classes call upon.  Note also that the EmitSound() method is not implemented in this project.&lt;/p&gt;
&lt;h3 id=&#34;uml&#34;&gt;UML&lt;/h3&gt;
&lt;p&gt;Here is the UML of the solution.  Click for larger image.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-juststatepart-simplevers.png&#34;&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-juststatepart-simplevers.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-flexflashUML.png&#34;&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-flexflashUML.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note how the user drives the flex MXML form which holds a reference to the flash object.  See how the flash object inherits from the TrafficLightController class thereby we auto-magically graft on smart behaviour to the dumb flash symbol.&lt;/p&gt;
&lt;p&gt;The TrafficLightControllerclass is the &amp;lsquo;context&amp;rsquo; in our State design pattern and holds an instance of a state object.  The states are singletons kept in an array, so that we don&amp;rsquo;t have to keep creating and deleting state instances (this is a common implementation trick when implementing state pattern).&lt;/p&gt;
&lt;h2 id=&#34;version-2&#34;&gt;Version 2&lt;/h2&gt;
&lt;p&gt;Just to be bold and learn flex more deeply, here are another three solutions to implementing the traffic light using design state pattern in flash and flex. I have created three different implementations within the one architecture.  We use the following techniques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accessing a flash component (as before) but now with skinning&lt;/li&gt;
&lt;li&gt;Pure Flex solution with the graphics as images assembled purely in MXML, code inside the mxml file&lt;/li&gt;
&lt;li&gt;Pure Flex solution, graphics in MXML, code in a separate proper flex class - using a technique known as &amp;lsquo;code behind&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the resulting flash application - &lt;del&gt;go on and click on the buttons!&lt;/del&gt;
&lt;em&gt;The embedded flash object (showing our demo) is unable to run in modern browsers so an animation is playing instead.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-swf-demo2.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;implementation-steps-1&#34;&gt;Implementation Steps&lt;/h3&gt;
&lt;p&gt;I won&amp;rsquo;t list all the code, however here is the MXML file for the all in one solution version&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Canvas&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns:mx=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://www.adobe.com/2006/mxml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;implements=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;com.ITrafficLightView&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;width=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;59&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;height=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;138&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;initialize=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;init()&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Image&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;x=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;y=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;source=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TrafficLightSkin_box&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Image&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;red_light&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;x=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;19&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;y=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;36&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;source=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TrafficLightSkin_red_light&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Image&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;orange_light&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;x=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;19&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;y=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;69&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;source=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TrafficLightSkin_orange_light&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Image&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;green_light&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;x=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;19&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;y=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;103&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;source=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TrafficLightSkin_green_light&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;mx:Script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			private var _controller:TrafficLightController;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			private function init():void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				setController(new TrafficLightController(this));
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			public function setController(val:TrafficLightController):void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				_controller = val;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			public function setState(val:String):void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				_controller.setState(val);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			public function emitSound():void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				_controller.emitSound();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			public function display():void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				_controller.display();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			public function getController():TrafficLightController
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				return null;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			public function setRed():void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				switchOffAllLights();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				red_light.visible = true;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			public function setOrange():void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				switchOffAllLights();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				orange_light.visible = true;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			public function setGreen():void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				switchOffAllLights();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				green_light.visible = true;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			// HELPERS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			internal function switchOffAllLights():void
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				red_light.visible = false;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				orange_light.visible = false;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;				green_light.visible = false;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;		]]&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/mx:Script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/mx:Canvas&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;uml-1&#34;&gt;UML&lt;/h3&gt;
&lt;p&gt;Here is the UML of the solution.  Click for larger image.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-juststatepatternforflex3.png&#34;&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-juststatepatternforflex3.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-complexStateFlexUml1.png&#34;&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-complexStateFlexUml1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;why-is-the-above-uml-so-complex&#34;&gt;Why is the above UML so complex?&lt;/h3&gt;
&lt;p&gt;Because we are trying to implement three different techniques in the one example, the UML gets complex. In all cases the state design pattern model logic is the same, which is good code reuse.  We use adapters (another design pattern) to accommodate three different implementations within the one architecture, which itself is pretty cool.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/state-pattern-in-flex-stateinflexv2flash02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the classes handling the graphics display (red/orange/green lights and associated buttons) are actually fairly lightweight, and indicated in dark yellow.&lt;/p&gt;
&lt;p&gt;The complexity is really in the &amp;ldquo;adapter&amp;rdquo; classes above them which house the code to implement the ITrafficView interface (allowing for our 3 variant implementations in the one architecture approach) and which allows the graphic classes to remain dumb and small.&lt;/p&gt;
&lt;p&gt;The benefit of this approach (besides learning about how to do the same thing in different ways within flex and thereby understanding flex better) is that we can change the graphic implementation at any time without changing our core business logic model, and our state design pattern (which resides in the model) also remains stable.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;Flex Project &lt;a href=&#34;https://abulka.github.io/files/state-pattern-in-flex-TrafficState2.zip&#34;&gt;zip&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Extract Composite Refactoring</title>
      <link>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</link>
      <pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</guid>
      <description>
        
        
        &lt;h1 id=&#34;extract-composite---refactoring-to-a-pattern&#34;&gt;Extract Composite - Refactoring to a Pattern&lt;/h1&gt;
&lt;p&gt;Refactoring existing code so that it improves and conforms to a design pattern can be a good thing.  Your code will be easier to understand since it follows a known &amp;lsquo;pattern&amp;rsquo;.  Of course you have to need the change - your code will probably be uncomfortable to read and be crying out for clarification.&lt;/p&gt;
&lt;p&gt;This refactoring is about implementing a one to many relationship in your code more clearly by refactoring to the Composite design pattern.&lt;/p&gt;
&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;
&lt;iframe style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;&#34; src=&#34;//www.slideshare.net/slideshow/embed_code/key/CZeskH10aSCnUt&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;595&#34; height=&#34;485&#34;&gt; &lt;/iframe&gt;
&lt;h2 id=&#34;uml---before-and-after&#34;&gt;UML - Before and After&lt;/h2&gt;
&lt;p&gt;Here is the situation before and after the refactoring, in hand drawn UML.&lt;/p&gt;
&lt;h3 id=&#34;uml-before&#34;&gt;UML Before&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/extract-CompositeBefore.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;problem&lt;/strong&gt; with the &amp;ldquo;before&amp;rdquo; situation is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The child looping logic is duplicated twice - once in the &lt;code&gt;FormTag&lt;/code&gt; class and again in the &lt;code&gt;LinkTag&lt;/code&gt; class.  And we all know that code duplication is evil and hard to maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By refactoring, we remove the code duplication to a common base class.&lt;/p&gt;
&lt;h3 id=&#34;uml-after&#34;&gt;UML After&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/extract-CompositeAfter.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use the &amp;ldquo;extract composite&amp;rdquo; refactoring to put the common looping behaviour in the display() method of a common composite class.&lt;/li&gt;
&lt;li&gt;We make the existing classes subclasses of this new composite class.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code---before-and-after&#34;&gt;Code - Before and After&lt;/h2&gt;
&lt;p&gt;Here is a python example of the above refactoring.  Note that the display() method is actually called toPlainTextString() in this example.&lt;/p&gt;
&lt;h3 id=&#34;code-before&#34;&gt;Code Before&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Before&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FormTag&lt;/span&gt;(Node):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;LinkTag&lt;/span&gt;(Node):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;linkData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;linkData:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; FormTag()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; LinkTag()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;linkData &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; [Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;), Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;then-we-apply-the-following-steps&#34;&gt;Then we apply the following steps&amp;hellip;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create a Composite Class - compile&lt;/li&gt;
&lt;li&gt;Make each child container (a class in the hierarchy that contains duplicate child-handling code) a subclass of your composite - compile&lt;/li&gt;
&lt;li&gt;For each method with duplicated looping code
&lt;ul&gt;
&lt;li&gt;Move &amp;amp; rename the child reference field UP to the composite using &amp;ldquo;Pull Up Field&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Move the method UP to the composite using &amp;ldquo;Pull Up Method&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Pull up any relevant constructor code too.&lt;/li&gt;
&lt;li&gt;Check interfaces so that client code using the old composites still works.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;code-after&#34;&gt;Code After&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# After&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Composite&lt;/span&gt;(Node):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FormTag&lt;/span&gt;(Composite):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;LinkTag&lt;/span&gt;(Composite):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; FormTag()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; LinkTag()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; [Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;), Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;does-the-refactoring-break-anything&#34;&gt;Does the refactoring break anything?&lt;/h3&gt;
&lt;p&gt;A proper refactoring means you don&amp;rsquo;t break anything and everything behaves as before.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python before.py
abc  
xyz

python after.py
abc  
xyz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Confirmed - we get the same output in both cases. :-)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Teaching 23 Patterns</title>
      <link>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</link>
      <pubDate>Tue, 23 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2007/01/23/teaching-23-patterns/</guid>
      <description>
        
        
        &lt;h1 id=&#34;teaching-23-patterns-in-3-days&#34;&gt;Teaching 23 patterns in 3 days&lt;/h1&gt;
&lt;p&gt;I have been running a &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=64&#34; title=&#34;Design Patterns Training Courses&#34;&gt;design patterns course&lt;/a&gt; for several years where I teach 23 design pattern patterns in 3 days.  I cover all the GOF (Gang of Four) patterns plus more.  Here are some tales from the front lines!&lt;/p&gt;
&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;
&lt;p&gt;Having attended Melbourne Patterns Group meetings for quite a few years (what wonderful discussions we have there!), and having written up three design patterns of my own, I decided to teach a design patterns course and offer it commercially.&lt;/p&gt;
&lt;p&gt;The course has been running for over four years now (now is 2007) with between six to twelve attendees.  Often a company will send a couple of employees to the same course so there are groups of students who already know each other – which is often interesting as they sometimes have discussions in front of the whole group about how a particular pattern could be applied to the software they are both working on in their companies.&lt;/p&gt;
&lt;h2 id=&#34;how-i-start-the-course&#34;&gt;How I start the course&lt;/h2&gt;
&lt;p&gt;I begin with a PowerPoint presentation where I run through the basics of what patterns are and where they came from.  I stress their benefit in communicating and transferring wisdom between programmers.  I place a low emphasis on “pattern culture” and refrain from telling tales about Christopher Alexander (the architect who started the patterns movement in architecture) – it is more of a practical course.&lt;/p&gt;
&lt;p&gt;I have found that it is critical to revise a bit of OO (Object Oriented Programming) at the beginning of the course, as most of the patterns rely on OO concepts.   And it sort of warms everybody up and gets everybody on the same page in terms of concepts like interfaces, inheritance, composition, polymorphism etc.  I also do a session on basic UML - as all the patterns I present are expressed in this notation.&lt;/p&gt;
&lt;h2 id=&#34;history-of-the-course-materials&#34;&gt;History of the Course Materials&lt;/h2&gt;
&lt;p&gt;I provide a 300+ page course manual which I edit and improve before each course.  During the course I make notes to myself relating to anything that is unclear, typos or any new ideas that come up during the course that I can incorporate back into the course manual.&lt;/p&gt;
&lt;p&gt;Historically, writing a training course manual is a major part of getting a course going - it took me many months to write.  I began with a handwritten brainstorming outline of all the GOF design patterns – here is an ancient extract from my original starting notes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/teaching-23-OldNotes.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I then massaged everything into a proper Microsoft Publisher document, adding content, tips and code examples.  I later had to shift to using Microsoft Word 2007 because I needed a dynamic table of contents facility which for some reason Publisher doesn’t support. &lt;/p&gt;
&lt;p&gt;Here is an example of what the course manual looks like now:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/teaching-23-NewNotes1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/teaching-23-NewNotes2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-i-present&#34;&gt;How I present&lt;/h2&gt;
&lt;p&gt;For each design pattern, I get each student to read the first page of the pattern from the course notes.  This way each student ‘owns’ a pattern or two (we usually cycle around the students at least twice to get through the 23 patterns).  It also engages the students a bit more keeping them awake (and possible terrified or excited). &lt;/p&gt;
&lt;p&gt;I follow that by a whiteboard presentation followed by my leaping onto a computer and building a code example from scratch.  &lt;/p&gt;
&lt;p&gt;I used to select patterns at random, depending on my mood and on what I thought the students would relate to best next.  For example some patterns flow on from other patterns e.g. you need to understand the strategy design pattern early, as a lot of other patterns use this technique.  The feedback I got sometimes expressed the preference for a fixed order of presentation so that it matched the order of the printed course materials.  So from then on I changed the way I did things.  I settled on a teaching order based on the reasoning of Joshua Kerievsky  in his &lt;a href=&#34;http://www.industriallogic.com/papers/learning.html&#34;&gt;A Learning Guide To Design Patterns&lt;/a&gt; – which meant rearranging the teaching manual etc.  I got no more complaints then and quite possibly the course is more effective because of the way the patterns build upon each other.&lt;/p&gt;
&lt;h2 id=&#34;code-examples&#34;&gt;Code Examples&lt;/h2&gt;
&lt;p&gt;I quite often start building the examples from a UML diagramming tool like &lt;a href=&#34;http://www.bluej.org/about/what.html&#34;&gt;BlueJ&lt;/a&gt; in order to create the classes – then I fill out the code.  This way we keep our attention on the high level design pattern usage.  My code examples are in Java, C# and occasionally in Python – in my training courses you never know what the preferred development language of the students is – so my examples are evenly mixed between C# and Java with the occasional Python example thrown in to add something new into to the mix.&lt;/p&gt;
&lt;p&gt;When building a code example – I like to do it from scratch – as I believe that pre-canned code examples are murky and mysterious – better to have everyone understand and see everything – and that means building examples from the beginning.  I used to pride myself on “jamming” (like jazz improvisation) and used to code live in front of the class - but due to the stress and amount of code involved, especially in some of the more complex examples, I now copy and paste code from the student notes using a keyboard macro facility which types the code slowly – as if I am typing it.  This alleviates the stress, allows me to commentate and doesn’t bore the audience with my typos.  &lt;/p&gt;
&lt;p&gt;I always build examples that compile and run – either achieving some result or passing some set of unit tests.  Sometimes I adapt the examples as needed with variable names and method names invented by the group, so that the code feels more personalized and meaningful, and sometimes also we jam with the code a little to experiment with variations, in order to learn more.  At the end of the training course I provide all the code we develop to anyone who wants it - on USB stick or via email.&lt;/p&gt;
&lt;h2 id=&#34;puzzles&#34;&gt;Puzzles&lt;/h2&gt;
&lt;p&gt;Sometimes I preceded the presentation of a pattern with a puzzle and ask student to sketch out a solution to a problem themselves which gives the students some personal time to think and design.  And when I present the elegant solution using the relevant design pattern, the student appreciates it better because he or she has struggled with the problem themselves.  Note that I don’t actually have students using laptops as this is a recipe for students becoming distracted – it’s all done on paper.  If I ever get to expand (or rather get paid for a presenting) my 3 day course to 4 days, then there will be more time for these useful puzzle sessions.&lt;/p&gt;
&lt;h2 id=&#34;from-a-teaching-point-of-view&#34;&gt;From a teaching point of view&lt;/h2&gt;
&lt;p&gt;Teaching these courses requires a lot of energy as we move at a rate of seven patterns a day.  You have to engage the room and make it entertaining - filled with insight and technical detail.  I’m not sure about the students, but after the course finishes on the 3rd night I usually collapse into a deep coma sleep well into the next morning.  It’s a lot for students to absorb too, though most good programmers handle the amount of information presented well and come away excited.&lt;/p&gt;
&lt;p&gt;As programmers are a highly intelligent bunch, I constantly have to handle probing questions – which I try to answer as honestly as I can.  I&amp;rsquo;ve tried to become more precise over the years – answering the exact question rather than converting it into yet another convenient question which helps in the learning process.  During some earlier courses I felt I was answering questions like a politician, especially if I felt the questions were half-baked and that our time was better spent answering a more profound question.  But I didn’t like the feeling of being a politician so I try to answer every question as it stands.  There is also a delicate balance between being an authority and my not knowing.  Whilst there are situations (especially in the wide and wonderful world of design patterns and OO design) where there is no clear answer to a question, too much uncertainty is not good for a training course where certainty is expected.&lt;/p&gt;
&lt;p&gt;I encourage a certain amount of group discussion.  Its powerful letting students think and debate for themselves.  I put clues and questions their way during the discussion in order to facilitate the learning outcomes.  You have to not let it go on too long and stay on schedule.&lt;br&gt;
Students have different personalities - there are active students who get right into it and then you get the quiet ones who just listen most of the time (until they have to read their pattern!).  And funnily enough the cross-section of the groups always seem to form a similar pattern: usually two or three positive and really bright sparks, one or two slower students, always one slightly grumpy negative student, and the rest are just normal.&lt;/p&gt;
&lt;h2 id=&#34;future-directions&#34;&gt;Future Directions&lt;/h2&gt;
&lt;p&gt;Last time I wrote a &amp;ldquo;future directions&amp;rdquo; section (in an earlier version of this blog) I promised to present patterns in a known order - exactly matching the training manual – this I now do and it has been a worthwhile change.  I also promised that I would add more code samples – and this is now the case – every pattern has at least one code example.  &lt;/p&gt;
&lt;p&gt;In terms of the future, I would love to actually deliver more of these courses, and would like to try a 4 day course so that we get more time for puzzles etc. and spend more time exploring UML tools that support design pattern automation etc.  Most employers don’t like to lose their programmer for so long - even three days is pretty long, so a shorter course – a 2 day course – is something I am also offering now.  I’ve done one day course before too, but in the end my favorite course is the classic 3 day course where we get to cover all the basic 23 GOF design patterns.&lt;/p&gt;
&lt;p&gt;-Andy&lt;/p&gt;
&lt;p&gt;For details on my course click &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=64&#34; title=&#34;Design Patterns Training Courses&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Tooled Composite Pattern</title>
      <link>https://abulka.github.io/blog/2006/03/01/tooled-composite-pattern/</link>
      <pubDate>Wed, 01 Mar 2006 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2006/03/01/tooled-composite-pattern/</guid>
      <description>
        
        
        &lt;p&gt;Ever wanted to create a &amp;ldquo;direct manipulation&amp;rdquo; program where you select various tools and manipulate stuff on a workspace?  These sorts of applications are quite difficult to build due to the many possible combinations of behavior that is needed.  Every tool must know what to do with each type of object.  How do we manage this sort of complexity?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you represent shapes?&lt;/li&gt;
&lt;li&gt;How do you represent tools?&lt;/li&gt;
&lt;li&gt;How do tools and shapes interact?&lt;/li&gt;
&lt;li&gt;How do you enhance the editor with new shapes and tools?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tooled-composite---architectural-design-pattern&#34;&gt;Tooled Composite - Architectural Design Pattern&lt;/h2&gt;
&lt;p&gt;The GOF (gang of four) author John Vlissides documented this pattern in &lt;a href=&#34;https://web.archive.org/web/20061230172238/http://www.research.ibm.com/designpatterns/pubs/ph-sep99.pdf&#34;&gt;this paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/tooled-composite-uml.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tooled Composite Pattern UML&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;
&lt;p&gt;Here is a presentation I gave at the Melbourne Patterns Group about using this pattern in the implementation of the software &lt;a href=&#34;http://www.austhink.com&#34;&gt;Rationale&lt;/a&gt; where I was Chief Software Architect.  It ended up being a success, though we did learn a few things along the way (see below).&lt;/p&gt;
&lt;iframe style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;&#34; src=&#34;//www.slideshare.net/slideshow/embed_code/key/a8GdaypJN6uM9p&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;595&#34; height=&#34;485&#34;&gt; &lt;/iframe&gt;
&lt;h2 id=&#34;what-we-learned&#34;&gt;What we learned&lt;/h2&gt;
&lt;p&gt;Whilst implementing this pattern basically saved our bacon, in terms of getting the job done, having the pattern rely on visitor so much did add a layer of complexity that was tiresome to maintain. &lt;/p&gt;
&lt;p&gt;Here are some some things we learnt after living with this pattern for a few years:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Classic approach&lt;/th&gt;
&lt;th&gt;Possibly a more Practical approach&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;visitor design pattern&lt;/td&gt;
&lt;td&gt;use RTTI (or equivalent e.g. have each shape return a shapeType enum) for better comprehensibility.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3D table of possibilities, with events, shapes, tools on each axis.&lt;/td&gt;
&lt;td&gt;table too sparse and complex, so just code for the cases you want.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;some blend of visitShape() / visitEdge() etc methods and mouse event methods, within each tool&lt;/td&gt;
&lt;td&gt;skip most of the visit methods and do the logic in the mouse handling methods.  Generalise the mouse handling into one event (mouseAction) and use if statements to catch the situations of interest.  You know what the current shape is by having a pointer to it (set up for you by the tool or something).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;use tooled composite for all interactivity&lt;/td&gt;
&lt;td&gt;have pockets of interactivity where a component takes over and looks after the gui instead of doing everything the tooled composite way (more explanation below)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With regards to the last point, what we were doing was considering the idea of creating self contained components that had their own little world inside themselves, that was totally independent of the tool/visit system.  This way we didn&amp;rsquo;t have to use this architectural pattern for absolutely everything, since that was getting really intricate and tedious. &lt;/p&gt;
&lt;p&gt;We considered for example building a box (shape with text in it with various sub editable parts like titles and radio buttons) editor using the regular .NET component system and use their well understood way of handling events, and editing etc. - rather than coding visitors and miniscule tool interactions.  So the idea was that as we went into say, &amp;ldquo;edit mode&amp;rdquo;, we would switch away from the tooled composite pattern and into the world of .NET - just during the edit.&lt;/p&gt;
&lt;h2 id=&#34;final-verdict&#34;&gt;Final Verdict&lt;/h2&gt;
&lt;p&gt;Make no mistake, we desperately needed the Tooled Composite Pattern approach to hold everything together, and to be the default system in play.  The .NET component approach (described above) definitely wasn&amp;rsquo;t suited to a deep and complex drawing tool like &lt;a href=&#34;http://www.austhink.com&#34;&gt;Rationale&lt;/a&gt;, with zooming, mini maps, panning, layout algorithms etc. In fact we found in experiments / spikes of a fully .NET component approach that .NET events would fire all over the place causing too much screen refreshing. &lt;/p&gt;
&lt;p&gt;So in the end a we used Tooled Composite for mostly everything, and dropped into .NET components only when needed eg. the text editor that you get when you double click on a workspace box in order to edit the text inside it was a pure .NET text control.  We never got to push this hybrid approach any further - we wanted to write a super fancy text editor component (with hover zones, places for specifying urls and bold headings etc.) ourselves purely in .NET - we just didn&amp;rsquo;t have the time - thus we mostly stayed completely within the classic Tooled Composite Pattern.  And I&amp;rsquo;m not sure what we would have done without it!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: ORM Pattern</title>
      <link>https://abulka.github.io/blog/2005/07/01/orm-pattern/</link>
      <pubDate>Fri, 01 Jul 2005 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2005/07/01/orm-pattern/</guid>
      <description>
        
        
        &lt;p&gt;Relational databases and OO memory models use different paradigms.  Mapping between one and the other is often necessary but usually ends up being fiddly unless an auto-mapping ORM tool is used.&lt;/p&gt;
&lt;h2 id=&#34;how-an-orm-works&#34;&gt;How an ORM works&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s face it - a lot of developers prefer to just code classes - that&amp;rsquo;s what OO is all about.  Having then to persist those classes into tables creates all sorts of fiddly mapping code.  If you don&amp;rsquo;t need to persist into tables - fine.  But if you do need to persist into tables, one way to reduce your workload is to use a tool like SQLObject - you simply write your code in a certain way and the tables are automatically maintained.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each class becomes a table.&lt;/li&gt;
&lt;li&gt;Each attribute on a class is a column in a table.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ORM tool automatically causes the setting of attributes on objects to have a wonderful side effect: the values are written to the database table.  And conversely, pulling information out from your object triggers the appropriateSQL calls to retrieve the information from the table.  &lt;strong&gt;You don&amp;rsquo;t have to deal with sql syntax yourself&lt;/strong&gt;. However you can take advantage of the fact that you now have a sql backend, to make sql-like queries - thus you can save coding effort.  You have all the power of SQL at your disposal now, you might as well use take advantage of it!  You don&amp;rsquo;t have to use precise SQL syntax but you need to use something very much like it&lt;/p&gt;
&lt;h2 id=&#34;orm-using-sqlobject&#34;&gt;ORM using SQLObject&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;http://www.sqlobject.org/&#34;&gt;SQLObject&lt;/a&gt; (a Python library) you would write things like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ps &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Person&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;select(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;address.postcode LIKE &amp;#39;3186&amp;#39;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;,  clauseTables&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;address&amp;#39;&lt;/span&gt;])  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;list&lt;/span&gt;(ps)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ORM (object relational mapping) tools usually let you choose what style of &amp;lsquo;back-end&amp;rsquo; database to use with a configuration switch - e.g. develop on sql-lite and deploy on mysql - all without changing any of your code.&lt;/p&gt;
&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;
&lt;iframe style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;&#34; src=&#34;//www.slideshare.net/slideshow/embed_code/key/sfVHA5wqbCdvZl&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;795&#34; height=&#34;645&#34;&gt; &lt;/iframe&gt;
&lt;p&gt;Object Relational Mapping Pattern - using Sql Object - &lt;a href=&#34;http://www.slideshare.net/tcab22/object-relational-mapping-pattern-using-sql-object-presentation-948190&#34;&gt;slideshare&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;h3 id=&#34;before-using-sqlobject&#34;&gt;Before using SQLObject&lt;/h3&gt;
&lt;p&gt;This is an example of some Person, Cubicle and Order classes.  Persons live in Cubicles and can place one or more orders.  No database activity is involved here - its all just regular python code with pointers and lists.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# BEFORE the use of a database&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Cubicle&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, location&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;unknown&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;location &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; location
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SetOccupant&lt;/span&gt;(self, person):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# Evict any previous occupant&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; person  &lt;span style=&#34;color:#6272a4&#34;&gt;# New occupant wired in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        person&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self   &lt;span style=&#34;color:#6272a4&#34;&gt;# back pointer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Person&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, firstname, lastname):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;firstname &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firstname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lastname &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; lastname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orders &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;addresses &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AddOrder&lt;/span&gt;(self, order):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orders&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(order)  &lt;span style=&#34;color:#6272a4&#34;&gt;# one to many&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        order&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;person &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self        &lt;span style=&#34;color:#6272a4&#34;&gt;# back pointer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SetAddress&lt;/span&gt;(self, address):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;addresses&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(address) &lt;span style=&#34;color:#6272a4&#34;&gt;# many to many&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        address&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(self) &lt;span style=&#34;color:#6272a4&#34;&gt;# back pointer (note the &amp;#39;append&amp;#39; cos many to many)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Order&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, orderNumber, description):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orderNumber &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; orderNumber
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;description &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; description
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Address&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, street, suburb, postcode):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;street &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; street
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;suburb &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; suburb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;postcode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; postcode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Test One to one&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Cubicle(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;North Wing D4&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tom &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Person(firstname&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;, lastname&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jones&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetOccupant(tom)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; cubicle1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; tom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Test One to many&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Order(orderNumber&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;12345&amp;#34;&lt;/span&gt;, description&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new ipaq&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Order(orderNumber&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;12346&amp;#34;&lt;/span&gt;, description&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new ipod&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddOrder(o1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddOrder(o2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orders) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; o1 &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; o2 &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Test Many to many&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;angelina &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Person(firstname&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Angelina&amp;#34;&lt;/span&gt;, lastname&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jolie&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Address(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Fox Studios&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;California&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3186&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;# tom and angelina both work here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Address(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Brads Place&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Manhattan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;40004&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;angelina&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetAddress(a1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;angelina&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetAddress(a2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetAddress(a1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; a1 &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; angelina&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;addresses
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; angelina &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; a1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; angelina &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; a2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; tom &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; a1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; tom &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; a2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;################## Now do some more complex manipulations #########&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Move angelina into the North Wing D4 cubicle and &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# move Tom into a new cubicle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetOccupant(angelina)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; cubicle1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; angelina
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Cubicle(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;West Wing D5&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetOccupant(tom)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; cubicle2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Done!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Done!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;code---after-sqlobject&#34;&gt;Code - After SQLObject&lt;/h3&gt;
&lt;p&gt;Now for the fascinating transformation.  We refactor the code to use SQLObject and we end up with the same logic, but as a bonus we have persistence in a sql database.  And its not so hard either!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# AFTER - the database version - notice we import sqlobject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; sqlobject &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; sqlobject.sqlite &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; builder; SQLiteConnection &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; builder()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; SQLiteConnection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;person.db&amp;#39;&lt;/span&gt;, debug&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Cubicle&lt;/span&gt;(SQLObject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _connection &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; conn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    location &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StringCol(length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;, default&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;unknown&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    occupant &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Person&amp;#39;&lt;/span&gt;, default&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SetOccupant&lt;/span&gt;(self, person):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# Evict any previous occupant&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; person  &lt;span style=&#34;color:#6272a4&#34;&gt;# New occupant wired in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        person&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self   &lt;span style=&#34;color:#6272a4&#34;&gt;# back pointer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Person&lt;/span&gt;(SQLObject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _connection &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; conn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    firstname &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StringCol(length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lastname &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StringCol(length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Cubicle&amp;#39;&lt;/span&gt;, default&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    orders &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MultipleJoin(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;GiftOrder&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addresses &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RelatedJoin(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Address&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AddOrder&lt;/span&gt;(self, giftOrder):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;#self.orders.append(giftOrder)  # one to many # SQL OBJECT doesn&amp;#39;t need this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        giftOrder&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;person &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self        &lt;span style=&#34;color:#6272a4&#34;&gt;# back pointer ** becomes the primary info sqlobject goes on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SetAddress&lt;/span&gt;(self, address):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;#self.addresses.append(address) # many to many # SQL OBJECT doesn&amp;#39;t need this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;#address.residents.append(self) # back pointer (note the &amp;#39;append&amp;#39; cos many to many) # SQL OBJECT doesn&amp;#39;t need this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        address&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;addPerson(self)  &lt;span style=&#34;color:#6272a4&#34;&gt;# SQLobject created this &amp;#34;addWHATEVER&amp;#34; method for us&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;GiftOrder&lt;/span&gt;(SQLObject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _connection &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; conn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    orderNumber &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; IntCol()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    description &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StringCol()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    person &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Person&amp;#39;&lt;/span&gt;, default&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Address&lt;/span&gt;(SQLObject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _connection &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; conn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    street &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StringCol(length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    suburb &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StringCol(length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    postcode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StringCol(length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    residents &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RelatedJoin(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Person&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;#def _init(self):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;#    SQLObject._init(self, *args, **kw)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;#    self.postcodesDict = {&amp;#39;2323&amp;#39;:&amp;#39;Brighton&amp;#39;,&amp;#39;22222&amp;#39;:&amp;#39;Werribee&amp;#39;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cubicle&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dropTable(&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cubicle&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;createTable()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Person&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dropTable(&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Person&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;createTable()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GiftOrder&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dropTable(&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GiftOrder&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;createTable()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Address&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dropTable(&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Address&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;createTable()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Test One to one&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Cubicle(location&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;North Wing D4&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tom &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Person(firstname&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;, lastname&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jones&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetOccupant(tom)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; cubicle1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; tom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Test One to many&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; GiftOrder(orderNumber&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;12345&lt;/span&gt;, description&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new ipaq&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; GiftOrder(orderNumber&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;12346&lt;/span&gt;, description&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new ipod&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddOrder(o1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddOrder(o2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orders) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; o1 &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; o2 &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Test Many to many&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;angelina &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Person(firstname&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Angelina&amp;#34;&lt;/span&gt;, lastname&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jolie&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Address(street&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Fox Studios&amp;#34;&lt;/span&gt;, suburb&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;California&amp;#34;&lt;/span&gt;, postcode&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3186&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;# tom and angelina both work here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Address(street&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Brads Place&amp;#34;&lt;/span&gt;, suburb&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Manhattan&amp;#34;&lt;/span&gt;, postcode&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;40004&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;angelina&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetAddress(a1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;angelina&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetAddress(a2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetAddress(a1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; a1 &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; angelina&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;addresses
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; angelina &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; a1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; angelina &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; a2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; tom &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; a1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; tom &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; a2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;residents
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;################## Now do some more complex manipulations #########&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Move angelina into the North Wing D4 cubicle and&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# move Tom into a new cubicle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetOccupant(angelina)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; cubicle1&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;occupant &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; angelina
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Cubicle(location&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;West Wing D5&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cubicle2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SetOccupant(tom)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;assert&lt;/span&gt; tom&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cubicle &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; cubicle2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Now SQLOBJECT lets us do other magic things, that leverage relational db technology&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Person&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#ps = Person.select(Person.q.firstName==&amp;#34;John&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#print list(ps)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#ps = Person.select(&amp;#34;&amp;#34;&amp;#34;address.id = person.id AND&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#                         address.postcode LIKE &amp;#39;40004%&amp;#39;&amp;#34;&amp;#34;&amp;#34;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#                      clauseTables=[&amp;#39;address&amp;#39;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ps &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Person&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;select(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;address.postcode LIKE &amp;#39;3186&amp;#39;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      clauseTables&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;address&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;list&lt;/span&gt;(ps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;all people&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ps &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Person&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;select()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;list&lt;/span&gt;(ps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Done!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/orm-sql-object-db-output.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;what-sort-of-tables-are-created&#34;&gt;What sort of tables are created?&lt;/h3&gt;
&lt;p&gt;You can browse the resulting database tables (in this case sqllite tables) using the SQLite Database Browser.  Here are some screenshots of the tables we have created:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/orm-sqlobjectdb1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;this is the table structure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/orm-sqlobjectdb2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;All the above tables and content were created by the Python code!&lt;/p&gt;
&lt;h2 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;You may also be interested in &lt;a href=&#34;http://www.sqlalchemy.org/&#34;&gt;Sqlalchemy&lt;/a&gt; for Python which is very powerful and flexible, perhaps getting a bit complex.  &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; of course has a built in ORM and is much easier to use, though you can only use it in Django web apps.&lt;/p&gt;
&lt;p&gt;Then there are ORM frameworks for Java like hibernate and many, many others.  Just google for ORM. &lt;/p&gt;
&lt;p&gt;And if you are into .NET then the &amp;ldquo;low hanging fruit&amp;rdquo; solution of &lt;a href=&#34;http://msdn.microsoft.com/en-us/vcsharp/aa904594.aspx&#34;&gt;LINQ&lt;/a&gt; is worth looking at.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The point of this article has been to get you to see the essence of what an ORM does, with the minimal amount of code.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Swapping Implementations</title>
      <link>https://abulka.github.io/blog/2005/03/05/swapping-implementations/</link>
      <pubDate>Sat, 05 Mar 2005 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2005/03/05/swapping-implementations/</guid>
      <description>
        
        
        &lt;p&gt;This is an exploration of how to swap implementations of objects within our software architectures using patterns like the Interface, Factory, Strategy, Proxy, Adapter, and finally to the full blown Bridge Design Pattern.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This article was formerly known as The &amp;ldquo;Road to the Bridge&amp;rdquo; and as &amp;ldquo;Strategy to Bridge&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;
&lt;p&gt;We want to be flexible in our architecture.  We want to be able to swap implementations of objects/classes easily e.g. between using class &lt;code&gt;A&lt;/code&gt; or class &lt;code&gt;B&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_AorB.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build to anticipate and celebrate change.&lt;/li&gt;
&lt;li&gt;Program to interfaces, not implementations..&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;some-broad-solutions&#34;&gt;Some broad solutions&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s examine the range of solutions - showing the story of how to bind to two different implementations of the same interface - simple ways and more complex ways.
Specifically how we can choose between:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;compile-time binding (one or the other is chosen by compiled code)&lt;/li&gt;
&lt;li&gt;factory based binding (one or the other is returned by a factory)&lt;/li&gt;
&lt;li&gt;dynamic binding using an intermediary object&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;where #3 is achieved using Strategy, Adapter and Proxy, which ultimately leads us to using the Bridge Pattern.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This journey strikes me as a powerful way of looking at a deep and common problem (building to embrace change), and that also unites multiple patterns under the one theme. Given programmers love the ideal of &amp;lsquo;programming to interfaces&amp;rsquo; and being able to swap in different implementations, this story will show how to do it at many different levels and in fact how many of the classic GOF design patterns are all about helping us to achieve it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;interface-pattern&#34;&gt;Interface pattern&lt;/h2&gt;
&lt;h3 id=&#34;interface-compile-time-choice&#34;&gt;Interface, compile time choice&lt;/h3&gt;
&lt;p&gt;Alternative implementations of an interface. Instantiate one or the other implementation of that interface. The code that uses the object is unaware of which object it is using. &amp;ldquo;Program to an interface&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_Interface01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Worker o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; A&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Worker o = new B()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DoSomething&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the choice is at compile time, by commenting out one or the other instantiation.&lt;/p&gt;
&lt;h3 id=&#34;interface-dynamic-run-time-choice&#34;&gt;Interface, dynamic run time choice&lt;/h3&gt;
&lt;p&gt;Same solution except choose particular implementation dynamically at runtime using a flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; flag  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Worker o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; A&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Worker o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; B&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DoSomething&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// we don&amp;#39;t know if its an A or a B.  Everything works ok.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;factory&#34;&gt;Factory&lt;/h2&gt;
&lt;p&gt;Create A or B at runtime by asking another class to create the concrete object for us.  Pass in the flag to the factory or let the factory decide for itself which implementation we want.&lt;/p&gt;
&lt;p&gt;Factory class is the only class to refer to concrete products. The client refers to the interface/abstract class only.&lt;/p&gt;
&lt;p&gt;We are still talking directly to the concrete object (either an A or a B).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_Factory.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There are a number of factory method variants:&lt;/p&gt;
&lt;h3 id=&#34;simple-super-dumb-factory&#34;&gt;Simple Super Dumb Factory&lt;/h3&gt;
&lt;p&gt;Encapsulates the &amp;ldquo;dynamic run time choice&amp;rdquo; solution discussed in the beginning of this talk. Benefit is that the  conditional logic containing the if statement is hidden and possibly centralized in a factory class.&lt;/p&gt;
&lt;p&gt;Factory class is the only class that refers directly to concrete products. Client refers only to interface/abstract class.&lt;/p&gt;
&lt;p&gt;The choice is made via conditional code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_FactorySimple.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Factory f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SimpleFactory&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Worker o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateWorker&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DoSomething&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// we don&amp;#39;t know if its an A or a B.  Everything works ok.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;registry-based-factory&#34;&gt;Registry Based Factory&lt;/h3&gt;
&lt;p&gt;Maintains a registry of mappings between strings (or any type of key e.g. objects, class references, numbers etc.) and class references.  Benefit: more generalized, no if statements. &lt;/p&gt;
&lt;p&gt;Factory class is the only class that refers directly to concrete products. Client refers only to interface/abstract class.&lt;/p&gt;
&lt;p&gt;The choice is made via registry key.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_FactoryRegistry.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &amp;#39;worker a&amp;#39;   &lt;span style=&#34;color:#6272a4&#34;&gt;// in setup code somewhere
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Factory f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; RegistryFactory&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Worker o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateWorker&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DoSomething&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// we don&amp;#39;t know if its an A or a B.  Everything works ok.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gof-factory-method&#34;&gt;GOF Factory Method&lt;/h3&gt;
&lt;p&gt;Assumes the client &lt;em&gt;already has&lt;/em&gt; an instance of some class which needs either a A or B version of a worker class.  &lt;/p&gt;
&lt;p&gt;Each alternative instance of  the existing class overrides a create method differently, each instantiating a different concrete product - typically one matching their own functionality. Benefit: no class reference language facilities required. &lt;/p&gt;
&lt;p&gt;Factory class is the only class that refers directly to concrete products. Client refers only to interface/abstract class.&lt;/p&gt;
&lt;p&gt;The choice is made via polymorphic override.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_FactoryMethodGOF_01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the choice as to which Work Manager (MgrA or MgrB) to instantiate in the first place is going to be an issue, but is not the point of this example.  The point is that once you have a particular brand of work manager, then you will get a related brand of of worker via the suitably overriden CreateWorker factory method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WorkManager f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MgrA&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// done somewhere in setup
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;Worker o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateWorker&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DoSomething&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// we don&amp;#39;t know if its an A or a B.  Everything works ok.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There will be parallel hierarchies, e.g. the WorkManager and the Worker hierarchies closely match, with A and B versions of their subclasses.  Start to think of a &lt;em&gt;family&lt;/em&gt; of classes.&lt;/p&gt;
&lt;p&gt;My further thoughts, including a more detailed example of Factory Method &lt;a href=&#34;https://www.atug.com/andypatterns/factory_method_example.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;abstract-factory&#34;&gt;Abstract Factory&lt;/h3&gt;
&lt;p&gt;Abstract factory similar to factory method, in that there is something being overridden.&lt;/p&gt;
&lt;p&gt;Abstract factory is the same as factory method, except there is  more than one Creation method.  E.g. CreateWorker, CreateAdministrator, CreatePoliceman - such that the class containing the factory methods might as well become a sole purpose class for dispensing these related classes.&lt;/p&gt;
&lt;p&gt;The abstract factory is a mere mechanism for delivering A versions of B versions.  E.g. Client wants A version of products&lt;/p&gt;
&lt;p&gt;Client programs against interfaces thus can switch between A or B.  Specifically, the client only talks to &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IAbstractProductFactory&lt;/li&gt;
&lt;li&gt;IProduct1&lt;/li&gt;
&lt;li&gt;IProduct2&lt;/li&gt;
&lt;li&gt;IProduct3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_AbsFactory_01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IAbstractProductFactory f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ProductFactoryVersionA&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// choice is made at compile time, via factory method (run time) via strategy (runtime)  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;IProduct1 p1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateProduct1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IProduct2 p2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateProduct2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IProduct3 p3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateProduct3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All products p1, p2, p3 are in the above example A versions, and compatible with each other.&lt;/p&gt;
&lt;p&gt;My further thoughts on Abstract Factory &lt;a href=&#34;https://www.atug.com/andypatterns/abstract_factory_thoughts.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.atug.com/andypatterns/_themes/canvas/acnvrule.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;indirection-patterns&#34;&gt;Indirection Patterns&lt;/h2&gt;
&lt;p&gt;Getting to implementation A or B via intermediary.&lt;/p&gt;
&lt;p&gt;Rather than instantiate A or B and refer to them directly (albiet via a flexible interface variable), another approach is to refer to the same object all the time and hide the switching &lt;em&gt;behind&lt;/em&gt; that object.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_Indirection01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, because what is behind the intermediate object is hidden (and rightly so), you no longer need to program to the Strategy interface.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_Indirection02.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you want to still program to an interface (good idea) then program to the Intermediary interface.  If you want to run free and wild, program to the intermediary object api.&lt;/p&gt;
&lt;p&gt;Variants are as follows:&lt;/p&gt;
&lt;h3 id=&#34;proxy-pattern-v1&#34;&gt;Proxy Pattern v1&lt;/h3&gt;
&lt;p&gt;A methodless indirection using &amp;ldquo;demeter&amp;rdquo; referencing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_IndirectionStrategyPoorMans.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Responsibility of the client to know the API of the strategy.  So still programming to the strategy interface.  You have to since the intermediary has no methods, or rather, has no methods specifically related to accessing the A &amp;amp; B classes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Intermediary&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;SetStrategy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; A&lt;span style=&#34;color:#ff79c6&#34;&gt;())&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;// done in setup somewhere, or via a factory or via dependency injection framework
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DoSomething&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;strategy-pattern&#34;&gt;Strategy Pattern&lt;/h3&gt;
&lt;p&gt;Proper Strategy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_IndirectionStrategy01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Intermediary&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;SetStrategy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; A&lt;span style=&#34;color:#ff79c6&#34;&gt;())&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;// done in setup somewhere, or via a factory or via dependency injection framework
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DoSomething&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;later you can switch the strategy without the client code caring.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;SetStrategy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; B&lt;span style=&#34;color:#ff79c6&#34;&gt;())&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;DoSomething&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// different behaviour or different implementation occurs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;strategy-with-a-touch-of-the-adapter-pattern&#34;&gt;Strategy with a touch of the Adapter pattern&lt;/h3&gt;
&lt;p&gt;If your implementation has a slightly different API than the one your client code wants to use, then you can adapt it at the same time as you are strategizing&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_IndirectionStrategyAdapter.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;proxy-v2---going-all-the-way&#34;&gt;Proxy v2 - going all the way&lt;/h3&gt;
&lt;p&gt;If your only have the same methods in your intermediary object as you have in your implementation, then you can have the intermediary inherit from the abstract implementation interface.  This turns the pattern into proxy, and lets you optionally, program to the Strategy interface again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_IndirectionProxy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The proxy, whilst &lt;em&gt;inheriting&lt;/em&gt; from Strategy, can also implement extra methods, though this is diverging a little from the intent of Proxy.&lt;/p&gt;
&lt;p&gt;An alternative to inheritance, the proxy can &lt;em&gt;implement the interface&lt;/em&gt; of the Strategy class, and get some similar polymorphic substitutability benefits.&lt;/p&gt;
&lt;h2 id=&#34;bridge-pattern&#34;&gt;Bridge Pattern&lt;/h2&gt;
&lt;p&gt;This is still a variant on accessing different behaviour via an intermediary.&lt;/p&gt;
&lt;p&gt;Bridge is just strategy with a oversized lhs context.&lt;/p&gt;
&lt;p&gt;Same as strategy except there is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Massive subclassing going on on the lhs (the &amp;lsquo;context&amp;rsquo; side).&lt;/li&gt;
&lt;li&gt;The nature of the lhs methods are more compositional, adaptive and far reaching (not just a simply strategy delegation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/swapping-PathToBridge_Bridge01.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;massive-subclassing&#34;&gt;Massive subclassing&lt;/h3&gt;
&lt;p&gt;There is massive subclassing going on in the lhs. context.&lt;/p&gt;
&lt;p&gt;The reason is that you are wanting lots of methods and lots of functionality, lots of classes.  E.g. you want to have a GUI or DB subsystem, not just a single strategy.&lt;/p&gt;
&lt;h3 id=&#34;lhs-and-rhs-methods&#34;&gt;lhs and rhs methods&lt;/h3&gt;
&lt;p&gt;What is the nature of the lhs and rhs methods?&lt;/p&gt;
&lt;p&gt;Typically rhs (implementation/driver) calls are more primitive, and one lhs method will call the rhs. many times. e.g. see the &lt;code&gt;DoTalk()&lt;/code&gt; method, above.&lt;/p&gt;
&lt;p&gt;The lhs methods can be diverse, comprising&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lhs method simply calls rhs method. Method names can change or be the same. Simple delegation with no extra work.&lt;/li&gt;
&lt;li&gt;lhs methods more complex and adapt and do extra lines of code as needed&lt;/li&gt;
&lt;li&gt;Lots of logic in the lhs methods and may have associated helper classes.  But in the end they call stuff on the intermediary api.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;insulated-from-change&#34;&gt;Insulated from change. &lt;/h3&gt;
&lt;p&gt;Allows lhs and rhs to vary independently.&lt;/p&gt;
&lt;p&gt;Client is insulated from changes. Should not talk talk to implementation, even if it is the abstract implementation interface because the abs impl. may change. If the abstract implementation interface does change then this affects only the Intermediary but not the client code.  Client code should thus only talk to intermediary.&lt;/p&gt;
&lt;p&gt;Similarly, if you change the Intermediary API, then only the client is affected - the r.h.s. (the abstract implementation interface and concrete implementations) are not affected.&lt;/p&gt;
&lt;p&gt;In this sense the lhs and rhs can vary independently.  Ok - so there are repercussions when things vary - but they are limited, as discussed above.&lt;/p&gt;
&lt;h3 id=&#34;final-thought-on-bridge&#34;&gt;Final thought on Bridge&lt;/h3&gt;
&lt;p&gt;You could simplify Bridge and have the client code talk directly to the rhs. abstract implementation interface.   You would be reverting to where we started on this &amp;ldquo;road to Bridge&amp;rdquo;.   Nothing wrong with that - but you would lose the &amp;lsquo;insulation against change&amp;rsquo; that Bridge gets you.  And with Bridge the lhs can have lots of complex logic and the rhs implementations need only implement the more primitive operations.  That is a big win.&lt;/p&gt;
&lt;h2 id=&#34;solutions-overview&#34;&gt;Solutions overview&lt;/h2&gt;
&lt;p&gt;Summary of the ways of coupling your components&lt;/p&gt;
&lt;table style=&#34;width: 100%;&#34; border=&#34;1&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td align=&#34;center&#34; width=&#34;18%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;&lt;strong&gt;Technique&lt;/strong&gt;
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; width=&#34;21%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;&lt;strong&gt;Meta-Pattern&lt;/strong&gt;
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;&lt;strong&gt;Pattern&lt;/strong&gt;
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td align=&#34;center&#34; width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td rowspan=&#34;8&#34; bgcolor=&#34;#ffff99&#34; width=&#34;18%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;To implementation A or B directly
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td rowspan=&#34;2&#34; bgcolor=&#34;#cccccc&#34; width=&#34;21%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Program to Interface
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td rowspan=&#34;2&#34; bgcolor=&#34;#ffff99&#34; width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Interface
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Interface, compile time choice
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Alternative implementations of an
                    interface. Instantiate one or the other implementation of that interface. The code that uses the
                    object is unaware of which object it is using. &#34;Program to an interface&#34;
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Interface, conditional code
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Same solution as above, except
                    choose particular implementation dynamically at runtime using a flag.
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td rowspan=&#34;6&#34; bgcolor=&#34;#ffffcc&#34; width=&#34;21%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Factory
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td rowspan=&#34;3&#34; bgcolor=&#34;#ccffff&#34; width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Factory Method
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;conditional code
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;registry
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;polymorphic factory method
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td rowspan=&#34;3&#34; bgcolor=&#34;#ccccff&#34; width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Abstract Factory
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;abstract factory - polymorphic
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;conditional code
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;class registry
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td rowspan=&#34;6&#34; bgcolor=&#34;#ccffcc&#34; width=&#34;18%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;To implementation A or B via
                    intermediary
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td rowspan=&#34;6&#34; bgcolor=&#34;#ffccff&#34; width=&#34;21%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Indirection
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Dot notation drilling
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;methodless proxy using demeter
                    referencing
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Strategy
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;strategy - may be extra methods not
                    related to the strategising
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Proxy
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;proxy, all methods mapped (demeter
                    is happy). inherit
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;Adapter
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;adapted proxy-like strategy. 
                    different method names sometimes
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td bgcolor=&#34;#ffffcc&#34; width=&#34;36%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;&lt;span
                        style=&#34;background-color: #ffffcc;&#34;&gt;Bridge&lt;/span&gt;
                    &lt;/span&gt;&lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;rhs - methods usually more
                    primitive.  Only talk to abs. impl. &lt;/span&gt;
                &lt;p&gt;&lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt;lhs - all adapted &amp;amp; thus changeable. can
                        build hierarchies
                        &lt;/span&gt;&lt;/p&gt;
            &lt;/td&gt;
            &lt;td width=&#34;25%&#34;&gt;
                &lt;span style=&#34;font-family: Arial,Arial,Helvetica;&#34;&gt; 
                    &lt;/span&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;The presentation of the patterns form a story of simple to complex.  &lt;/p&gt;
&lt;p&gt;And its a story of two broadly different techniques, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting to the implementation A or B directly&lt;/li&gt;
&lt;li&gt;Getting to the implementation A or B via an intermediary object&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adapter-vs-bridge&#34;&gt;Adapter vs. Bridge&lt;/h3&gt;
&lt;p&gt;Adapter is closer to Bridge in that the adaptation on the lhs. (the context) can be not just a renaming and mapping of methods, but extra logic and whatever it takes to make the adapation work.  So the lhs. is closer to the free wheeling compositional lhs of Bridge Pattern.  By compositional I mean that a single lhs. method can comprise of complex code and multiple calls to the rhs. methods.  In Bridge the lhs methods can even call on other methods in the same lhs, whereas in Adapter this is not really the intent.&lt;/p&gt;
&lt;h3 id=&#34;ioc-inverison-of-control&#34;&gt;IOC (inverison of control)&lt;/h3&gt;
&lt;p&gt;IOC (inverison of control) also fits in here somewhere.&lt;/p&gt;
&lt;p&gt;Dependency injection.  Inject a context object or wire up dependent objects. Allows you to program normally.  Allows different implementations to be injected in.&lt;/p&gt;
&lt;h3 id=&#34;microkernels&#34;&gt;Microkernels&lt;/h3&gt;
&lt;p&gt;Microkernels also fit in here.&lt;/p&gt;
&lt;p&gt;Amongst other things, a Microkernel style architecture allows alternative plugins (services) to fulfil the implementation.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maybe think of it as &lt;em&gt;service&lt;/em&gt; A or B.&lt;/li&gt;
&lt;li&gt;Or &lt;em&gt;plugin&lt;/em&gt; A or B.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There seem to be three types of MicroKernel:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Service location, like COM where you either ask for a service and get an interface which you use, or you call a service and the late binding binds to an appropriate service at the last minute. &lt;strong&gt;Style of programming:&lt;/strong&gt; slightly different - must ask for an interface before using it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message broadcasting kernel, where messages are broadcast to all plugins and the chain of responsibility pattern is used, and a plugin/service which can make sense of the message acts on it (either consuming it or passing it on for someone else to have a go at). &lt;strong&gt;Style of programming:&lt;/strong&gt; different - you must create messages send them into the kernel, either synchronously or asynchronously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependency Injection Microkernel, where all object attributes refering to other objects (dependencies) are injected for you by a framework.  Rather than setting up these references yourself manually, as normal programming style dictates, you leave it to magic - which allows other implementations to be swapped in. You must of course program to interfaces not to concrete classes, in order for this trick to work.  &lt;strong&gt;Style of programming:&lt;/strong&gt; normal, you just call methods on objects that you have references to.  The fact that the references have been wired up by a framework (which consults a plugin directory &amp;amp; setup file telling us which plugins are active) is hidden from us.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maybe one or more of the above three descriptions of a Microkernel is not actually a microkernel - I am just learning about this stuff.  But I have seen references that suggest my analysis is correct. E.g. The &lt;a href=&#34;https://www.castleproject.org/castle/show/Windsor+Container&#34;&gt;Castle&lt;/a&gt; IOC framework for .NET calls itself a microkernel.  &lt;/p&gt;
&lt;h3 id=&#34;variables-as-indirection&#34;&gt;Variables as indirection&lt;/h3&gt;
&lt;p&gt;A variable of type interface is really a another &amp;lsquo;secret&amp;rsquo; form of indirection.&lt;/p&gt;
&lt;p&gt;I have made a broad distinction between accessing implementations A or B either directly or via an intermediary. Thinking about it some more, when you do access A or B directly, you do so via an an intermediary variable declared of type abstract/interface.  This is when you are being good and &amp;lsquo;programming to interfaces&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Thus you could argue that even even when you are accessing an object (implementation A or B) directly, you are in fact still acting through an intermediary - the interface variable!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Blackboard Pattern</title>
      <link>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</link>
      <pubDate>Thu, 05 Aug 2004 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</guid>
      <description>
        
        
        &lt;h2 id=&#34;blackboard-architectural-pattern&#34;&gt;Blackboard Architectural Pattern&lt;/h2&gt;
&lt;p&gt;The Blackboard Architectural Pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialised sub-systems assemble their knowledge to build a possibly partial or approximate solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/blackboard-Blafig2.gif&#34; alt=&#34;blackboard pattern uml&#34;&gt;&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://web.archive.org/web/20100402123507/http://chat.carleton.ca:80/~narthorn/project/patterns/BlackboardPattern-display.html&#34;&gt;paper&lt;/a&gt; by D. Deugo, M. Weiss and E. Kendall.&lt;/p&gt;
&lt;h2 id=&#34;andys-presentation&#34;&gt;Andy&amp;rsquo;s Presentation&lt;/h2&gt;
&lt;iframe style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;&#34; src=&#34;//www.slideshare.net/slideshow/embed_code/key/zdTSlKGS97nz61&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;595&#34; height=&#34;485&#34;&gt; &lt;/iframe&gt;
&lt;p&gt;Blackboard Pattern Slides by &lt;a href=&#34;https://www.slideshare.net/tcab22&#34;&gt;Andy&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;example-code&#34;&gt;Example Code&lt;/h2&gt;
&lt;p&gt;This is a pattern that is difficult to do an example for because you would normally have to set up a large infrastructure of classes etc.  I refused to be put off and presented a simple blackboard pattern implementation in python, during my talk to the Melbourne Patterns Group.  Please forgive its limitations but it should at least give you an idea of what this pattern is about.&lt;/p&gt;
&lt;p&gt;Note that you can flick a switch in the code below and have a small GUI pop up in Swing via jython.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  Blackboard system
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  by Andy Bulka
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  Prepared for the Melbourne Patterns group - August 2004
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Welcome to my blackboard system&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Blackboard&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;experts &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AddExpert&lt;/span&gt;(self, expert):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;experts&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(expert)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Controller&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, blackboard):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; blackboard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# init blackboard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answerCorrectness&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Loop&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answerCorrectness&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            candidates &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; expert &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;experts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                eagerness &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; expert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CanContribute()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; eagerness:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    candidates&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append((eagerness,expert))  &lt;span style=&#34;color:#6272a4&#34;&gt;# append a tuple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            candidates&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sort()    &lt;span style=&#34;color:#6272a4&#34;&gt;# move winning tuple to the end of the list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            winningExpert &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; candidates[&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]  &lt;span style=&#34;color:#6272a4&#34;&gt;# -1 means the last item in list.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            winningExpert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;execAction()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Loop_OLD&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answerCorrectness&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; expert &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;experts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; expert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CanContribute():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    expert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;execAction()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AbstractExpert&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, blackboard, outtext):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; blackboard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;outtext &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; outtext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CanContribute&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;not implemented&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execAction&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;not implemented&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SmartAss&lt;/span&gt;(AbstractExpert):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CanContribute&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execAction&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; random&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;outtext&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WiseMan&lt;/span&gt;(AbstractExpert):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CanContribute&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execAction&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answerCorrectness&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;outtext&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WANT_JAVA_GUI &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; WANT_JAVA_GUI:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; javax.swing &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; JFrame, JLabel, JButton, JTextField
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JHutton&lt;/span&gt;(JButton):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;GUI&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Blackboard Jungle&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(JLabel(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Expert1&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JTextField(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(JLabel(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Expert2&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JTextField(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            button &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JHutton(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Think&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(button)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            button&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;actionPerformed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onClick
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; java.awt &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; FlowLayout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;layout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; FlowLayout()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pack()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            blackboard &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Blackboard()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddExpert( SmartAss(blackboard, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt1) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddExpert( WiseMan(blackboard, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt2) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Controller(blackboard)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onClick&lt;/span&gt;(self, event):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Loop()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gui &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; GUI()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# Pure text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DummyTextWidget&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    blackboard &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Blackboard()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddExpert( SmartAss(blackboard, DummyTextWidget()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddExpert( WiseMan(blackboard, DummyTextWidget()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Controller(blackboard)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; c&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Loop()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Welcome to my blackboard system
. . . . . . . . . . . . . . . . . . . * . * * * * * . * . * . * . . * * * . * . . * * . . * . . * . *
371
done
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;example---uml-layout&#34;&gt;Example - UML Layout&lt;/h2&gt;
&lt;p&gt;Another real world example of this pattern being used in is my
open source &lt;a href=&#34;http://www.pynsource.com&#34; title=&#34;Pynsource - UML tool for Python&#34;&gt;Python UML tool&lt;/a&gt; where I used this pattern to evaluate numerous attempts at laying out a UML diagram, scoring the result and then choosing the best layout.&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/abulka/pynsource/blob/master/src/layout/blackboard.py&#34;&gt;source code&lt;/a&gt; of that Python module on GitHub.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Null Object Pattern</title>
      <link>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</link>
      <pubDate>Fri, 04 Oct 2002 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</guid>
      <description>
        
        
        &lt;h2 id=&#34;null-object-design-pattern&#34;&gt;Null Object Design Pattern&lt;/h2&gt;
&lt;p&gt;Sometimes I make the joke that design patterns are all about getting rid of if-else statements from your code. The null object pattern is an example of a pattern that does just that - check out the code at the bottom for details.&lt;/p&gt;
&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;
&lt;p&gt;A Null Object provides a surrogate for another object that shares the same interface, but does nothing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This pattern was originally written up by Bobby Wolf, in Pattern Languages of Program Design 3.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;uml&#34;&gt;UML&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/27251232690646nullobjectUML.png&#34; alt=&#34;null objject uml&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Null Object Pattern&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;have-i-used-it&#34;&gt;Have I used it?&lt;/h2&gt;
&lt;p&gt;Yes, I have used this pattern a few times in my work.  You have to be a little bit careful about managing the swapping of null obect for the real thing.  If bits of your code are pointing to the null object then you can&amp;rsquo;t easily swap in the real thing.  Better to put the null object / real object behind a proxy so that nobody knows what you are doing!&lt;/p&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;iframe style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;&#34;
            src=&#34;//www.slideshare.net/slideshow/embed_code/key/rLP5FBttyUUc7B&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34;
            marginheight=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;668&#34; height=&#34;714&#34;&gt; &lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;Scroll down through the course pages above - or use the page next/previous buttons.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//www.slideshare.net/tcab22/null-object-design-pattern-presentation&#34; title=&#34;Null Object Design Pattern&#34;&gt;Null Object Design Pattern&lt;/a&gt; chapter from &lt;a href=&#34;https://www.slideshare.net/tcab22&#34;&gt;Andy Bulka&amp;rsquo;s&lt;/a&gt; Design Patterns course book.&lt;/p&gt;
&lt;h2 id=&#34;example-code&#34;&gt;Example Code&lt;/h2&gt;
&lt;p&gt;Here is a Python example.  The class named &lt;code&gt;API&lt;/code&gt; is a real class with real functionality in it (note the name of this class could be anything, and not have anything to do with API&amp;rsquo;s).&lt;/p&gt;
&lt;p&gt;We decide that we want to &lt;em&gt;optionally&lt;/em&gt; log calls to our API class using a &lt;code&gt;Logger&lt;/code&gt; class. So we modify our API class to call out to the &lt;code&gt;Logger&lt;/code&gt; class.&lt;/p&gt;
&lt;h3 id=&#34;without-null-object&#34;&gt;Without Null Object&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; asctime, localtime
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AbstractObject&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;# pretend python has abstract classes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RealLogging&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Logged at&amp;#39;&lt;/span&gt;, asctime(localtime()), msg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Proxy / wrapper around either null or real logger. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Logger&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RealLogging()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;On&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RealLogging()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Off&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Logger()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Usage: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;API&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;doA&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Am calling A&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A done.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;doB&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Am calling B&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;B done.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; API()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doA()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doB()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Off()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doA()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doB()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;with-null-object&#34;&gt;With Null Object&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Null Object Pattern &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AbstractLogging&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg): &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; asctime, localtime
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RealLogging&lt;/span&gt;(AbstractObject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Logged at&amp;#39;&lt;/span&gt;, asctime(localtime()), msg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NullLogging&lt;/span&gt;(AbstractObject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Proxy / wrapper around either null or real logger. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Logger&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;On()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;On&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RealLogging()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Off&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; NullLogging()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Logger()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Usage: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;API&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;doA&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Am calling A&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A done.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;doB&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Am calling B&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;B done.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; API()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doA()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doB()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Off()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doA()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doB()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;output&#34;&gt;Output&lt;/h3&gt;
&lt;p&gt;Without logging:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A done.
B done.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With logging:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Logged at Fri Jan 23 17:28:01 2009 Am calling A
A done.
Logged at Fri Jan 23 17:28:01 2009 Am calling B
B done.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that in the null object implementation, there are no &amp;ldquo;if statements&amp;rdquo; in the client code (API class), which means we turn on logging by injecting in a different instance of &lt;code&gt;Logger&lt;/code&gt; rather than checking a flag. Arguably this is more flexible and cleaner. You even have more options to swap (or inject) different kind of &lt;code&gt;Logger&lt;/code&gt; classes with this pattern.&lt;/p&gt;
&lt;p&gt;The Null Object pattern is about switching in a &lt;code&gt;Logger&lt;/code&gt; class that does nothing.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Using Design Patterns in Real Projects</title>
      <link>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</link>
      <pubDate>Wed, 04 Sep 2002 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2002/09/04/using-design-patterns-in-real-projects/</guid>
      <description>
        
        
        &lt;p&gt;What is it like to use design pattern in real life programming?&lt;br&gt;
Do the sometimes academic patterns translate into the real world?&lt;/p&gt;
&lt;p&gt;The answer is yes. I will back this up with three examples of where I have used patterns in real world projects.&lt;/p&gt;
&lt;iframe class=&#34;scribd_iframe_embed&#34; title=&#34;Using Design Patterns in Real Projects&#34; src=&#34;https://www.scribd.com/embeds/11154597/content?start_page=1&amp;amp;view_mode=scroll&amp;amp;show_recommendations=true&amp;amp;access_key=key-2hwdc4gvp5l1dtlom3k4&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;600&#34; data-auto-height=&#34;true&#34; data-aspect-ratio=&#34;null&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;Scroll down through the slides above&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;-Andy Bulka&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Patterns: Design Pattern Automation</title>
      <link>https://abulka.github.io/patterns/design-pattern-automation/</link>
      <pubDate>Fri, 04 Jan 2002 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/patterns/design-pattern-automation/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/56881233035290bgDSC1195.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As design patterns become more mainstream, various IDE&amp;rsquo;s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you. This paper explores the state of pattern automation software, discusses the pros and cons of various approaches and then goes on to discusses the broader issues raised by the attempt to automate something which some argue, in principle, perhaps should not be automated at all..&lt;/p&gt;
&lt;h3 id=&#34;history-of-these-papers-and-talks&#34;&gt;History of these papers and talks&lt;/h3&gt;
&lt;p&gt;My pattern automation paper
&lt;a href=&#34;#early-tools-and-the-philosophy-of-pattern-automation&#34;&gt;Early tools and the philosophy of pattern automation&lt;/a&gt; (below) was followed a few years later with a talk entitled:
&lt;a href=&#34;#design-pattern-tools-as-of-2006&#34;&gt;Design Pattern Tools as of 2006&lt;/a&gt; (below) which reviewed the current crop of UML tools circa 2006. For a specific review of Netbeans 6 design pattern support - see
&lt;a href=&#34;https://abulka.github.io/blog/2009/02/11/netbeans-uml/&#34;&gt;Netbeans UML&lt;/a&gt; blog post, created after I gave that talk to the Melbourne Patterns Group in Feb 2009.&lt;/p&gt;
&lt;h2 id=&#34;design-pattern-automation--uml-tool-support&#34;&gt;Design Pattern Automation &amp;amp; UML Tool Support&lt;/h2&gt;
&lt;p&gt;Various UML Tools support design pattern usage.  You typically drag and drop patterns onto your workspace and they appear as UML classes.  Its a bit more complicated than this, and raises all sorts of interesting issues.  Read the pdf (part 1) and then read the powerpoint and watch the video (part 2).&lt;/p&gt;
&lt;h3 id=&#34;early-tools-and-the-philosophy-of-pattern-automation&#34;&gt;Early tools and the philosophy of pattern automation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;This paper is a revision of one that appeared at KoalaPLoP 2002 – the Third Asia-Pacific Conference on Pattern Languages of Programmes.  Conferences in Research and Practice in Information Technology,Vol. 13. J. Noble, Ed. Reproduction for academic, not-for profit purposes permitted provided this text is included.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/andybulkapatternautomation.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Download as &lt;a href=&#34;https://abulka.github.io/files/pdfs/AndyBulkaPatternAutomation.pdf&#34;&gt;pdf&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;design-pattern-tools-as-of-2006&#34;&gt;Design Pattern Tools as of 2006&lt;/h3&gt;
&lt;p&gt;Here are the slides from a talk entitled &amp;ldquo;Design Pattern support in UML tools - part II&amp;rdquo; which I gave in October 2006 to the Melbourne Patterns Group, Australia.&lt;/p&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/representingpatternsinumlandybulkaoct2006.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;View the above powerpoint &lt;a href=&#34;http://www.slideshare.net/tcab22/representing-design-patterns-in-uml-andy-bulka-oct2006-presentation?type=powerpoint&#34;&gt;on slideshare&lt;/a&gt; or download the &lt;a href=&#34;https://abulka.github.io/files/ppt/RepresentingPatternsInUMLAndyBulkaOct2006.ppt&#34;&gt;powerpoint directly&lt;/a&gt;:&lt;/p&gt;
&lt;h2 id=&#34;addendum&#34;&gt;Addendum&lt;/h2&gt;
&lt;p&gt;As part of my Design Pattern Automation - Part 2 talk, I recorded some of that session.  Here is a youtube &lt;a href=&#34;http://www.youtube.com/watch?v=IjKClDX2dUU&#34;&gt;video&lt;/a&gt; of how to apply design patterns using IBM&amp;rsquo;s &lt;a href=&#34;http://www-01.ibm.com/software/rational/uml/products.html&#34;&gt;Rational&lt;/a&gt; tool.  Apologies about the sound quality - just look at the pictures!&lt;/p&gt;
&lt;p&gt;Demonstration of Patterns in IBM&amp;rsquo;s Rational tool.
&lt;a href=&#34;http://www.youtube.com/watch?v=IjKClDX2dUU&#34;&gt;http://www.youtube.com/watch?v=IjKClDX2dUU&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Patterns, ModelMaker &amp; Beyond</title>
      <link>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</link>
      <pubDate>Tue, 04 Jan 2000 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/</guid>
      <description>
        
        
        &lt;p&gt;How can IDE visualisation features be further enhaced by UML and Design Patterns to assist developers. It discusses using the revolutionary UML tool ModelMaker (now discontinued) in conjuntion with Delphi.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/cycleAll1.gif&#34; alt=&#34;cycleAll1.gif (11801 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ModelMaker allowed you to apply patterns onto your code using a UI&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a talk I gave at the time that I was into Delphi programming.  Presented to the Australian Delphi User Group in December 1999.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;engineers-use-models&#34;&gt;Engineers use models&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Engineers produce plans before building bridges&lt;/li&gt;
&lt;li&gt;Electrical engineers have a language of electrical symbols&lt;/li&gt;
&lt;li&gt;Architects have blueprints&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do software engineers / programmer for a modelling tool?&lt;/p&gt;
&lt;p&gt;Do programmers necessarily need a strict visual language like other engineers?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Most programmers use visual IDE (integrated development environments) to visualize and organize their work.  For most programmers, this &amp;lsquo;informal&amp;rsquo; modelling is sufficient for their needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/formDelphi1.gif&#34; alt=&#34;formDelphi1.gif (15234 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;Database tables have a natural visual reprentation of a grid/table e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/sqlDelphi1.gif&#34; alt=&#34;sqlDelphi1.gif (14787 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;though when you want to visualise the often complex relationships between multiple tables, you may want to use something like the Delphi 5 Data Diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/dataDiagramDelphi.gif&#34; alt=&#34;dataDiagramDelphi.gif (17838 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;We also have visual modelling in the form of hierarchical representation of classes (or elements of a data module, in Delphi 5).  This form of representation is extrememly useful, however, these hierarchical views do not show how objects are connected to each other.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/codeExplorer.gif&#34; alt=&#34;codeExplorer.gif (48391 bytes)&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;where-does-uml-come-in&#34;&gt;Where does UML come in?&lt;/h2&gt;
&lt;p&gt;A modern IDE (Integrated Development Environments) like Delphi encourage a logical two-tier design where the data sits in the database and both the display &amp;amp; business logic sits in the presentation classes/components.  Really, most programmers are filling in the blanks (e.g. event code) and setting properties - the application code hangs off the IDE / Delphi / VCL / component framework.&lt;/p&gt;
&lt;p&gt;When someone asks you &amp;ldquo;where is your application code?&amp;rdquo; you typically answer in my GUI.&lt;/p&gt;
&lt;p&gt;If your application gets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;large or&lt;/li&gt;
&lt;li&gt;starts to create other extra classes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;then you have no means of visualising your application code/classes.  Not only are they embedded behind GUI components, but they are effectively invisible to broad visualisation and organisation.&lt;/p&gt;
&lt;h2 id=&#34;modelling-to-the-rescue&#34;&gt;Modelling to the rescue&lt;/h2&gt;
&lt;p&gt;Modelling software allows you to visualise your application code/classes, using UML as the visual symbol language.  E.g. Objects and pointers to other objects are represented by boxes and lines..&lt;/p&gt;
&lt;p&gt;When using a UML modeller, in addition to being able to visualize your extra application classes, you can also&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Visualize your existing Delphi components (including forms)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take a punt and model your data as real objects instead of DB tables - that way you can give them behaviour.  They become real OO objects that model the real world domain your application is about.  Your application would then be based on a proper object model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep application / business logic out of the GUI, and in a separate tier - called the model.  An OO model not only can model the real world domain your application is about, but can also be the engine powerhouse of your app.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/2tier1d.gif&#34; alt=&#34;2tier1d.gif (5982 bytes)&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;visualising-a-form-in-uml&#34;&gt;Visualising a form in UML&lt;/h2&gt;
&lt;p&gt;A UML model can also model &amp;amp; incorporate GUI forms.  A simple Delphi application with a form and a button on that form can be represented in the following ways:&lt;/p&gt;
&lt;p&gt;Thus this form containing a button&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/formWithOneButtonDelphi.gif&#34; alt=&#34;formWithOneButtonDelphi.gif (2071 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;which is equivalent to the following Delphi code&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pascal&#34; data-lang=&#34;pascal&#34;&gt;type  
  TForm1 = class (TForm)  
    Hello: TButton;  
    procedure HelloClick(Sender: TObject);  
  end;     
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;can be represented by the following UML diagram&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/formWithOneButtonUML.gif&#34; alt=&#34;formWithOneButtonUML.gif (1825 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that a form aggregates or contains a button, and this is represented by a arrow pointer.  If the button&amp;rsquo;s lifetime is tied to the lifetime of the form, then the arrow should have a black diamond instead of a clear one (if you are a stickler for correct UML).&lt;/p&gt;
&lt;h2 id=&#34;modelmaker&#34;&gt;Modelmaker&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/tabulaMM1.jpg&#34; alt=&#34;tabulaMM1.jpg (22451 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ModelMaker&amp;rsquo;s UI integrated code, UML and design patterns&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;modelmaker-benefits&#34;&gt;ModelMaker benefits&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.modelmakertools.com/&#34;&gt;ModelMaker&lt;/a&gt; (now unfortunately discontinued) represented a brand new way to develop classes and &lt;strong&gt;component packages&lt;/strong&gt; for Borland Delphi (1/2/3/4/5). ModelMaker is a two-way class tree oriented &lt;strong&gt;productivity&lt;/strong&gt; and UML-style CASE tool specifically designed for generating &lt;strong&gt;native&lt;/strong&gt; Delphi code (in fact it was made using Delphi and ModelMaker). Delphi&amp;rsquo;s Object Pascal language is fully supported by ModelMaker. From the start ModelMaker was designed to be a smart and highly productive tool. It has been used to create classes for both real-time / technical and database type applications. Versions 4 and 5 have full &lt;strong&gt;reverse enginering&lt;/strong&gt; capabilities.&lt;/p&gt;
&lt;p&gt;ModelMaker supports drawing &lt;strong&gt;UML style class diagrams&lt;/strong&gt; and from that perspective it looks much like a traditional CASE tool. The key to ModelMaker&amp;rsquo;s magic, speed and power however is the &lt;strong&gt;active modelling engine&lt;/strong&gt; which stores and maintains all relationships between classes and their members. Renaming a class or changing its ancestor will immediately propagate to the automatically generated source code. Tasks like overriding methods, adding events, properties and access methods are reduced to selecting and clicking.&lt;/p&gt;
&lt;p&gt;The main difference between ModelMaker and other CASE tools is that design is strictly related to and natively expressed in Delphi code. This way there is a seamless transition from design to implementation currently not found in any other CASE tool. This approach makes sure your designs remain down to earth. The main difference between ModelMaker and other Delphi code generators are it&amp;rsquo;s high level overview and restructuring capabilities letting you deal with complex designs.&lt;/p&gt;
&lt;p&gt;In ModelMaker you&amp;rsquo;ll find a synergy of ideas from the cutting edge of object-oriented and component-based technology. It was inspired by the work of methodologists like Ivar Jacobson (OOSE), Ralph Johnson (design patterns) and Karl Lieberherr (adaptive software).&lt;/p&gt;
&lt;p&gt;A unique feature, currently not found in any development environment for Delphi, is the support for &lt;strong&gt;design patterns&lt;/strong&gt;. A number of patterns are implemented as ‘ready to use’ active agents. A ModelMaker Pattern will not only insert Delphi style code fragments to implement a specific pattern, but it also stays ‘alive’ to update this code to reflect any changes made to the design.&lt;/p&gt;
&lt;p&gt;As a result, ModelMaker lets you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed up development&lt;/li&gt;
&lt;li&gt;Think more about designing instead of typing code.&lt;/li&gt;
&lt;li&gt;Design without compromising and refine and experiment with designs until they feel just right.&lt;/li&gt;
&lt;li&gt;Create and maintain magnitudes larger models in magnitudes less time.&lt;/li&gt;
&lt;li&gt;Document you designs in UML style diagrams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modelmaker-tutorial&#34;&gt;Modelmaker Tutorial&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Creating classes&lt;/li&gt;
&lt;li&gt;Adding methods and properties/fields to classes&lt;/li&gt;
&lt;li&gt;Creating constructors and Destructors - MM adds the &amp;lsquo;call inherited&amp;rsquo; code&lt;/li&gt;
&lt;li&gt;Units and code generation, two way synch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A sample of Andy&amp;rsquo;s Modelmaker live demo tutorials.&lt;/p&gt;
&lt;h4 id=&#34;creating-a-simple-pointer-property&#34;&gt;Creating a Simple Pointer property&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/demo1.gif&#34; alt=&#34;demo1.gif (30347 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;How to create 2 new classes and have one point to the other.  Also notice how a Delphi property is automatically created to represent the pointer.  Of course you can add the property by clicking on the &amp;ldquo;Add property&amp;rdquo; toolbar button, but as demonstrated, it is sure sometimes conventient to be able to drag and draw a pointer - additionally, it makes it clear that the property represents a relationship between two classes, rather than the property merely holding a value or some sort.&lt;/p&gt;
&lt;h4 id=&#34;applying-the-wrapper-design-pattern&#34;&gt;Applying the Wrapper design pattern&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/demo2.gif&#34; alt=&#34;demo2.gif (122461 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;Notice we create a third class and add 4 methods to it.  We want to then access these methods indirectly, via the TDefault1 class.  So we duplicate the methods in the TDefault1 class, delegating / redirecting these calls to the appropriate class, where the real methods live.  This technique is known as &amp;lsquo;&lt;strong&gt;wrapper pattern&lt;/strong&gt;&amp;rsquo;.   Note that the pattern will keep the method names up to date e.g. if you rename the wrapped class TDefault3 method &amp;lsquo;Member1&amp;rsquo; into &amp;lsquo;Member1A&amp;rsquo; then ModelMaker will automatically also rename TDefault1 class&amp;rsquo;s method &amp;lsquo;Member1&amp;rsquo; into &amp;lsquo;Member1A&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Other uses of this pattern include simulating multiple inheritance (e.g. by having a class delegate out functionality to another class, you create the illusion of complex functionality coming from multiple classes).&lt;/p&gt;
&lt;h4 id=&#34;initialising-create-and-owning-destroy-objects&#34;&gt;Initialising (Create) and owning (Destroy) objects&lt;/h4&gt;
&lt;p&gt;Another use of the wrapper pattern is creating composite objects out of smaller parts.   The client needs only to deal with one class, but behind the scenes there may be many classes involved.  Related to &amp;lsquo;Facade pattern&amp;rsquo;.  There are issues of initialisation: Do you want the big class to create the sub classes?  If so, make a &lt;strong&gt;Create constructor&lt;/strong&gt; method in the big class TDefault1 and do the creation of the subclasses (TDefault2, TDefault3) there.  Modelmaker&amp;rsquo;s &lt;strong&gt;creational wizard&lt;/strong&gt; can help build the code in the constructor automatically - and the destruction code as well. E.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/demo3.gif&#34; alt=&#34;demo3.gif (184426 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the above demo we are creating Create and Destroy methods for the TDefault1 class, so that it both creates and destroys its &amp;lsquo;sub-classes&amp;rsquo; when it itself is created/destroyed.  After running the ModelMaker creational wizard on the TDefault1 class, the resulting Create method is&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pascal&#34; data-lang=&#34;pascal&#34;&gt;inherited Create;  
FDefault2 := TDefault2.Create;  
FDefault3 := TDefault3.Create;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and the resulting Destroy method is&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pascal&#34; data-lang=&#34;pascal&#34;&gt;FDefault2.Free;  
FDefault3.Free;  
inherited Destroy;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: the &amp;lsquo;creational wizard&amp;rsquo; only generates code if it finds a create or destroy method.  Also, the creational wizard only generates code for FIELDS that have been marked &amp;lsquo;initialised&amp;rsquo; (this will generate the create code) or &amp;lsquo;owned&amp;rsquo; (this will create the free code).&lt;/p&gt;
&lt;h3 id=&#34;interfaces-patterns-templates&#34;&gt;Interfaces, Patterns, Templates&lt;/h3&gt;
&lt;p&gt;After a long period of design &amp;amp; development, a class can end up containing many, many methods and properties. Often these methods and properties can be grouped.   Wouldn&amp;rsquo;t it be great if we could name and distinguish these groups?  Well we already do!&lt;/p&gt;
&lt;p&gt;Classes are an attempt to group functionality.  Class A supports methods 1 &amp;amp; 2, Class B inherits from B and also supports methods 3 &amp;amp; 4.&lt;/p&gt;
&lt;p&gt;Interfaces are another attempt to group functionality.  A class can support/implement multiple interfaces.&lt;/p&gt;
&lt;p&gt;Patterns are sets of methods and properties in a class, relating to methods and properties in one or more other classes.&lt;/p&gt;
&lt;p&gt;Modelmaker templates are groups of methods &amp;amp; properties that you can save to disk and re-apply to any class.  Parametrisation means you can customise the code as you apply it.  You only get one shot at this.  After the code template is applied, you end up with raw code in your class, which you need to maintain manually.  This compares to ModelMaker&amp;rsquo;s design patterns, which are more &amp;lsquo;alive&amp;rsquo; e.g. references to a renamed method get maintained correctly within a ModelMaker pattern (e.g. Modelmaker&amp;rsquo;s visitor pattern)&lt;/p&gt;
&lt;p&gt;Whilst ModelMaker is discontinued, you can read &lt;a href=&#34;http://read.pudn.com/downloads27/ebook/87707/Online+PDF%20Docs/ModelMaker/usermanual620.pdf&#34;&gt;the manual&lt;/a&gt; and still &lt;a href=&#34;https://torry.net/authorsmore.php?id=4653&#34;&gt;download&lt;/a&gt; a trial of the old software.&lt;/p&gt;
&lt;h2 id=&#34;the-future&#34;&gt;The Future&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;As seen from 2000&amp;rsquo;s - nothing like this ever happened&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Working at the level of UML, &amp;lsquo;sets/groupings of methods&amp;rsquo; and patterns, is a significantly higher level than Delphi code - which is starting to look like assembly language.  One day we will be applying colored &amp;lsquo;LEGO&amp;rsquo; blocks that represent various groups of methods &amp;amp; properties - joining them together, much like the other component / bean technology we have today.&lt;/p&gt;
&lt;p&gt;Here is an example of a Composite &amp;amp; Proxy pattern combined, from the book &lt;a href=&#34;https://www.amazon.com.au/Pattern-Hatching-John-Vlissides/dp/0201432935&#34;&gt;Pattern Hatching: Design Patterns Applied&lt;/a&gt; by Vlissides:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/proxyComposite1.gif&#34; alt=&#34;proxyComposite1.gif (59167 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;More ideas for what a programming environment of the future might look like:   Adding a refactoring tool to ModelMaker + more patterns + templates.  Sequence Diagrams auto-generated from code.  Color coded groupings of patterns and methods/properties.&lt;/p&gt;
&lt;p&gt;Here is an example of a &amp;lsquo;refactoring&amp;rsquo; from Martin Fowler&amp;rsquo;s book &lt;a href=&#34;https://www.amazon.com.au/dp/0134757599/ref=cm_sw_em_r_mt_dp_DvJOFbTKD2427&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.atug.com/andypatterns/images/refactoring1.gif&#34; alt=&#34;refactoring1.gif (15421 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;Modelmaker can make easy work of accomplishing this refactoring using drag and drop of methods, however a built in, dedicated refactoring tool (as in Smalltalk and Java) would make the task even clearer and easier.&lt;/p&gt;
&lt;p&gt;2020 Postscript: Modern refactoring tools are now commonplace.&lt;/p&gt;
&lt;p&gt;-Andy Bulka&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Patterns: Appendix: Musings on Design Patterns</title>
      <link>https://abulka.github.io/patterns/musings-on-patterns/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      
      <guid>https://abulka.github.io/patterns/musings-on-patterns/</guid>
      <description>
        
        
        &lt;p&gt;Capturing hard-won software design experience in the form of design patterns and
architectural patterns is a noble cause that everyone can contribute to.&lt;/p&gt;
&lt;p&gt;You can contribute by writing patterns and maybe even coming to a &lt;a href=&#34;http://hillside.net/patterns/&#34;&gt;Plop patterns
conference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically when you see a software
development technique a few times, and see that it isn&amp;rsquo;t yet documented - write
it up in Pattern format and give it a name!&lt;/p&gt;
&lt;p&gt;A pattern is more than just a &amp;ldquo;tip&amp;rdquo;
or technique though - a pattern represents an abstract idea - that can be
implemented in various ways depending on your circumstances.&lt;/p&gt;
&lt;h1 id=&#34;the-patterns-movement&#34;&gt;The Patterns Movement&lt;/h1&gt;
&lt;p&gt;The Patterns Movement is spearheaded by &lt;a href=&#34;https://www.hillside.net/plop/2020/&#34;&gt;Hillside and the Plop conferences&lt;/a&gt;, held each year.&lt;/p&gt;
&lt;p&gt;There are a couple of things I would like to see happen in the patterns world.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, it would be nice if there was a single, authoritative repository of patterns. Yes an attempt has been made - a catalog book and and various websites - but nothing authoratative. I started a list of links &lt;a href=&#34;https://abulka.github.io/index.php/blog/central_repository/&#34; title=&#34;Towards a central repository of Design Patterns&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondly, it would be nice to have deep design pattern support in UML within all our favourite IDE&amp;rsquo;s. For example Netbeans has it all - coding, form design, UML and design pattern support - albiet not as integrated as it could be and not as polished as it could be. &lt;strong&gt;Update:&lt;/strong&gt; Unfortunately Netbeans seems to have dropped UML support in recent builds.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comments-indicating-pattern-usage&#34;&gt;Comments indicating Pattern usage&lt;/h3&gt;
&lt;p&gt;If IDE&amp;rsquo;s are not your cup of tea, then how about this: source code should have comment markers indicating where the patterns are, so that a reverse engineering tool can visualise not only the UML but also where the patterns are.&lt;/p&gt;
&lt;p&gt;My own UML tool PyNSource will have such a feature - est. June 2011 &lt;i&gt;(turns out this never happened :-)&lt;/i&gt;.&lt;/p&gt;
&lt;h3 id=&#34;executable-uml&#34;&gt;Executable UML&lt;/h3&gt;
&lt;p&gt;Further advancements are arguably executable UML and even the possibility of building software without code.
I muse a bit about this in my blog entry on &lt;a href=&#34;https://abulka.github.io/index.php/blog/visualising_software/&#34; title=&#34;Visualising Software&#34;&gt;software visualisation&lt;/a&gt; and my paper on &lt;a href=&#34;https://abulka.github.io/index.php/design_patterns/pattern_automation/&#34; title=&#34;Design Pattern Automation&#34;&gt;design pattern tools&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&#34;a-repository-of-patterns&#34;&gt;A repository of patterns&lt;/h3&gt;
&lt;p&gt;First, it would be nice if there was a single, authoritative repository of patterns. Yes an attempt has been made - a catalog book and and various websites - but nothing authoratative.  I&amp;rsquo;m starting a list of links &lt;a href=&#34;https://abulka.github.io/index.php/blog/central_repository/&#34; title=&#34;Towards a central repository of Design Patterns&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Patterns at all levels need to be core &lt;strong&gt;visual&lt;/strong&gt; building blocks of IDE&amp;rsquo;s, or at the very least, extractable from source code into some visual UML tool - rather than being design ghosts that float around, implicit, in our source code.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Patterns: Appendix: My KoalaPlop Patterns</title>
      <link>https://abulka.github.io/patterns/appendix-koala-plop/</link>
      <pubDate>Thu, 01 Jan 1970 10:31:40 +1000</pubDate>
      
      <guid>https://abulka.github.io/patterns/appendix-koala-plop/</guid>
      <description>
        
        
        &lt;h2 id=&#34;andys-published-design-patterns&#34;&gt;Andy&amp;rsquo;s Published Design Patterns&lt;/h2&gt;
&lt;p&gt;The four patterns MGM, RM, TI and Pattern Automation are substantial works which have been presented at KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs) in both 2000 and 2001.  My shepherds (paper peer reviewers) were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jim Coplien (MGM pattern)&lt;/li&gt;
&lt;li&gt;Ali Arsanjani (TI pattern)&lt;/li&gt;
&lt;li&gt;James Noble (RM pattern).&lt;/li&gt;
&lt;li&gt;(Design Pattern Automation) was not peer reviewed before being presented and published.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These final versions also incorporate comments and reviews from the attendees of KoalaPlop 2000 and 2001.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
