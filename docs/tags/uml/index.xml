<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy Bulka – UML</title>
    <link>https://abulka.github.io/tags/uml/</link>
    <description>Recent content in UML on Andy Bulka</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 14 Feb 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://abulka.github.io/tags/uml/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Projects: Pynsource</title>
      <link>https://abulka.github.io/projects/apps/pynsource/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/apps/pynsource/</guid>
      <description>
        
        
        &lt;p&gt;Visit &lt;a href=&#34;http://www.pynsource.com&#34;&gt;pynsource.com.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pynsource is a UML tool for Python a desktop App for Mac, Window and Linux.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/C8WrRDf.png&#34; alt=&#34;Pynsource hero&#34; title=&#34;Pynsource Hero&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pynsource imports Python code and features zoom, Ascii and PlantUML views and Auto Layout&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Community Edition is free, fully functional and open source - check out the &lt;a href=&#34;https://github.com/abulka/pynsource&#34;&gt;Pynsource GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Buy the &lt;a href=&#34;http://www.pynsource.com/pricing.html&#34;&gt;Pro Edition&lt;/a&gt; for $20 to unlock the zoom feature and other pro features.&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href=&#34;http://www.pynsource.com&#34;&gt;Pynsource Home Page&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: Literate Code Mapping</title>
      <link>https://abulka.github.io/projects/big-ideas/lcodemaps/</link>
      <pubDate>Mon, 23 Nov 2020 12:43:14 +1100</pubDate>
      
      <guid>https://abulka.github.io/projects/big-ideas/lcodemaps/</guid>
      <description>
        
        
        &lt;p&gt;&lt;em&gt;Diagramming Methodology Specification&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Literate Code Maps are diagrams which help programmers understand the structure and behaviour of source code.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abulka/lcodemaps/master/images/example-01.svg?sanitize=true&#34; alt=&#34;code map example 01&#34;&gt;&lt;/p&gt;
&lt;p&gt;Code Map diagrams differ from UML diagrams in that they
focus on real source code fragments and lots of
rich-text formatted story-telling narrative.
They combine class and sequence diagrams into the same
diagram, offering step by step numbering to follow the behaviour of a use case story.&lt;/p&gt;
&lt;h2 id=&#34;the-5-laws-of-literate-code-mapping&#34;&gt;The 5 laws of literate code mapping&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Boxes represent any scope or namespace - be creative&lt;/li&gt;
&lt;li&gt;Show structure and behaviour in the same diagram&lt;/li&gt;
&lt;li&gt;Code compartments in boxes contain code fragments and richly formatted narrative&lt;/li&gt;
&lt;li&gt;Lines representing function calls between boxes are numbered to tell a story&lt;/li&gt;
&lt;li&gt;Cross reference numbers can appear anywhere to associate ideas&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Think of literate code maps like UML class diagrams where the classes are now boxes which can represent more things, and lines represent function calls as well as structure.  Boxes contain one or more extra compartments containing real code fragments and rich narrative.&lt;/p&gt;
&lt;p&gt;See full website dedicated to Literate Code Mapping &lt;a href=&#34;https://abulka.github.io/lcodemaps/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: UML Layout</title>
      <link>https://abulka.github.io/blog/2011/04/06/uml-layout/</link>
      <pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2011/04/06/uml-layout/</guid>
      <description>
        
        
        &lt;h1 id=&#34;developing-a-layout-algorithm-for-uml-diagrams&#34;&gt;Developing a Layout Algorithm for UML diagrams&lt;/h1&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Presented to the &lt;a href=&#34;https://melbournepatterns.wordpress.com/&#34;&gt;Melbourne Patterns Group&lt;/a&gt;, Wednesday 6th April 2011 6:30 PM&lt;/p&gt;
&lt;h2 id=&#34;the-problem-untangling-uml-diagrams&#34;&gt;The Problem: Untangling UML Diagrams&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-the-problem.png&#34; alt=&#34;png your image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;terms&#34;&gt;Terms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Nodes – these are the shapes/rectangles&lt;/li&gt;
&lt;li&gt;Edges – these are the lines connecting the shapes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;My UML tool is written in Python&lt;/li&gt;
&lt;li&gt;Existing layout libraries for e.g. python PyGraphviz has no windows port so I wrote my own&lt;/li&gt;
&lt;li&gt;Layout is reasonably hard to implement – academic papers are very complex and deal in a lot of math&lt;/li&gt;
&lt;li&gt;DIRTY SECRET OF ACADEMIA - Most Layout algorithms only deal with ‘points’ and don’t take into account real width and height&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus for any real world use
(unless dealing with network and particle visualisation where each node is the same size/shape),
it seemed to me that one needs to run an &lt;em&gt;overlap removal algorithm&lt;/em&gt; after the layout to remove shape overlaps.&lt;/p&gt;
&lt;p&gt;Overlap removal algorithm needs to minimise shape movement in order to respect the layout results&lt;/p&gt;
&lt;h2 id=&#34;what-i-developed&#34;&gt;What I developed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I used a ‘spring layout’ adapted from java and javascript&lt;/li&gt;
&lt;li&gt;I developed my own overlap removal algorithm&lt;/li&gt;
&lt;li&gt;Developed a GUI sandbox test app for development&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overlap-removal---before-and-after&#34;&gt;Overlap Removal - Before and After&lt;/h2&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-before.png#floatleft&#34;
         alt=&#34;before&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;before&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-after.png#floatright&#34;
         alt=&#34;after applying layout&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;after applying layout&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;Extensive unit tests were created to keep on top of the layout algorithm results.  A word document containing annotated screenshots for each test helped me enormously.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-unit-testing.png&#34;
         alt=&#34;an overlap removal use case which became a unit test&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;an overlap removal use case which became a unit test&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Layout / persistence format was created for creating layout scenarios&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;D25&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;159&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;106&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;D13&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;73&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;m1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;170&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;92&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;unit-testing-brittleness-avoided&#34;&gt;Unit Testing Brittleness Avoided&lt;/h3&gt;
&lt;p&gt;Loose tests using (e.g. I created a function called &lt;code&gt;ensureYorder()&lt;/code&gt; etc) were created so that the tests were not too brittle.  Slight variations in position are ignored.&lt;/p&gt;
&lt;p&gt;View this unit test file at the Pynsource GitHub repository &lt;a href=&#34;https://github.com/abulka/pynsource/blob/master/src/tests/test_overlaps1.py&#34;&gt;tests/test_overlaps1.py&lt;/a&gt;. Here is an example unit test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_LoadScenario3&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;g&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;LoadGraphFromStrings(TEST_GRAPH3)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;test3_5InsertedVerticallyTwoPushedDown&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_LoadScenario3()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# move m1 to the left&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;g&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;FindNodeById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;m1&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;left, node&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    d97 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;g&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;FindNodeById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D97&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    oldD97pos &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (d97&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;left, d97&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;top)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# assert m1 has been inserted vertically - two pushed down&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    were_all_overlaps_removed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;overlap_remover&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;RemoveOverlaps()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assertTrue(were_all_overlaps_removed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assertEqual(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;overlap_remover&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GetStats()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;total_overlaps_found&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assertTrue(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_ensureYorder(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;m1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D25&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D13&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assertTrue(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_ensureXorder(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;m1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D97&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D98&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assertTrue(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_ensureXorder(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D25&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D97&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D98&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assertTrue(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_ensureXorder(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D13&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D97&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D98&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assertEqual(oldD97pos, (d97&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;left, d97&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;top))  &lt;span style=&#34;color:#6272a4&#34;&gt;# ensure D97 hasn&amp;#39;t been pushed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the tests:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-test-run.png&#34;
         alt=&#34;An example test run&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;An example test run&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Having a huge bank of unit tests helped in refactoring, too.  Imagine testing all the necessary scenarios by hand!&lt;/p&gt;
&lt;p&gt;The final Results were pretty good!&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-final-result-good.png&#34;
         alt=&#34;A UML diagram after overlap removal&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;A UML diagram after overlap removal&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;design-patterns-used&#34;&gt;Design Patterns Used&lt;/h2&gt;
&lt;h3 id=&#34;memento&#34;&gt;Memento&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memento was used to remember graph layout positions and then compare mementos to see if anything had ‘changed’ and thus drop out of the Spring layout algorithm early&lt;/li&gt;
&lt;li&gt;Memento was used to save/restore layouts in my test GUI – assigned to keys 0..9&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;blackboard&#34;&gt;Blackboard&lt;/h3&gt;
&lt;p&gt;Blackboard pattern used to run layout several times and figure out which was the best, cleanest result using multiple criteria.  Each run is a ‘snapshot’&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Snapshot 1 [6] LL  0   NN pre rm overlaps  5   LN  0   scale 1.6   bounds 23  (500, 473) &amp;lt;---
Snapshot 2 [4] LL  0   NN pre rm overlaps  5   LN  1   scale 1.4   bounds 30  (570, 537)
Snapshot 3 [5] LL  0   NN pre rm overlaps  6   LN  2   scale 2.0   bounds 17  (444, 393)
Snapshot 4 [2] LL  0   NN pre rm overlaps  4   LN  2   scale 1.4   bounds 34  (648, 537)
Snapshot 5 [3] LL  0   NN pre rm overlaps  5   LN  4   scale 2.0   bounds 21  (427, 508)
Snapshot 6 [1] LL  0   NN pre rm overlaps 10   LN  5   scale 2.0   bounds 18  (485, 379)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python goodness helped in this ‘AI’ smartness&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sortfunc&lt;/span&gt;(d):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# this does the thinking!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (d[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;LL&amp;#39;&lt;/span&gt;], d[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;LN&amp;#39;&lt;/span&gt;], d[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;bounds_area_simple&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;d[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;scale&amp;#39;&lt;/span&gt;], d[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;NN_pre_OR&amp;#39;&lt;/span&gt;]) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;future&#34;&gt;Future&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;“Line  over node” overlap was abandoned as it started to get really complex with a lot of trigonometry and perhaps this area needs a more academic approach&lt;/li&gt;
&lt;li&gt;Non straight lines and line routing is probably the better direction&lt;/li&gt;
&lt;li&gt;Adding an understanding of UML semantics is another direction to research, so that e.g. base classes are above derived classes etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overlap-removal-server&#34;&gt;Overlap Removal Server&lt;/h2&gt;
&lt;p&gt;In 2020 I needed to expose the overlap removal code as an API for javascript to use.&lt;/p&gt;
&lt;p&gt;Here is that small research sub-project &lt;a href=&#34;https://github.com/abulka/pynsource/tree/master/Research/overlap_removal_server&#34;&gt;https://github.com/abulka/pynsource/tree/master/Research/overlap_removal_server&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;h3 id=&#34;code-and-links&#34;&gt;Code and Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Overlap removal code is Python, open source&lt;/li&gt;
&lt;li&gt;Part of my python UML tool &lt;a href=&#34;https://www.pynsource.com&#34;&gt;PyNSource&lt;/a&gt;: Reverse engineer python source code into UML - display UML as Ascii art or PlantUML diagrams in a proper diagramming visual workspace.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;slides-on-scribd&#34;&gt;Slides on Scribd&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.scribd.com/doc/55976194/UML-Graph-Layout-Andy-Talk-March-2011&#34; title=&#34;View UML Graph Layout - Andy Talk - March 2011 on Scribd&#34;&gt;UML Graph Layout - Andy Talk - March 2011&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;slides-as-html&#34;&gt;Slides as HTML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The problem of laying out UML&lt;/li&gt;
&lt;li&gt;Spring Layout&lt;/li&gt;
&lt;li&gt;Mapping layout to Real World&lt;/li&gt;
&lt;li&gt;OGL&lt;/li&gt;
&lt;li&gt;MVC&lt;/li&gt;
&lt;li&gt;Overlap Removal&lt;/li&gt;
&lt;li&gt;Unit tests and unit test diagrams&lt;/li&gt;
&lt;li&gt;Memento Design Pattern&lt;/li&gt;
&lt;li&gt;Blackboard Design Pattern &amp;amp; Injecting sorting function&lt;/li&gt;
&lt;li&gt;Future..&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;https://abulka.github.io/files/UML-Graph-Layout-Andy-Talk-March-2011.html&#34; name=&#34;frame1&#34; scrolling=&#34;yes&#34; frameborder=&#34;yes&#34; align=&#34;center&#34; height = &#34;842px&#34; width = &#34;800&#34;&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;slides-as-pdf-download&#34;&gt;Slides as Pdf download&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://abulka.github.io/index.php/download_file/429/109/&#34;&gt;View as pdf&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;images&#34;&gt;Images&lt;/h2&gt;
&lt;h3 id=&#34;sample-images&#34;&gt;Sample Images&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/images/uml/content/blog/newcat/uml/test-uml.png&#34; alt=&#34;png your image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/images/uml/fred-uml.png&#34; alt=&#34;png your image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-before.png&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-after.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-before.png#floatleft&#34;
         alt=&#34;before&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;before&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://abulka.github.io/blog/images/uml-layout-after.png#floatright&#34;
         alt=&#34;after applying layout&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;after applying layout&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Netbeans Uml</title>
      <link>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</link>
      <pubDate>Wed, 11 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</guid>
      <description>
        
        
        &lt;p&gt;Let&amp;rsquo;s take a look at the UML and design pattern support in Netbeans and investigate Netbean&amp;rsquo;s cool ability to build &amp;ldquo;custom&amp;rdquo; design patterns - visually.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;UML and Design Pattern Support in Netbeans 6.5&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_bgnetbeans01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Netbeans is an opensource IDE from Sun and importantly Netbeans offers a wonderful GUI form designer plus UML facilities, which Eclipse doesn&amp;rsquo;t come bundled with out of the box.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unfortunately the UML support described in this article &lt;em&gt;has been removed&lt;/em&gt; from later versions of Netbeans. This article should be considered a historical article where we can learn from how this fascinating UML tool once worked. See also my &lt;a href=&#34;https://abulka.github.io/blog/2000/01/04/patterns-modelmaker-beyond/&#34; title=&#34;Patterns, ModelMaker &amp;amp; Beyond&#34;&gt;blog post on ModelMaker&lt;/a&gt; (another discontinued tool) for a similarly groundbreaking UML tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Update: It seems there is &lt;a href=&#34;http://hg.netbeans.org/community-uml&#34;&gt;some activity&lt;/a&gt; on reviving this tool in 2020&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;the-uml-diagrammer&#34;&gt;The UML diagrammer&lt;/h2&gt;
&lt;p&gt;The UML diagramming is quite good.  You drag out objects from a palette or use the &amp;ldquo;hover palette&amp;rdquo; next to a class to drag out links to either existing or new classes.  This gui metaphor is nice to use and saves you constantly returning to a palette on the side of the screen in order to add objects and connections.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_01.png&#34; alt=&#34;62021233793272netbeanspic01.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Use the &amp;ldquo;hover palette&amp;rdquo; next to a class to drag out links to either existing or new classes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course you need a nice palette of UML objects too:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_02.png&#34; alt=&#34;99041233793360netbeanspic02.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Netbean&amp;rsquo;s UML palette&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-uml-model&#34;&gt;The UML &amp;ldquo;Model&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;Any UML you do in Netbeans requires you to create a special &amp;ldquo;UML project&amp;rdquo;.  This contains a model of your classes and methods etc. as objects.  The UML view is driven off the model.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can generate code OUT into another project&lt;/li&gt;
&lt;li&gt;You can reverse engineer code IN from another project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UML markers in the code help code sync e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_03.png&#34; alt=&#34;64891233793556netbeanspic03.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Markers in generated code - careful not to delete them&lt;br&gt;
unless you know what you are doing!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;which actually comprise comments with a unique guid e.g.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//   
// #\[regen=yes,id=DCE.548B84AB-2DF4-1944-BA69-85F33CA61C99\]  
// 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;code-generation&#34;&gt;Code generation&lt;/h2&gt;
&lt;p&gt;UML generates classes, interfaces, enums, methods and attributes No substantive code is generated Attributes can be one to many etc. When you click on a association line, select properties and select multiplicity, you get a choice of implementation e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_04.png&#34; alt=&#34;12741233793699netbeanspic04.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A choice of one to many implementations&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A lot of language make do with one list and one hash type and build it into thelanguage (e.g. python, ruby, groovy, javascript).  Hey but this is Java and you can&amp;rsquo;t make it too easy!  Of course there are special needs for different collection types, so this is a pretty cool way of picking the implementationn that you want.&lt;/p&gt;
&lt;p&gt;Note that you must specify the association as “navigable” to get an &amp;ldquo;arrow&amp;rdquo; on your line and to get any code generated for that association.&lt;/p&gt;
&lt;p&gt;Attribute code generation seems a bit buggy and often doesn’t compile E.g. Here is a class X having a one to many association with class Z&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.util.ArrayList&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;     &lt;span style=&#34;color:#6272a4&#34;&gt;// ok
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; Z mZ&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// surely Z should be ArrayList
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; ArrayList &lt;span style=&#34;color:#50fa7b&#34;&gt;getZ&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; mZ&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;setZ&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;ArrayList val&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;mZ&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; val&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in the above code you don&amp;rsquo;t get your X.Add(z) method you instead get some strange setter which accepts an entire arraylist - as if anyone does that.&lt;/p&gt;
&lt;h3 id=&#34;freemarker-templates&#34;&gt;Freemarker templates&lt;/h3&gt;
&lt;p&gt;Code generation using Freemarker templates.&lt;/p&gt;
&lt;p&gt;You can build code generation templates to generate more substantial code.  Netbeans uses this templating system throughout itself e.g. the default java class stub you get when you create a new java class is a freemarker template.&lt;/p&gt;
&lt;p&gt;To generate code using freemarker via UML you need to mark your UML classes with stereotypes and associate those stereotypes with a template. &lt;/p&gt;
&lt;p&gt;Unfortunately the whole code generation aspect is currently poorly documented and there is no API published except a code class interface that one is meant to decipher. The one &lt;a href=&#34;http://www.netbeans.org/kb/61/uml/codegen.html&#34;&gt;tutorial&lt;/a&gt; uses a 441 line freemarker template to generate a couple of lines of code !!  And the Sun developers in this area claim there are no resources to provide any more documentation.  &lt;img src=&#34;%7BCCM:BASE_URL%7D/concrete/js/tiny_mce_309/plugins/emotions/img/smiley-cry.gif&#34; alt=&#34;Cry&#34; title=&#34;Cry&#34;&gt;  View the forum discussion &lt;a href=&#34;http://markmail.org/search/?q=uml+code+generation+pattern#query:uml%20code%20generation%20pattern+page:1+mid:dvdtp22m2f7qq4hb+state:results&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;design-pattern-support&#34;&gt;Design Pattern Support&lt;/h2&gt;
&lt;p&gt;All GOF patterns supplied as templates which you can graft into your workspace:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_05.png&#34; alt=&#34;19881233794183netbeanspic05.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Invoking the design pattern wizard.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can specify existing classes as fulfilling roles, or have the wizard create new classes for those roles:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_06.png&#34; alt=&#34;24371233794247netbeanspic06.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mapping design pattern roles to existing or new classes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Again, only the basic structure of the pattern is created – you get no actual substantive code.  For example with the Singleton pattern you get the getInstance() method generated but there is no code inside! Here is the class before and after:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_07.png&#34; alt=&#34;98491233794359netbeanspic07.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Before and after applying the Singleton design pattern.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And the code that was generated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WhiteHouse&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; WhiteHouse uniqueInstance&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// correct
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; singletonData&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WhiteHouse&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// should have been made private   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;                       &lt;span style=&#34;color:#6272a4&#34;&gt;// to prevent multiple instantiations
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; WhiteHouse &lt;span style=&#34;color:#50fa7b&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// correct declaratation  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;// but sorely needs functional code here...instead of returning null !  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;singletonOperation&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getSingletonData&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; 0&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// huh? Shouldn&amp;#39;t this return this.singletonData ?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It seems that when generating sub methods, if the method returns a value, there is some default code generation which returns null or 0 or something that will allow the generated code to compile.  However this might confuse newcomers who perhaps see this generate code as properly functinal in some way.  Let me repeat, there is no code generation of body code from design patterns except for the default return values that you normally get with UML code generation.&lt;/p&gt;
&lt;p&gt;Yes you can generate code from UML but that requires that you write FreeMarker templates and associate these templates with stereotypes (just set the stereotype property of a uml class or method).  The design patterns don&amp;rsquo;t apply these stereotypes, nor do they provide any freemarker code generation templates.&lt;/p&gt;
&lt;p&gt;Without code generation the design patterns are of limited value.  Code generation is extremely difficult, relying on Freemarker template technology and next to no documentation.  I am hoping that &amp;ldquo;marking&amp;rdquo; design pattern related classes with stereotypes will solve the code generation problem - but nobody seems to have actually done it&lt;br&gt;
The code generation that exists is buggy anyway esp. with multiplicity of attributes.&lt;/p&gt;
&lt;h2 id=&#34;custom-design-patterns&#34;&gt;Custom Design Patterns&lt;/h2&gt;
&lt;p&gt;One really nice thing is being able to create your own design patterns.  No coding or compilation is needed, just draw the diagram and save.  From the Tools/Other menus select the UML design centre:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_08.png&#34; alt=&#34;26961233795033netbeanspic08.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Invoking the UML Design Centre from a menu&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here you can view the existing patterns in the patterns &amp;ldquo;design centre&amp;rdquo;.  It is very easy to create a folder and add your own patterns. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_09.png&#34; alt=&#34;31261233795173netbeanspic09.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The UML Design Centre, where you can add your own patterns.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To create your own pattern simply draw a diagram of your pattern classes using a few special diagram objects - the collaboration and role objects:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_10.png&#34; alt=&#34;54611233795260netbeanspic10.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The UML palette relating to design patterns.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can only use the UML palette relating to design patterns whilst in the UML design centre, despite it being visible during normal UML operations.  This is a little confusing, especially as I&amp;rsquo;d love to be able to document my patterns once they have been applied, using the collaboration object - dragging a named role line to each class involved in the pattern&amp;hellip;&lt;/p&gt;
&lt;p&gt;When building a design pattern, instead of adding a class you add a &amp;ldquo;class role&amp;rdquo; object from this special design pattern palette.  The role objects are placeholders for a new or existing classes (or use cases or interfaces etc.), which you can fill in using combo drop downs etc. when the pattern is finally applied via the design pattern wizard.&lt;/p&gt;
&lt;p&gt;You link all the roles together with a collaboration object and you are done.  The collaboration object lets you name your pattern and becomes the anchor for all the roles.  Its a pity you don&amp;rsquo;t get collaboration object in regular diagramming in order to document your patterns once they have been applied.  You can instead use notes with multiple links (though this doesn&amp;rsquo;t let you label the links) or make do with tagging your UML classes with stereotypes, indicating the roles e.g. Adapter, Adaptee, Client etc.&lt;/p&gt;
&lt;p&gt;Here is a pattern I created:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_11.png&#34; alt=&#34;64361233795523netbeanspic11.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An example custom design pattern!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The example is a bit contrived, but you get the idea.  Once you build your pattern you can immediately go back to your normal workspace and apply it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/netbeans_uml_12.png&#34; alt=&#34;25671233795780netbeanspic12.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Applying my new pattern to my workspace.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;annoyances&#34;&gt;Annoyances&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In UML new classes are always created in the package in which the diagram resides, so you may need to move them to the correct package&lt;/li&gt;
&lt;li&gt;Right click shows disabled items in popup menu then right click again at slightly different pixel position and items are enabled again&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t copy and paste methods and attributes&lt;/li&gt;
&lt;li&gt;Weird keyboard combinations e.g. CTRL-ALT-SHIFT-N for pan&lt;/li&gt;
&lt;li&gt;Newly generated code java files don&amp;rsquo;t always appear in the project so you have to close and reopen the target project or wait till some emergency timer refresh kicks in.&lt;/li&gt;
&lt;li&gt;Synch to and fro is a pain and error prone. Whilst code rarely gets clobbered you can get unexpected multiple declarations of variables, loss of associations in your UML diagrams when re-reverse engineering (esp if generated by design pattern workflow)&lt;/li&gt;
&lt;li&gt;Code generation concepts &amp;ldquo;Add Merge Markers to Existing Source Elements&amp;rdquo; and &amp;ldquo;Generate Markers for Source File Merging&amp;rdquo; too complex, IMO.&lt;/li&gt;
&lt;li&gt;Apply a design pattern twice and you get two generalisation relationships between classes and other silly bugs&lt;/li&gt;
&lt;li&gt;Be careful when using design pattern &amp;ldquo;automation&amp;rdquo;.  The particular pattern implementation may not suit you situation.  For example &amp;ldquo;Adapter&amp;rdquo; is a object adapter not a class adapter. You need to understand patterns anyway to use these tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I found Netbeans to be generally very cool, fast and stable.  The UML tool is generally nice to use.  Its really a pity that the UML code generation is a bit buggy and that UML custom code generation is undocumented and uber complex.  The Design Patterns support and customization in Netbeans is outstanding (not at the level of IBM Rational though).  Again its a pity there is no design patterns code generation support, and that this part of Sun&amp;rsquo;s roadmap seems to be a dead end.  They even say on their &lt;a href=&#34;http://plugins.netbeans.org/plugin/1801/netbeans-uml&#34;&gt;UML plugin home page&lt;/a&gt; that if you want more - use the Visual Paradigm plugin for Netbeans. I live in hope that this opensource tool can be improved though.  Maybe I should start looking at the code base myself&amp;hellip; :-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seems there is &lt;a href=&#34;http://hg.netbeans.org/community-uml&#34;&gt;some activity&lt;/a&gt; on reviving this tool in 2020&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Visualising Software</title>
      <link>https://abulka.github.io/blog/2009/01/22/visualising-software/</link>
      <pubDate>Thu, 22 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2009/01/22/visualising-software/</guid>
      <description>
        
        
        &lt;p&gt;Ways of Visualising Software Designs&lt;/p&gt;
&lt;p&gt;This blog article explores the novel ways of developing software more visually and in visualising software generally - that is without coding.  It also explores ways of visualising software designs and of watching software execute. &lt;a href=&#34;http://en.wikipedia.org/wiki/Visual_programming_language&#34;&gt;Visual Programming&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Executable_UML&#34;&gt;Executable UML&lt;/a&gt; are the closest terms that describe this area.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of these projects have failed and others continue to thrive (e.g. Scratch). As of 2020 the new big thing in this area is &lt;a href=&#34;https://www.google.com/search?sxsrf=ALeKk00YHpag-SrvKTLZbTzhPv3fQXe2FQ%3A1604617901453&amp;amp;ei=rYakX6ybG8Ce4-EP09qsiAE&amp;amp;q=nocode+low+code&amp;amp;oq=nocode+low+code&amp;amp;gs_lcp=CgZwc3ktYWIQAzIFCAAQyQMyBggAEBYQHjIGCAAQFhAeMgYIABAWEB4yBggAEBYQHjIICAAQFhAKEB4yBggAEBYQHjIGCAAQFhAeMgYIABAWEB4yBggAEBYQHjoECAAQRzoFCAAQkQI6CwgAELEDEIMBEJECOggIABCxAxCDAToFCC4QsQM6AgguOg4ILhCxAxCDARDHARCjAjoICC4QxwEQowI6BAgAEEM6BAguEEM6CwguELEDEMcBEKMCOgIIADoNCC4QsQMQyQMQQxCTAjoHCAAQsQMQQzoFCAAQsQM6CggAELEDEMkDEEM6BAgAEApQrdHvDFjG4-8MYJHl7wxoAHACeACAAZMCiAHlF5IBBTAuOS42mAEAoAEBqgEHZ3dzLXdpesgBCMABAQ&amp;amp;sclient=psy-ab&amp;amp;ved=0ahUKEwjspZDAw-zsAhVAzzgGHVMtCxEQ4dUDCA0&amp;amp;uact=5&#34;&gt;low code and no-code&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Creating software in a visual way would arguably lift the level of abstraction in how we create software.  Is it even possible?&lt;/p&gt;
&lt;h3 id=&#34;model-driven-design&#34;&gt;Model Driven Design&lt;/h3&gt;
&lt;p&gt;Whether its MDA (model driven architecture) with UML or Case tools from the past - this has clearly been a dream for a long time.  Martin Fowler considers the viability of MSA in an interesting &lt;a href=&#34;http://martinfowler.com/bliki/ModelDrivenArchitecture.html&#34;&gt;blog entry&lt;/a&gt; - also providing links to other peoples&amp;rsquo; opinions in this area. &lt;/p&gt;
&lt;p&gt;For example there are some that argue UML (even the latest 2.0 version) is not computationally complete, or that programming visually is not all that its cracked up to be and and may not be as efficient as textual coding techniques.  Here is yet another &lt;a href=&#34;http://www.ifi.uzh.ch/rerg/fileadmin/downloads/publications/papers/IWSSD-10.pdf&#34;&gt;critique&lt;/a&gt; of UML as a modelling tool good enough to generate code.  These sorts of critiques certainly don&amp;rsquo;t stop the vendors - there are a lot of MDA tools e.g. [here is a list](#Links to MDA tools).&lt;/p&gt;
&lt;h3 id=&#34;case-tools&#34;&gt;Case Tools&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m an optimist and part of me wants to see some sort of MDA / Executable UML approach work.  However it may not look like existing solutions - we need to look outside the box and find a blend of metaphors that are trully innovative. That&amp;rsquo;s why this page exists - lets explore what programming visually looks like.&lt;/p&gt;
&lt;h3 id=&#34;oo-as-biological-cells&#34;&gt;OO as Biological Cells&lt;/h3&gt;
&lt;p&gt;I once came up with the idea of OO programming being like a &amp;ldquo;world of cells&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The most complex systems on earth, including the human body, are composed of biological cells amongst other things.  Shouldn&amp;rsquo;t we be looking to biology for metaphors for programming?&lt;/p&gt;
&lt;p&gt;Here is a thought experiment for you.  Imagine running software as a collection of biological cells, each cell representing an instance of a class.  Each object / cell lives in a community of objects, sending messages to other objects, storing data and providing behaviour exposed as methods.  It might look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_eggs1.gif&#34; alt=&#34;eggs1.gif (189234 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;OO software as biological cells?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like in UML, the top half of the cells are storage (primitive data including pointers to other cells) and the bottom half represents the available public methods of the object.&lt;/p&gt;
&lt;p&gt;The red lighting symbol&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_redligtningFromCellEgg.gif&#34; alt=&#34;redligtningFromCellEgg.gif (854 bytes)&#34;&gt;next to a method name represents a method being invoked.&lt;/p&gt;
&lt;p&gt;Imagine being able to pan around and view different aspects of this running software model.  The technique used by the information organiser &lt;a href=&#34;http://www.thebrain.com/&#34;&gt;the brain&lt;/a&gt; might be one cool way to browsing, navigate and perhaps organise such &amp;ldquo;computational space&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;executable-uml&#34;&gt;Executable UML&lt;/h3&gt;
&lt;p&gt;There are only a couple of high end tools that get into the territory of being able to draw UML diagrams and generate code - which is executable.  The idea is that it saves implementation time and round trip engineering where you suck the implementation back into a UML model and to and fro and to and fro with all the synchronisation nightmares that entails. &lt;/p&gt;
&lt;p&gt;UML is not expressive enough to cover all that code needs to do, so some of these tools come with a language that you have to use anyway.&lt;/p&gt;
&lt;p&gt;There are a couple of books in this area.  One is called &lt;a href=&#34;http://www.cambridge.org/uk/catalogue/catalogue.asp?isbn=0521537711&#34;&gt;Model Driven Architecture with Executable UML&lt;/a&gt; which is linked to the Keneddy Carter tool (see below) and the other is called &lt;a href=&#34;http://www.amazon.com/Executable-UML-Model-Driven-Architecture-Addison-Wesley/dp/0201748045/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1232316418&amp;amp;sr=8-1&#34;&gt;Executable UML: A Foundation for Model-Driven Architecture&lt;/a&gt; which illustrates its examples using the BridgePoint tool.&lt;/p&gt;
&lt;p&gt;The software tools I have found are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mentor.com/products/sm/uml_suite/&#34;&gt;BridgePoint tool&lt;/a&gt; suite from Project Technology.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kc.com/&#34;&gt;iUML Modeller and Simulator&lt;/a&gt; from Kennedy Carter&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ilogix.com/products/rhapsody/developer.cfm&#34;&gt;Rhapsody&lt;/a&gt; by IBM (formerly by ILogix Telelogic)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The great thing about some of these tools is that you can in some cases actually watch your UML &lt;em&gt;execute&lt;/em&gt; -they call it &amp;ldquo;executable UML-based application development&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m about to run the latest trials of these products.  I&amp;rsquo;d be interested to see how they handle sequence diagrams, since sequence diagrams are not syntactically expressive enough to precisely model for loops and if statements to a practical, executable level.  In UML you can use OCL (object constraint language) and a few UML indicators to indicate looping etc. but to cover all the coding possibilities you need more.&lt;/p&gt;
&lt;h3 id=&#34;simpler-approaches&#34;&gt;Simpler Approaches&lt;/h3&gt;
&lt;p&gt;Executable UML is currently not for the faint of heart - its pretty complicated stuff but I hope that will change.  For a simplified programming environment check out &lt;a href=&#34;https://scratch.mit.edu/&#34;&gt;Scratch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdm.link/app/uploads/2018/01/Roland_GO-KEYS_ScratchX_Extension.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Scratch - programming for students&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With Scratch you can drag and drop your coding fragments, no typing.  Its truly amazing and whicls tit caters to kids, I really wish they would expose an object oriented, serious version.  In the current version you can define objects and broadcast and respond to messages, so its no slouch in the OO stakes, however you need to be able to define classes and instantiate them - at the moment you cannot instantiate arbitrary &amp;lsquo;sprites&amp;rsquo; easily.&lt;/p&gt;
&lt;p&gt;Apple&amp;rsquo;s &lt;a href=&#34;https://support.apple.com/en-au/guide/automator/welcome/mac&#34;&gt;automator&lt;/a&gt; is a visual programming system for intra-application workflow.  It comes bundled with all Mac&amp;rsquo;s, though in order to automate MS Office you need to buy the business version not the home edition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_11321233034707appleautomatorworkflow.gif&#34; alt=&#34;11321233034707appleautomatorworkflow.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Apple&amp;rsquo;s Automator - for workflow&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-wiring-paradigm&#34;&gt;The Wiring Paradigm&lt;/h2&gt;
&lt;p&gt;Another interesting system is Synopsis which lets you wire together your entire program without writing code.  You can drag and drop if statements and plus everything together.  You can group components and subsume them into a sub component - which reduces clutter and helps organise your work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.codemorphis.com/articles/tip1/sample_event_prog.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Synopsis application development environment - no text coding!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Trying it out I found it fascinating, though it sorely needs the more sophisticated thumbnail bread trail that SynthMaker (see below) has.  The wires are auto routed (thankfully) but things get pretty messy quickly.  I found that there was not enough information visible on the components themselves to figure out what was going on - you keep having to hover over components or double clicking on them to investigate the deeper logic.  Finally it gets quite tiresome doing if-then logic using wires.  I suspect that a touch of the Scratch metaphor (see above) would be better for those sorts of tasks, within a larger system of wiring.  A mixed metaphor approach?  Anyway, a brave effort.&lt;/p&gt;
&lt;p&gt;Another similar effort along the same lines (plug together syntax with wiring) is &lt;a href=&#34;http://www.scripps.edu/~stoffler/proj/ViPEr/viper.html&#34;&gt;ViPEr&lt;/a&gt;: a visual programming environment for Python, which &amp;ldquo;allows non-programmers to interactively build networks describing novel combinations of computational methods, and yielding new visualizations of their data without actually writing code&amp;rdquo;.  It seems to be part of something called MGLTools now - here is a screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_40531234827676viper1.png&#34; alt=&#34;40531234827676viper1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ViPEr - visual programming for visualisation research.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The music software industry (synthesizer plugins, audo processing, music making) is light years ahead when it comes to visual interfaces.  And in terms of programming visually, &lt;a href=&#34;http://synthmaker.co.uk/&#34;&gt;SynthMaker&lt;/a&gt; is state of the art, especially with regards to making the wiring more friendly and usable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_42141233034874synthmakers2.png&#34; alt=&#34;42141233034874synthmakers2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SynthEdit- synthesizer maker&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SynthMaker allows you to program without writing code, linking together components. Interstingly you can drill inside components - worlds within worlds, and a &amp;ldquo;breadcrumb&amp;rdquo; screenshot panel at the top of the interface helps to give you a sense of where you have been and where you are now.  Clicking on a screenshot takes you back to the component/world.  This product is not just theoretical or academic - people make real synthesisers with this tool and even sell them commercially.&lt;/p&gt;
&lt;h2 id=&#34;build-your-own-visual-language&#34;&gt;Build your own Visual Language&lt;/h2&gt;
&lt;p&gt;An interesting effort to build a compiler &amp;ldquo;compiler&amp;rdquo; for visual languages is &lt;a href=&#34;http://www.cs.ioc.ee/cocovila/&#34;&gt;CoCoViLa&lt;/a&gt;.  Here you can draw shapes on a wrokspace to define the elements of your visual language.  You define ports for how these elements connect to each other using wires.  You can add java code to define what actually gets done when your shapes are connected to each other.  For example you could define an &amp;ldquo;ADD&amp;rdquo; shape with two inputs and one output and then feed a pair of numbers into it to get an output.  Connecting the output into the input of another shape would similarly chain on extra computation steps.  The beauty here is that you can define your own shapes and logic.  This is a phd project but hopefully will grow into something bigger and better, like an open source &lt;a href=&#34;http://www.metacase.com/&#34;&gt;MetaCase&lt;/a&gt;.  Here is an example of one of the &amp;ldquo;domain languages&amp;rdquo; that comes as an example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.cs.ioc.ee/cocovila/images/dif.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;CoCoViLa - define your own shapes and how they join together.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;debuggers-as-visualisers&#34;&gt;Debuggers as visualisers&lt;/h2&gt;
&lt;p&gt;Of course debuggers are the most obvious tools we have today for watching software execute.  We can watch variables and see the current execution point etc.&lt;/p&gt;
&lt;p&gt;There is a &lt;a href=&#34;http://www.compuware.com/products/numega/dps/java/jc.htm&#34;&gt;java visualisation debugger&lt;/a&gt; that is amazing when watching multiple threads.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.python.org/windows/pythonwin/guienvironment.html&#34;&gt;python for windows&lt;/a&gt; debugger is pretty amazing too.  You can drill inside namespaces, objects and classes ad-infinitum. Even methods are objects, which have properties.  Its not animation but its an interesting hierarchical visualisation of computational space and name space. P.S. What sort of interesting &amp;ldquo;spaces&amp;rdquo; are there in software?   The &lt;a href=&#34;http://www.amazon.com/exec/obidos/ASIN/076453114X/qid=998548289/sr=2-1/ref=aps_sr_b_1_1/102-0823202-5511330&#34;&gt;Jbuilder 2 Bible&lt;/a&gt; by Armstrong has some fantastic descriptions of how software and objects operate and interact.&lt;/p&gt;
&lt;h3 id=&#34;visualisations-using-gui-components&#34;&gt;Visualisations using gui components&lt;/h3&gt;
&lt;p&gt;In my old &lt;a href=&#34;http://www.asymetrix.com.au/&#34;&gt;Multimedia Toolbook&lt;/a&gt; programming days, if I was prototyping an application and I needed a datastructure to hold a list of strings, and if that data was something I might want to watch change during program execution then I would use a visual GUI component to hold that data.  This way I could always &amp;lsquo;see the data&amp;rsquo; and watch it change. After development I simple made the GUI elements (that would make no sense to the user) invisible but still operational.&lt;/p&gt;
&lt;p&gt;Normally a programmer would choose a non visual datastructure, which would of course be many times more efficient than storing the data in a GUI component. It is also considered bad practice to couple your &amp;lsquo;model&amp;rsquo; with GUI.  However for prototyping, the advantages are instant and often beautiful visualisations, since you can also change the fonts, colors and placement of such GUI elements to produce pleasing visualisation layouts.&lt;/p&gt;
&lt;p&gt;Note: this technique of using gui components as data structures is just a thought provoking idea of how to achieve visualisation of program innards and program behaviour.   I am not advocating that you build your serious programs in this way.&lt;/p&gt;
&lt;h3 id=&#34;static-representaion-of-wiring&#34;&gt;Static representaion of &amp;ldquo;wiring&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;I always liked the idea of &lt;a href=&#34;http://en.wikipedia.org/wiki/IBM_VisualAge&#34;&gt;Visual Age&lt;/a&gt; for Java technology.  You draw links between components, both visual and non visual.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://web.archive.org/web/20101203121657if_/http://www.javaworld.com/javaworld/jw-01-2000/images/jw-01-beans3.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Visual Age for Java - radical ideas, but now discontinued.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;UML lets you visualise classes etc. but doesn&amp;rsquo;t cover this sort of &amp;lsquo;real world&amp;rsquo; representation of the wiring between GUI components on a form and objects in your model/application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_vaTutorialWirePic.gif&#34; alt=&#34;vaTutorialWirePic.jpg (11334 bytes)&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Visual Age style programming&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure why Visual Age was discontinued in favour of the more traditional Eclipse tool.  Perhaps in use it was too cumbersome, or perhaps the particular implementation too complex?  Or is the whole idea of visual programming too radical for popular acceptance?&lt;/p&gt;
&lt;p&gt;Another slightly radical tool for representing hitherto &amp;lsquo;hidden&amp;rsquo; and unvisualised information visually is the &lt;a href=&#34;https://www.embarcadero.com/products/delphi&#34;&gt;Delphi 6&lt;/a&gt; data diagram and form diagrams.  Both data diagrams and form designer have an extra tab, which lets you view your components schematically and see the wiring between them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_BorlandADO_Image72.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Delphi - form diagram - shows the connections between visual components.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_BorlandADO_Image60.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Delphi - data diagram - shows the connections between database and visual components.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note that Delphi (and most IDE&amp;rsquo;s) has always let you &amp;ldquo;wire&amp;rdquo; components together by setting a property on a component, with appropriate hinting in drop down combos - you select an object from a combo box in order to make the wiring (ie. set the property) - the combobox for each property lists all the valid components on the enclosing form that the property could possibly point / be wired to. To make these wiring connections with visual lines rather than combo boxes I guess is just another metaphor.&lt;/p&gt;
&lt;h3 id=&#34;software-visualisation&#34;&gt;Software Visualisation&lt;/h3&gt;
&lt;p&gt;There seems to be some serious work being done in this field. Check out &lt;a href=&#34;http://www.atug.com/andypatterns/www.ftp.cl.cam.ac.uk/ftp/papers/reports/TR511-camg100-software-visualization-in-prolog.pdf&#34;&gt;Software Visualization in Prolog&lt;/a&gt; by Calum A. McK. Grant (as a Dissertation submitted for the degree of Doctor of Philosophy) which has astonishing pictures of software visualisation tools and visual programming systems e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_egg.ht1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_egg.ht2.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The quicksort algorithm written in ProGraph.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Also check out  Vmax  &lt;a href=&#34;http://www.cl.cam.ac.uk/Research/Rainbow/vmax/sshot.html&#34;&gt;http://www.cl.cam.ac.uk/Research/Rainbow/vmax/sshot.html&lt;/a&gt; &lt;br&gt;
Vmax is a programmer&amp;rsquo;s text editor combined with a graphical browsing window for powerful visualization of source code and run-time behaviour e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_egg.ht3.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another interesting tool I recently found was &lt;a href=&#34;http://cs.joensuu.fi/jeliot/index.php&#34;&gt;Jeliot 3&lt;/a&gt; which plays an animation of your java source code executing.  Its quite amazing, though there are limitations on what you can feed it (all classes must be in the same source file etc.).  Here is a screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_54961233276533jeliot.png&#34; alt=&#34;54961233276533jeliot.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Jeliot 3: This was a screenshot I took during the animated playback of some java code&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;code-bubbles-and-spatial-development-environments&#34;&gt;Code Bubbles and Spatial Development Environments&lt;/h2&gt;
&lt;p&gt;As of 2010 you&amp;rsquo;d think we had come a long way in terms of the visualising of software.  And I think we have.  I&amp;rsquo;ve just learned about &lt;a href=&#34;http://cs.brown.edu/~spr/codebubbles/&#34;&gt;Code Bubbles&lt;/a&gt;, a way of exploring code which displays relevant methods (of source code) in coloured bubbles, which you can glue together with other bubbles, to form islands of code that is related.  Lines show what is expanded from what.  Search functions let you fill bubbles with search results.  Watching the &lt;a href=&#34;https://www.youtube.com/watch?v=PsPX0nElJ0k&#34;&gt;video&lt;/a&gt; is the best way to get the idea. Old paper &lt;a href=&#34;https://web.archive.org/web/20101211162913/http://www.cs.brown.edu/people/acb/codebubbles_site.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_CodeBubbles1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Code Bubbles Java IDE and Explorer&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can make memo notes, edit code, add icons (like the bug symbol).  You can zoom out.  Even more amazing, you can run debug sessions and create bubbles of methods as you execute code - so that you can see the trail of execution.  A bubble can contain variables - or the state of the program at that point.  All this is persisted in your bubbles diagram, for comparison purposes or later reference.&lt;/p&gt;
&lt;p&gt;Lastly, you have a huge workspace to play with.  Notice the bar along the top of the screen in the following screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_CodeBubbles2B.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Code Bubbles Java IDE and Explorer&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The bar along the top is a high level minimap running horizontally.  Clicking on this minimap area scrolls the main workspace to show those bubbles.  Ableton Live and many DAW (Digital Audio Workstation) apps have such horizontal minimaps.  It also reminds me a little of SynthMaker (see above, near the start of this article) where you get thumbnail representations of a more complex workspace.  What is interesting with Code Bubbles is that you can drag out the minimap area to mark a region, and label it.&lt;/p&gt;
&lt;p&gt;Code Bubbles seems to visualise what goes on in my mind when I code - I deal with a collection of related code and code fragments - or a path of execution through specific code fragments / methods.  Code Bubbles respects what is going on in my mind.  Instead of bookmarking, switching tabs, scrolling constantly - Code Bubbles chunks together all related code fragments into the one place.  This is truly a breakthrough and I can&amp;rsquo;t wait to try out the beta.&lt;/p&gt;
&lt;p&gt;Another related tool comes from Microsoft Research, its called &lt;a href=&#34;http://blogs.msdn.com/kaelr/&#34;&gt;Code Canvas&lt;/a&gt; which is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;an experimental research platform for building a spatial development environment. It lets us explore design alternatives when dealing with source code on an infinitely scalable two-dimensional surface.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically you get a high level view of the files in a project and as you zoom in you start seeing class and method names, and you can keep zooming until you see actual code - which you can edit &lt;em&gt;in situ&lt;/em&gt;.  Relationships like inheritance and references (e.g. who is calling a particular method) are indicated with appropriate lines.  Its a nice experiment.  It doesn&amp;rsquo;t chunk the information like Code Bubbles does, but does provide infinite zooming - from super high level where you even see apps and packages right down to code level.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/visualising_software_code_canvas_menagerie_3.png&#34; alt=&#34;&#34;&gt;
&lt;em&gt;Code Canvas, from Microsoft Research&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Ideally I would like to see approaches like Executable UML simplified down and incorporate the simple coding ideas of Scratch, albiet taken to a serious object oriented level (Scratch is really for kids at the moment).  Design Pattern support would also be woven in - e.g. Netbeans 6 has a visual way of creating design patterns - see my Feb 2009 &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=82&#34; title=&#34;UML and Design Pattern Support in Netbeans 6.5&#34;&gt;blog post&lt;/a&gt; on this.  The visual form designing capabilities of Visual Age (now defunct, unfortunately) and Delphi form diagrams would complete are new lego was of building software.  Of course &lt;a href=&#34;http://en.wikipedia.org/wiki/Case_tools&#34;&gt;case tools&lt;/a&gt; have always been around and to some extent people have become a bit cynical about them over the decades as no breakthrough application has ever appeared.  We should still keep trying though as I can see progress on many fronts and can see all the wonderful pieces of the puzzle - they just need to be unified into a single compelling open source product. &lt;/p&gt;
&lt;h2 id=&#34;my-personal-vision&#34;&gt;My personal vision&lt;/h2&gt;
&lt;p&gt;My own vision is of a UML tool which doesn&amp;rsquo;t adhere strictly to UML in its committe born detail but takes a few risks (e.g. the way Visual Studio UML tool does) in order to innovate.  You type code into the UML tool itself, without opening a window - its all right there on the workspace.  Enterprise Architect displays code inside UML diagrams, so you can get a taste of how this might look. The potential clutter of code and UML in the one diagram would be alleviated by collapsable regions so that with all methods collapsed, all you see is a regular UML diagram with just methods listed.&lt;/p&gt;
&lt;p&gt;And when I say type, I mean use Scratch type drag and drop to assemble code.  You apply design patterns like in Netbeans and IBM Rational, and you can specify design pattern roles not only to the level of granularity of classes and methods but also to the level of code &lt;em&gt;lines&lt;/em&gt; - that&amp;rsquo;s why its important to model and reify &lt;em&gt;code&lt;/em&gt; lines into objects, so that they are more easily referred to by &amp;ldquo;active&amp;rdquo; design patterns (like in ModelMaker). &lt;/p&gt;
&lt;p&gt;The design patterns themselves would operate at the level of classes, as is normal.  There would also be dozens of language idiom patterns to assist with coding - e.g. iterating through a list is a pattern.  Lets treat language idiom patterns the same way as we do design patterns at a class level - all in the same interface.  Both class design and language coding becomes the same thing - pattern based lego.&lt;/p&gt;
&lt;p&gt;You should be able to easily group UML objects into components which are like symbols in Flash.  You can then define the connection types and plug them together.  If you can&amp;rsquo;t plug them together directly then you might be able to drop in various adapters to help.  We might be using protocols similar to the way genes and enzymes talk to each other. Speaking of grouping, you should be able to group components and subsume them into sub modules, hiding away all the detail.  Then you double click to drill into that module - leaving a SynthMaker style breadscrumb of screenshots to help tell you where you are and where you have come from, and help you get back (just click on a relevant screenshot).&lt;/p&gt;
&lt;p&gt;Method calls would be made using messages.  Messages are a more powerful metaphor for talking between objects - you can send messages to specific objects like a normal method call but also broadcasting messages broadly - there are are even books on messaging patterns (see patterns of enterprise architecture). Relationships would be modelled using an ORM style Relationship Manager so that you just specify what sort of relationships you want between two classes and its done.  Furthermore, you can leverage SQL or LINQ style queries without having to write custom looping code etc.&lt;/p&gt;
&lt;p&gt;There should be an integrated GUI builder that caters to various styles of application: web, form based with controls and menus, workspace based with draggable widgets and sprite based for game type approaches.  A MVC framework would be built in so that you know where to put all your code and so that a proper separation between model and presentation is achieved.  No more guessing - its all defined for you.&lt;/p&gt;
&lt;p&gt;How can this sort of vision compete against the well funded and expensive MDA and Executable UML tools industry?  I don&amp;rsquo;t know - my feeling is that MDA tools are stuck in a bit of a rut and aren&amp;rsquo;t taking advantage of more radical approaches that I have been talking about here.  I have only scratched the surface and there is lots of detail to be worked out, I know.  Its fun speculating about it anyway. I even have some screen designs if you wish to &lt;a href=&#34;http://www.andypatterns.com/index.php?cID=34&#34; title=&#34;Contact&#34;&gt;contact me&lt;/a&gt; about them!&lt;/p&gt;
&lt;h3 id=&#34;appendix-links-to-various-mda-tools&#34;&gt;Appendix: Links to various MDA tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.software-pointers.com/en-mda-tools.html&#34;&gt;http://www.software-pointers.com/en-mda-tools.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.modelbased.net/mda_tools.html&#34;&gt;http://www.modelbased.net/mda_tools.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dr Dobbs &lt;a href=&#34;http://www.ddj.com/architect/184415500&#34;&gt;MDA tools list and commentary&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choosing MDA tools - &lt;a href=&#34;http://www.ibm.com/developerworks/architecture/library/wi-arch18.html&#34;&gt;IBM article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Posted by J. Alkub on Jan 18th, 2009&lt;/strong&gt;&lt;br&gt;
Debuggers are dynamic, automated ways of producing model-view-controller visualisations of your data, except they attach to ANY software application and reveal it, visually&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Posted by Mike Davis on Feb 9th, 2009&lt;/strong&gt;&lt;br&gt;
Have you looked at ECO IV and V from CapableObjects? (&lt;a href=&#34;https://www.capableobjects.com&#34;&gt;www.capableobjects.com&lt;/a&gt;). Is is a UML modeler which uses an extension to OCL for triggered actions and state diagrams for object state models to generate syncronized C# and VB.NET (version V) only.&lt;/p&gt;
&lt;p&gt;It really only builds the business layer and the data layer but integrates them quite seamlessly so that the developer can concentrate on the UI and Business Model alone&amp;hellip;&lt;/p&gt;
&lt;p&gt;mike&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Posted by AndrewBoldman on Sep 22nd, 2009&lt;/strong&gt;&lt;br&gt;
Hi, good post. I have been wondering about this issue,so thanks for posting.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Posted by John Smythe on Sep 22nd, 2009&lt;/strong&gt;&lt;br&gt;
Check out xdepend - visualises dependencies in java programs&lt;br&gt;
&lt;a href=&#34;http://xdepend.com/&#34;&gt;http://xdepend.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XDepend lets you extract, visualize, seek and control the structure of your applications and frameworks. XDepend provides complementary and interactive views on the same information. A Tree-Map view helps you easily identify the big one from the small one. The dependency matrix, the graph view and the detailed view help you gain insight in your code base.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Posted by K M Nur on Feb 11th, 2010&lt;/strong&gt;&lt;br&gt;
I am doing my masters thesis on software visualization / software comprehension and so far considered, bluej, jeliot3, jgrasp, javavis, jive, ville. I am looking for more tools for software visualization. Please inform me if you have any more ideas.&lt;/p&gt;
&lt;p&gt;Regards,&lt;br&gt;
KMN&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Posted by Norm on Dec 29th, 2014&lt;/strong&gt;&lt;br&gt;
I&amp;rsquo;ll try to put this to good use immediately.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Extract Composite Refactoring</title>
      <link>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</link>
      <pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</guid>
      <description>
        
        
        &lt;h1 id=&#34;extract-composite---refactoring-to-a-pattern&#34;&gt;Extract Composite - Refactoring to a Pattern&lt;/h1&gt;
&lt;p&gt;Refactoring existing code so that it improves and conforms to a design pattern can be a good thing.  Your code will be easier to understand since it follows a known &amp;lsquo;pattern&amp;rsquo;.  Of course you have to need the change - your code will probably be uncomfortable to read and be crying out for clarification.&lt;/p&gt;
&lt;p&gt;This refactoring is about implementing a one to many relationship in your code more clearly by refactoring to the Composite design pattern.&lt;/p&gt;
&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;
&lt;iframe style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;&#34; src=&#34;//www.slideshare.net/slideshow/embed_code/key/CZeskH10aSCnUt&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;595&#34; height=&#34;485&#34;&gt; &lt;/iframe&gt;
&lt;h2 id=&#34;uml---before-and-after&#34;&gt;UML - Before and After&lt;/h2&gt;
&lt;p&gt;Here is the situation before and after the refactoring, in hand drawn UML.&lt;/p&gt;
&lt;h3 id=&#34;uml-before&#34;&gt;UML Before&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/extract-CompositeBefore.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;problem&lt;/strong&gt; with the &amp;ldquo;before&amp;rdquo; situation is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The child looping logic is duplicated twice - once in the &lt;code&gt;FormTag&lt;/code&gt; class and again in the &lt;code&gt;LinkTag&lt;/code&gt; class.  And we all know that code duplication is evil and hard to maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By refactoring, we remove the code duplication to a common base class.&lt;/p&gt;
&lt;h3 id=&#34;uml-after&#34;&gt;UML After&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/extract-CompositeAfter.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use the &amp;ldquo;extract composite&amp;rdquo; refactoring to put the common looping behaviour in the display() method of a common composite class.&lt;/li&gt;
&lt;li&gt;We make the existing classes subclasses of this new composite class.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code---before-and-after&#34;&gt;Code - Before and After&lt;/h2&gt;
&lt;p&gt;Here is a python example of the above refactoring.  Note that the display() method is actually called toPlainTextString() in this example.&lt;/p&gt;
&lt;h3 id=&#34;code-before&#34;&gt;Code Before&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Before&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FormTag&lt;/span&gt;(Node):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;LinkTag&lt;/span&gt;(Node):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;linkData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;linkData:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; FormTag()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;allNodesVector&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; LinkTag()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;linkData &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; [Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;), Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;then-we-apply-the-following-steps&#34;&gt;Then we apply the following steps&amp;hellip;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create a Composite Class - compile&lt;/li&gt;
&lt;li&gt;Make each child container (a class in the hierarchy that contains duplicate child-handling code) a subclass of your composite - compile&lt;/li&gt;
&lt;li&gt;For each method with duplicated looping code
&lt;ul&gt;
&lt;li&gt;Move &amp;amp; rename the child reference field UP to the composite using &amp;ldquo;Pull Up Field&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Move the method UP to the composite using &amp;ldquo;Pull Up Method&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Pull up any relevant constructor code too.&lt;/li&gt;
&lt;li&gt;Check interfaces so that client code using the old composites still works.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;code-after&#34;&gt;Code After&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# After&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Node&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;object&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Composite&lt;/span&gt;(Node):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;toPlainTextString&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; node&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FormTag&lt;/span&gt;(Composite):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;LinkTag&lt;/span&gt;(Composite):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; FormTag()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; LinkTag()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; [Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;), Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;), Node(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; l&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;toPlainTextString()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;does-the-refactoring-break-anything&#34;&gt;Does the refactoring break anything?&lt;/h3&gt;
&lt;p&gt;A proper refactoring means you don&amp;rsquo;t break anything and everything behaves as before.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python before.py
abc  
xyz

python after.py
abc  
xyz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Confirmed - we get the same output in both cases. :-)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Blackboard Pattern</title>
      <link>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</link>
      <pubDate>Thu, 05 Aug 2004 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</guid>
      <description>
        
        
        &lt;h2 id=&#34;blackboard-architectural-pattern&#34;&gt;Blackboard Architectural Pattern&lt;/h2&gt;
&lt;p&gt;The Blackboard Architectural Pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialised sub-systems assemble their knowledge to build a possibly partial or approximate solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/blackboard-Blafig2.gif&#34; alt=&#34;blackboard pattern uml&#34;&gt;&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://web.archive.org/web/20100402123507/http://chat.carleton.ca:80/~narthorn/project/patterns/BlackboardPattern-display.html&#34;&gt;paper&lt;/a&gt; by D. Deugo, M. Weiss and E. Kendall.&lt;/p&gt;
&lt;h2 id=&#34;andys-presentation&#34;&gt;Andy&amp;rsquo;s Presentation&lt;/h2&gt;
&lt;iframe style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;&#34; src=&#34;//www.slideshare.net/slideshow/embed_code/key/zdTSlKGS97nz61&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;595&#34; height=&#34;485&#34;&gt; &lt;/iframe&gt;
&lt;p&gt;Blackboard Pattern Slides by &lt;a href=&#34;https://www.slideshare.net/tcab22&#34;&gt;Andy&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;example-code&#34;&gt;Example Code&lt;/h2&gt;
&lt;p&gt;This is a pattern that is difficult to do an example for because you would normally have to set up a large infrastructure of classes etc.  I refused to be put off and presented a simple blackboard pattern implementation in python, during my talk to the Melbourne Patterns Group.  Please forgive its limitations but it should at least give you an idea of what this pattern is about.&lt;/p&gt;
&lt;p&gt;Note that you can flick a switch in the code below and have a small GUI pop up in Swing via jython.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  Blackboard system
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  by Andy Bulka
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  Prepared for the Melbourne Patterns group - August 2004
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Welcome to my blackboard system&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Blackboard&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;experts &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AddExpert&lt;/span&gt;(self, expert):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;experts&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(expert)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Controller&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, blackboard):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; blackboard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# init blackboard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answerCorrectness&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Loop&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answerCorrectness&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            candidates &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; expert &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;experts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                eagerness &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; expert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CanContribute()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; eagerness:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    candidates&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append((eagerness,expert))  &lt;span style=&#34;color:#6272a4&#34;&gt;# append a tuple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            candidates&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sort()    &lt;span style=&#34;color:#6272a4&#34;&gt;# move winning tuple to the end of the list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            winningExpert &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; candidates[&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]  &lt;span style=&#34;color:#6272a4&#34;&gt;# -1 means the last item in list.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            winningExpert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;execAction()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Loop_OLD&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answerCorrectness&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; expert &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;experts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; expert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CanContribute():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    expert&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;execAction()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AbstractExpert&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, blackboard, outtext):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; blackboard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;outtext &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; outtext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CanContribute&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;not implemented&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execAction&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;not implemented&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SmartAss&lt;/span&gt;(AbstractExpert):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CanContribute&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execAction&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; random&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;outtext&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WiseMan&lt;/span&gt;(AbstractExpert):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CanContribute&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; random&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execAction&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;commonState[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;answerCorrectness&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;outtext&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WANT_JAVA_GUI &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; WANT_JAVA_GUI:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; javax.swing &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; JFrame, JLabel, JButton, JTextField
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JHutton&lt;/span&gt;(JButton):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;GUI&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JFrame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Blackboard Jungle&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(JLabel(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Expert1&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JTextField(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(JLabel(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Expert2&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JTextField(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            button &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JHutton(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Think&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(button)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            button&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;actionPerformed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;onClick
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; java.awt &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; FlowLayout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;contentPane&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;layout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; FlowLayout()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pack()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;visible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            blackboard &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Blackboard()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddExpert( SmartAss(blackboard, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt1) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddExpert( WiseMan(blackboard, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;txt2) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Controller(blackboard)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onClick&lt;/span&gt;(self, event):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Loop()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gui &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; GUI()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;# Pure text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;DummyTextWidget&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;text &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    blackboard &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Blackboard()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddExpert( SmartAss(blackboard, DummyTextWidget()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    blackboard&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AddExpert( WiseMan(blackboard, DummyTextWidget()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Controller(blackboard)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; c&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Loop()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Welcome to my blackboard system
. . . . . . . . . . . . . . . . . . . * . * * * * * . * . * . * . . * * * . * . . * * . . * . . * . *
371
done
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;example---uml-layout&#34;&gt;Example - UML Layout&lt;/h2&gt;
&lt;p&gt;Another real world example of this pattern being used in is my
open source &lt;a href=&#34;http://www.pynsource.com&#34; title=&#34;Pynsource - UML tool for Python&#34;&gt;Python UML tool&lt;/a&gt; where I used this pattern to evaluate numerous attempts at laying out a UML diagram, scoring the result and then choosing the best layout.&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/abulka/pynsource/blob/master/src/layout/blackboard.py&#34;&gt;source code&lt;/a&gt; of that Python module on GitHub.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Null Object Pattern</title>
      <link>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</link>
      <pubDate>Fri, 04 Oct 2002 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</guid>
      <description>
        
        
        &lt;h2 id=&#34;null-object-design-pattern&#34;&gt;Null Object Design Pattern&lt;/h2&gt;
&lt;p&gt;Sometimes I make the joke that design patterns are all about getting rid of if-else statements from your code. The null object pattern is an example of a pattern that does just that - check out the code at the bottom for details.&lt;/p&gt;
&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;
&lt;p&gt;A Null Object provides a surrogate for another object that shares the same interface, but does nothing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This pattern was originally written up by Bobby Wolf, in Pattern Languages of Program Design 3.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;uml&#34;&gt;UML&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.andypatterns.com/files/27251232690646nullobjectUML.png&#34; alt=&#34;null objject uml&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Null Object Pattern&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;have-i-used-it&#34;&gt;Have I used it?&lt;/h2&gt;
&lt;p&gt;Yes, I have used this pattern a few times in my work.  You have to be a little bit careful about managing the swapping of null obect for the real thing.  If bits of your code are pointing to the null object then you can&amp;rsquo;t easily swap in the real thing.  Better to put the null object / real object behind a proxy so that nobody knows what you are doing!&lt;/p&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;iframe style=&#34;border: 1px solid #CCC; border-width: 1px; margin-bottom: 5px; max-width: 100%;&#34;
            src=&#34;//www.slideshare.net/slideshow/embed_code/key/rLP5FBttyUUc7B&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34;
            marginheight=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;668&#34; height=&#34;714&#34;&gt; &lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;Scroll down through the course pages above - or use the page next/previous buttons.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;//www.slideshare.net/tcab22/null-object-design-pattern-presentation&#34; title=&#34;Null Object Design Pattern&#34;&gt;Null Object Design Pattern&lt;/a&gt; chapter from &lt;a href=&#34;https://www.slideshare.net/tcab22&#34;&gt;Andy Bulka&amp;rsquo;s&lt;/a&gt; Design Patterns course book.&lt;/p&gt;
&lt;h2 id=&#34;example-code&#34;&gt;Example Code&lt;/h2&gt;
&lt;p&gt;Here is a Python example.  The class named &lt;code&gt;API&lt;/code&gt; is a real class with real functionality in it (note the name of this class could be anything, and not have anything to do with API&amp;rsquo;s).&lt;/p&gt;
&lt;p&gt;We decide that we want to &lt;em&gt;optionally&lt;/em&gt; log calls to our API class using a &lt;code&gt;Logger&lt;/code&gt; class. So we modify our API class to call out to the &lt;code&gt;Logger&lt;/code&gt; class.&lt;/p&gt;
&lt;h3 id=&#34;without-null-object&#34;&gt;Without Null Object&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; asctime, localtime
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AbstractObject&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;# pretend python has abstract classes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RealLogging&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Logged at&amp;#39;&lt;/span&gt;, asctime(localtime()), msg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Proxy / wrapper around either null or real logger. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Logger&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RealLogging()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;On&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RealLogging()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Off&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Logger()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Usage: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;API&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;doA&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Am calling A&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A done.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;doB&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Am calling B&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;B done.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; API()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doA()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doB()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Off()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doA()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doB()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;with-null-object&#34;&gt;With Null Object&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Null Object Pattern &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AbstractLogging&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg): &lt;span style=&#34;color:#ff79c6&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; asctime, localtime
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RealLogging&lt;/span&gt;(AbstractObject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Logged at&amp;#39;&lt;/span&gt;, asctime(localtime()), msg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NullLogging&lt;/span&gt;(AbstractObject):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Proxy / wrapper around either null or real logger. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Logger&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;On()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;(self, msg):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;On&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RealLogging()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Off&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; NullLogging()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logger &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Logger()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Usage: &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;API&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;doA&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Am calling A&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A done.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;doB&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Am calling B&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;B done.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; API()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doA()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doB()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Logger&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Off()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doA()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;doB()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;output&#34;&gt;Output&lt;/h3&gt;
&lt;p&gt;Without logging:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A done.
B done.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With logging:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Logged at Fri Jan 23 17:28:01 2009 Am calling A
A done.
Logged at Fri Jan 23 17:28:01 2009 Am calling B
B done.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that in the null object implementation, there are no &amp;ldquo;if statements&amp;rdquo; in the client code (API class), which means we turn on logging by injecting in a different instance of &lt;code&gt;Logger&lt;/code&gt; rather than checking a flag. Arguably this is more flexible and cleaner. You even have more options to swap (or inject) different kind of &lt;code&gt;Logger&lt;/code&gt; classes with this pattern.&lt;/p&gt;
&lt;p&gt;The Null Object pattern is about switching in a &lt;code&gt;Logger&lt;/code&gt; class that does nothing.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
