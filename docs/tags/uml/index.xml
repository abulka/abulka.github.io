<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UML on Andy Bulka</title>
    <link>https://abulka.github.io/tags/uml/</link>
    <description>Recent content in UML on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Feb 2025 22:30:02 +1100</lastBuildDate>
    <atom:link href="https://abulka.github.io/tags/uml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Plain Text Diagrams</title>
      <link>https://abulka.github.io/blog/2025/01/29/plain-text-diagrams/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2025/01/29/plain-text-diagrams/</guid>
      <description>Plain Text Diagrams are a way of representing diagrams of code structure and behaviour in a plain text format.&#xA;Plain Text &amp;lsquo;diagrams&amp;rsquo; - aren&amp;rsquo;t really diagrams but are nested, indented text files that can be rapidly parsed by the human eye to gain a high level understanding of a software system.&#xA;I call them text &amp;lsquo;diagrams&amp;rsquo; because they are a way of representing the structure and behaviour of a codebase in a way that is similar to UML diagrams, but implemented as text, using indentation and text arrows -&amp;gt; instead of boxes and arrows and graphics.</description>
    </item>
    <item>
      <title>GitUML</title>
      <link>https://abulka.github.io/projects/websites/gituml/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/gituml/</guid>
      <description>UML visualisation for Git repositories (website app).&#xA;Understand code quickly: Automatically generate UML class diagrams from source code residing in git repositories. Diagrams automatically update when you push code using git.&#xA;Visit GitUML now, create a free account and begin creating UML diagrams and documentation.</description>
    </item>
    <item>
      <title>Pynsource</title>
      <link>https://abulka.github.io/projects/apps/pynsource/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/apps/pynsource/</guid>
      <description>Visit pynsource.com.&#xA;Pynsource is a UML tool for Python a desktop App for Mac, Window and Linux.&#xA;Pynsource imports Python code and features zoom, Ascii and PlantUML views and Auto Layout&#xA;Community Edition is free, fully functional and open source - check out the Pynsource GitHub repository.&#xA;Buy the Pro Edition for $20 to unlock the zoom feature and other pro features.&#xA;Visit the Pynsource Home Page</description>
    </item>
    <item>
      <title>Literate Code Mapping</title>
      <link>https://abulka.github.io/projects/big-ideas/lcodemaps/</link>
      <pubDate>Mon, 23 Nov 2020 12:43:14 +1100</pubDate>
      <guid>https://abulka.github.io/projects/big-ideas/lcodemaps/</guid>
      <description>Diagramming Methodology Specification&#xA;Literate Code Maps are diagrams which help programmers understand the structure and behaviour of source code.&#xA;Example Code Map diagrams differ from UML diagrams in that they focus on real source code fragments and lots of rich-text formatted story-telling narrative. They combine class and sequence diagrams into the same diagram, offering step by step numbering to follow the behaviour of a use case story.&#xA;The 5 laws of literate code mapping Boxes represent any scope or namespace - be creative Show structure and behaviour in the same diagram Code compartments in boxes contain code fragments and richly formatted narrative Lines representing function calls between boxes are numbered to tell a story Cross reference numbers can appear anywhere to associate ideas Think of literate code maps like UML class diagrams where the classes are now boxes which can represent more things, and lines represent function calls as well as structure.</description>
    </item>
    <item>
      <title>UML Layout</title>
      <link>https://abulka.github.io/blog/2011/04/06/uml-layout/</link>
      <pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2011/04/06/uml-layout/</guid>
      <description>Developing a Layout Algorithm for UML diagrams Intro Presented to the Melbourne Patterns Group, Wednesday 6th April 2011 6:30 PM&#xA;The Problem: Untangling UML Diagrams Terms Nodes – these are the shapes/rectangles Edges – these are the lines connecting the shapes Background My UML tool is written in Python Existing layout libraries for e.g. python PyGraphviz has no windows port so I wrote my own Layout is reasonably hard to implement – academic papers are very complex and deal in a lot of math DIRTY SECRET OF ACADEMIA - Most Layout algorithms only deal with ‘points’ and don’t take into account real width and height Thus for any real world use (unless dealing with network and particle visualisation where each node is the same size/shape), it seemed to me that one needs to run an overlap removal algorithm after the layout to remove shape overlaps.</description>
    </item>
    <item>
      <title>Netbeans Uml</title>
      <link>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</link>
      <pubDate>Wed, 11 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/02/11/netbeans-uml/</guid>
      <description>Let&amp;rsquo;s take a look at the UML and design pattern support in Netbeans and investigate Netbean&amp;rsquo;s cool ability to build &amp;ldquo;custom&amp;rdquo; design patterns - visually.&#xA;Introduction UML and Design Pattern Support in Netbeans 6.5&#xA;Netbeans is an opensource IDE from Sun and importantly Netbeans offers a wonderful GUI form designer plus UML facilities, which Eclipse doesn&amp;rsquo;t come bundled with out of the box.&#xA;Unfortunately the UML support described in this article has been removed from later versions of Netbeans.</description>
    </item>
    <item>
      <title>Visualising Software</title>
      <link>https://abulka.github.io/blog/2009/01/22/visualising-software/</link>
      <pubDate>Thu, 22 Jan 2009 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2009/01/22/visualising-software/</guid>
      <description>Ways of Visualising Software Designs&#xA;This blog article explores the novel ways of developing software more visually and in visualising software generally - that is without coding. It also explores ways of visualising software designs and of watching software execute. Visual Programming and Executable UML are the closest terms that describe this area.&#xA;Some of these projects have failed and others continue to thrive (e.g. Scratch). As of 2020 the new big thing in this area is low code and no-code.</description>
    </item>
    <item>
      <title>Extract Composite Refactoring</title>
      <link>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</link>
      <pubDate>Wed, 05 Mar 2008 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2008/03/05/extract-composite-refactoring/</guid>
      <description>Extract Composite - Refactoring to a Pattern Refactoring existing code so that it improves and conforms to a design pattern can be a good thing. Your code will be easier to understand since it follows a known &amp;lsquo;pattern&amp;rsquo;. Of course you have to need the change - your code will probably be uncomfortable to read and be crying out for clarification.&#xA;This refactoring is about implementing a one to many relationship in your code more clearly by refactoring to the Composite design pattern.</description>
    </item>
    <item>
      <title>Blackboard Pattern</title>
      <link>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</link>
      <pubDate>Thu, 05 Aug 2004 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2004/08/05/blackboard-pattern/</guid>
      <description>Blackboard Architectural Pattern The Blackboard Architectural Pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialised sub-systems assemble their knowledge to build a possibly partial or approximate solution.&#xA;See the paper by D. Deugo, M. Weiss and E. Kendall.&#xA;Andy&amp;rsquo;s Presentation Blackboard Pattern Slides by Andy&#xA;Example Code This is a pattern that is difficult to do an example for because you would normally have to set up a large infrastructure of classes etc.</description>
    </item>
    <item>
      <title>Null Object Pattern</title>
      <link>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</link>
      <pubDate>Fri, 04 Oct 2002 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2002/10/04/null-object-pattern/</guid>
      <description>Null Object Design Pattern Sometimes I make the joke that design patterns are all about getting rid of if-else statements from your code. The null object pattern is an example of a pattern that does just that - check out the code at the bottom for details.&#xA;What is it? A Null Object provides a surrogate for another object that shares the same interface, but does nothing.&#xA;This pattern was originally written up by Bobby Wolf, in Pattern Languages of Program Design 3.</description>
    </item>
  </channel>
</rss>
