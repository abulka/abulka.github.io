<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Andy Bulka</title>
    <link>https://abulka.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on Andy Bulka</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Jan 2023 12:43:03 +1100</lastBuildDate>
    <atom:link href="https://abulka.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript RPN calculators</title>
      <link>https://abulka.github.io/projects/websites/rpn-calcs/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/rpn-calcs/</guid>
      <description>These RPN calculators are programmable in Javascript, thus taking the vintage HP calculator paradigm and adding a modern language.&#xA;Rpn-calc Here is the built in Javascript code editor.&#xA;Parameters to Javascript functions are taken off the RPN stack. Return values from Javascript functions are pushed onto the RPN stack.&#xA;https://atug.com/jsrpncalc-web/&#xA;Rpn-calc2 A completely new implementation, also programmable in Javascript. Define interactive UI buttons and sliders.&#xA;https://atug.com/jsrpncalc2/</description>
    </item>
    <item>
      <title>Toolback</title>
      <link>https://abulka.github.io/projects/websites/toolback/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/projects/websites/toolback/</guid>
      <description>Toolback - Low Code App Builder.&#xA;An online programming environment, with low code features. Drag and drop a UI and add scripts directly to components. Generate websites and desktop apps (electron based) with a click of a button.&#xA;Toolback Toolback is the drag and drop UI builder and online, Low Code, app building IDE.&#xA;Preview your app with a key press.&#xA;Export to a website or electron app - one click!</description>
    </item>
    <item>
      <title>HexMVC</title>
      <link>https://abulka.github.io/patterns/hexmvc/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/hexmvc/</guid>
      <description>Andy Bulka,&#xA;March 2012&#xA;A new, architectural pattern for building multi-platform, scalable applications based on ideas from the Hexagonal Architecture pattern + Model View Controller (MVC).&#xA;TLDR: Write the application layer but don&amp;rsquo;t import or use any libraries directly. Wrap all &amp;ldquo;library&amp;rdquo; calls with Adapter objects, so that you can switch to other libraries easily.&#xA;TLDR: &amp;ldquo;Libraries&amp;rdquo; can amazingly, include the application data Model itself, Database and persistence layers, the entire GUI and all calls to server APIs.</description>
    </item>
    <item>
      <title>GUI Showdown</title>
      <link>https://abulka.github.io/blog/2022/02/11/gui-showdown/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2022/02/11/gui-showdown/</guid>
      <description>Andy&amp;rsquo;s GUI Showdown - The same application, implemented in various ways - which is better, cleaner, more understandable etc?&#xA;Like the TodoMVC &amp;ldquo;Rosetta Stone&amp;rdquo; project, but uses a different example application, and includes Python as well as Javascript implementations.&#xA;This project was originally intended to see if an ECS (Entity Component System), which is commonly used in building games, could be used to implement a &amp;ldquo;normal&amp;rdquo; GUI application.&#xA;Five Javascript implementations: Live Demo of all Javascript implementations.</description>
    </item>
    <item>
      <title>TodoMVC implemented using a game architecture ‚Äî ECS</title>
      <link>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/</guid>
      <description>Building traditional GUIs with the Entity Component System.&#xA;Is the Entity Component System any good for building traditional GUIs?&#xA;It turns out that the answer is yes! Whilst ECS is most commonly used in building games, it can also be used for building a traditional web ‚Äúform‚Äù style application like TodoMVC. However you will need to radically rethink how models, their data and behaviour is organised.&#xA;This is arguably a refreshing, mind-blowing lesson in GUI programming!</description>
    </item>
    <item>
      <title>TodoMVC implemented using traditional OO, Controllers and Events</title>
      <link>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/</guid>
      <description>TodoMVC implemented in a classic Object Oriented way.&#xA;TodoMVC is a long standing web project showing how a ToDo app can be built in numerous frameworks.&#xA;The classic Javascript TodoMVC app implemented without a framework, using plain Object Oriented programming + a traditional MVC design pattern. Distinct, mediating Controller objects are the key to this implementation.&#xA;Running demo here.&#xA;See my full article on Medium here.&#xA;See also this GitHub repo by Marc Grabanski which shows us how to built TodoMVC in vanilla JS in 2022 (no classes are used in this version).</description>
    </item>
    <item>
      <title>MVC-App Architectural Pattern</title>
      <link>https://abulka.github.io/patterns/mvca-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/patterns/mvca-pattern/</guid>
      <description>Introduction This article describes the &amp;ldquo;MVC-App Architectural Pattern&amp;rdquo; which you can use to design your software applications, when you need to support a GUI. It is not a framework, it is a small set of principles which let you build sane, modular GUIs in any language, using any off the shelf UI components.&#xA;For the original, deprecated, MGM pattern which initially inspired this &amp;ldquo;MVC-App Pattern&amp;rdquo; pattern, see MGM pattern&#xA;TodoMVC-OO This is the classic Javascript TodoMVC app implemented without a framework üòÑ, simply using plain Object Oriented programming + a traditional MVC design pattern.</description>
    </item>
    <item>
      <title>Building a Python-Electron App</title>
      <link>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</guid>
      <description>Building a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps ‚Äî which I propose to outline here.&#xA;See full article on Medium here.</description>
    </item>
  </channel>
</rss>
