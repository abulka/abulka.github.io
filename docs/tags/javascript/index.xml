<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy Bulka – Javascript</title>
    <link>https://abulka.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on Andy Bulka</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 12 Feb 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://abulka.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Patterns: HexMVC</title>
      <link>https://abulka.github.io/patterns/hexmvc/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/patterns/hexmvc/</guid>
      <description>
        
        
        &lt;p&gt;Andy Bulka,&lt;br&gt;
March 2012&lt;/p&gt;
&lt;p&gt;A new, architectural pattern for building multi-platform, scalable applications based on ideas from the Hexagonal Architecture pattern + Model View Controller (MVC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; Write the application layer but don&amp;rsquo;t import or use any libraries directly.  Wrap all &amp;ldquo;library&amp;rdquo; calls with Adapter objects, so that you can switch to other libraries easily.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &amp;ldquo;Libraries&amp;rdquo; can amazingly, include the application data Model itself, Database and persistence layers, the entire GUI and all calls to server APIs. Plug and play everything with this architecture!&lt;/p&gt;
&lt;h1 id=&#34;patternsimageshexmvcimage16png&#34;&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image16.png&#34; alt=&#34;&#34;&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a draft article, written in 2012. It could do with some further editing, but I&amp;rsquo;ve never gotten around to it, so finally decided to publish it anyway, in 2022.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;HexMVC - This is my name for an architectural pattern that has arisen out of some long term research into PureMVC and ways to simplify it. Its also an attempt to fix some of the unsatisfactory aspects of traditional layered architectures by incorporating some core ideas out of the mysterious Hexagonal Architecture pattern.  The hexagonal structure allows us to put the model on a more equal footing with other layers - rather than always having the model ‘at the bottom’.  Its a rejection of a complex &amp;rsquo;event&amp;rsquo;-ing framework in favour of multicast delegation based on interfaces. It uses dependency injection to configure apps to use different libraries and frameworks, whilst keeping the core app the same.&lt;/p&gt;
&lt;p&gt;I will present a fully functional example code which can be configured to run under pure python or under .NET using a choice of different GUI libraries (wxpython or windows forms or wpf), different server libraries (bottle or .NET). Everything is switchable using config files. The persistence layer is also switchable and the servers implement REST APIs consistent with the services offered by the core App.&lt;/p&gt;
&lt;p&gt;Note that the example code needs no framework code whatsoever, thus could be considered an architectural pattern - an abstract idea that can be implemented in any language and used in any project.  The pattern lets you develop a core application and swap in &amp;amp; out alternate gui&amp;rsquo;s, persistence and services.  It prescribes how to add app functionality whilst keeping your design clean.&lt;/p&gt;
&lt;h2 id=&#34;example---python&#34;&gt;Example - Python&lt;/h2&gt;
&lt;p&gt;Here is a real configuration Python file which assembles, injects and launches my sample application. The application consists of a GUI, a Server, a model with application logic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; ModelOo &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Model
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; ModelOoAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; ModelOoAdapter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#from PersistenceOoPickle import Persistence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; PersistenceOoHomegrown &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Persistence
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; ServerBottleAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#from ServerMockAdapter import Server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; ViewWxAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; MyWxApp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; wx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; UtilRandomStdpythonAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; RandomIntFunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; UtilJsonStdpythonAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; JsonFromDictFunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; App &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; App
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create Model - Object Oriented instances in memory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model_oo &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Model()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;persistence &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Persistence()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ModelOoAdapter(model_oo, persistence)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create Server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;server &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Server(host&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, port&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8081&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create Gui&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wxapp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; MyWxApp(redirect&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gui &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; wxapp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;myframe  &lt;span style=&#34;color:#6272a4&#34;&gt;# gui mediator inherits from gui rather than wrapping it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Hook up Utility adapters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gui&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;random &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; RandomIntFunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;server&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;json_from_dict &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; JsonFromDictFunction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create Core Hexagon App and inject adapters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; App(model, server, gui)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wx&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CallAfter(app&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Boot)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Start Gui&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wxapp&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MainLoop() 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example---javascript&#34;&gt;Example - Javascript&lt;/h2&gt;
&lt;p&gt;Here is a Todo app implementation in Javascript &lt;a href=&#34;https://www.google.com/url?q=http://jsfiddle.net/tcab/mC5qA/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497537306&amp;amp;usg=AOvVaw2IyZvhDC0eV65oxs-1pTn-&#34;&gt;http://jsfiddle.net/tcab/mC5qA/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/javascript-impl-add.png&#34; alt=&#34;javascript-impl-add&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width: 15em&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;plusBtn&amp;#34;&lt;/span&gt;&amp;gt;  +  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;minusBtn&amp;#34;&lt;/span&gt;&amp;gt;  -  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;MODEL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ListModel &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (items) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; items;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListModel.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getItems &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [].concat(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addItem &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (item) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items.push(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    removeItemAt &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items[index];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items.splice(index, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maxindex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._items.length &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; maxindex) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.setSelectedIndex(maxindex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getSelectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setSelectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; index;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ListModelAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (model) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListModelAdapter.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getItems &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getItems();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addItem &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (item) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.addItem(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_THING_ADDED&amp;#39;&lt;/span&gt;, {item&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; item});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    removeItemAt &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.removeItemAt(index);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_CHANGED&amp;#39;&lt;/span&gt;, {item&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; item});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getSelectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setSelectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; previousIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._selectedIndex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.setSelectedIndex(index);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_SELECTION_CHANGED&amp;#39;&lt;/span&gt;, {previous&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; previousIndex});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;VIEW 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ListViewAdapter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (model) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListViewAdapter.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.rebuildList();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rebuildList &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;VIEW REBUILD with index at &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex());            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; list &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#list&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; items &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getItems();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; items) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            list.append($(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;option value=&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; items[key] &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;/option&amp;gt;&amp;#39;&lt;/span&gt;)); 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.updateSelected();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    updateSelected &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;VIEW updateSelected &amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#list&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onAdd &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_ADD_ITEM&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onDelete &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_DELETE_ITEM&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onListSelectionChanged &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).trigger(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_SELECTION_CHANGED&amp;#39;&lt;/span&gt;, e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;CONTROLLER
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ListController &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (model) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ListController.prototype &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmdAddItem &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Add item:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (item)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.addItem(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmdDelItem &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; index &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;controller delItem &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; index);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (index &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.removeItemAt(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.getSelectedIndex());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cmdUpdateSelected &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CONTROLLER updateSelected &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; e.target.selectedIndex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._model.setSelectedIndex(e.target.selectedIndex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;Bootstrap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//var model = new ListModel([&amp;#39;aaa&amp;#39;, &amp;#39;bbb&amp;#39;, &amp;#39;ccc&amp;#39;, &amp;#39;ddddd&amp;#39;]);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ListModelAdapter(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ListModel([&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;bbb&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ddddd&amp;#39;&lt;/span&gt;]));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; view &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ListViewAdapter(model);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; controller &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ListController(model);  &lt;span style=&#34;color:#6272a4&#34;&gt;// can also pass in view if you need it.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                                               
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Private eventing between gui and gui adapter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#plusBtn&amp;#39;&lt;/span&gt;).click(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () { view.onAdd() });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#minusBtn&amp;#39;&lt;/span&gt;).click(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () { view.onDelete() });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#list&amp;#39;&lt;/span&gt;).change(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) { view.onListSelectionChanged(e); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// More abstract application eventing
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_ADD_ITEM&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e) { controller.cmdAddItem(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_DELETE_ITEM&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e) { controller.cmdDelItem(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;CMD_SELECTION_CHANGED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e, info) { controller.cmdUpdateSelected(info); });                                           
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_THING_ADDED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e, info) { view.rebuildList(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_CHANGED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e, info) { view.rebuildList(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).bind(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;MODEL_SELECTION_CHANGED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(e, info) { view.updateSelected(); });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    view.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;There are more source code implementations in &lt;a href=&#34;https://abulka.github.io/patterns/hexmvc/#hexmvc-source-code&#34;&gt;the appendix&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hexmvc-history&#34;&gt;HexMvc History&lt;/h2&gt;
&lt;h3 id=&#34;mgm-days&#34;&gt;MGM days&lt;/h3&gt;
&lt;p&gt;My initial simplification and re-telling of MVC came with my &lt;a href=&#34;https://abulka.github.io/patterns/mvca-pattern/&#34;&gt;MGM pattern&lt;/a&gt; where I simply said (well perhaps not so simply, given that it was a paper for a design patterns conference) was that in these (more modern) days where we have proper, sophisticated GUI widgets with eventing and self rendering - there was a need to retell the MVC story - which was traditionally also looking after all eventing, user interaction and even rendering of the GUI.&lt;/p&gt;
&lt;p&gt;So I came up with MGM (model-gui-mediator) where the mediator took on the roles of intercepting events from the GUI widget, sticking info into the model, and also of populating the GUI with fresh information.  The “mediator” class (the last “M” in MGM - although visually it sat more in the middle - between the model and the gui) was a controller and view adapter in one - whereas these days I would separate these two roles, as you will see in HexMVC.  &lt;/p&gt;
&lt;p&gt;The benefit of this variation of the MVC design pattern was that was practical and minimalist.  It dealt with the reality of modern gui widgets, whether they be GUI widgets or html DOM elements and created only a single class that mediated with a model.  In a sense it was the simplest MVC possible, whilst retaining model and gui separation.&lt;/p&gt;
&lt;h3 id=&#34;next-steps&#34;&gt;Next steps&lt;/h3&gt;
&lt;p&gt;As I learned more about the roles involved in MVC, and encountered variants that teased apart those roles more fully (like pureMVC) I became interested in upscaling my MVC approach a little so that it was more all encompassing and took into account whole-application considerations, like providing a central controller layer for housing many ‘commands’.  &lt;/p&gt;
&lt;p&gt;Then I became interested in bootstrapping the wiring of whole apps with MVC architectures, and eventually in the swappability of guis and models - which led to HexMVC.&lt;/p&gt;
&lt;h3 id=&#34;hexmvc-in-a-nutshell&#34;&gt;HexMVC in a nutshell&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; Write the application layer but don&amp;rsquo;t import or use any libraries directly.  Wrap all library calls with Adapter objects, so that you can switch to other libraries easily.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HexMVC says that there must be a view class that looks after the off the shelf GUI widget (or in the case of the browser, the DOM element).  In the wild, the term “view” is ambiguous and sometimes means the gui adapter or the gui or both.  I use the term view adapter for the class that looks after the widget/DOM element.&lt;/p&gt;
&lt;p&gt;So far this is not controversial.  HexMVC then goes on to say a few more interesting things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Firstly, that models and GUI widgets should be treated on an equal footing, and be “adapted”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondly, that generic, application eventing should occur between adapters and a central controller - any private eventing between the gui and its adapter should remain private. In the case of model adapters, they implement all the eventing and the models remain pure.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly, the application and controller are bound together as the “application hub”, which may be split into many command objects. The application layer talks to the orbiting sattelite functionality via the adapter interfaces, and thus the application is insulated from changes in the “implementation”.  Adapters can, more efficiently, also talk to each other directly, but again, only through the adapter interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More broadly, the HexMVC approach is wired up through dependency injection and eventing and as you may have noticed, the use of adapters - more specifically families of adapters - so that different implementations can be plugged in without the application noticing.  An adapter is essentially a ‘driver’ you install for a particular implementation being used - like a new printer driver for a new printer.  That’s where the ‘hex’ comes into it, from the ‘hexagonal’ architecture pattern idea (later renamed “ports and adapters”).&lt;/p&gt;
&lt;h3 id=&#34;rules-and-roles&#34;&gt;Rules and Roles:&lt;/h3&gt;
&lt;p&gt;Note: when I say ‘notifies’ I mean via notifications via eventing - which is managed/wired up by dependency injection - and not through layers actually knowing about each other.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;view layer notifies controller, model layer usually does not notify controller, but it could.&lt;/li&gt;
&lt;li&gt;model layer often efficiently notifies view layer directly, yes.&lt;/li&gt;
&lt;li&gt;view layer can read from model later directly, yes - but not modify it.&lt;/li&gt;
&lt;li&gt;controller can manipulate both model and view layers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;layered-architectures&#34;&gt;Layered Architectures&lt;/h2&gt;
&lt;p&gt;I had always been fascinated by the idea of pluggable, modular application designs where you could plug in decoupled services/functionality into an app.  Its a truth that adding functionality adds complexity almost exponentially - it becomes harder and harder to add features without introducing problems and inteference.  I wanted a way out of that.&lt;/p&gt;
&lt;p&gt;Simple layering:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A recent talk I gave on layered architectures reinforced the benefits of layering. However I found numerous people talking about the limitations of having the model ‘at the bottom’ of the layering stack.  Plus lots of people were introducing an ‘infrastructure layer’ which stood vertically and had access to all layers.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally, there were all these techniques for breaking out of layers, like broadcast notifications, eventing and dependency injection.  So I got to thinking that maybe a different metaphor was needed, something a bit less vertical, and more like a circle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Possible evolution of layering&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When teaching design patterns courses including sessions about the adapter pattern, I would always end that particular session with the idea of using adapters as a way of insulating an app from the ‘bad outside world’ and adapt all external libraries.  It was a radical, intriguiing idea - possibly a bit impractical and theoretical. So I ended up trying to build such a system anyway.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alistair Cockburn described a &lt;a href=&#34;https://www.google.com/url?q=http://alistair.cockburn.us/Hexagonal%2Barchitecture&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497539284&amp;amp;usg=AOvVaw2f2mT_1Zk2v3iJ84jJRrNP&#34;&gt;hexagonal architecture&lt;/a&gt; (later renamed Ports and Adapters pattern) which had services, gui’s, db, etc. around a central app.  The application talked to adapters.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image24.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The hexagonal architecture&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was the architecture I was intrigued by, but there were no reference implementations, and a lot of the writing on the webpage seemed theoretical and sketchy - like a half baked idea that nobody had actually tried.  So I went ahead and built something similar - as simply as possible.&lt;/p&gt;
&lt;p&gt;I had always liked the &lt;a href=&#34;https://www.google.com/url?q=http://puremvc.org/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497539894&amp;amp;usg=AOvVaw0krRSlmvdpyy7V-x2aGNRS&#34;&gt;PureMvc&lt;/a&gt; pattern, which was a bold retelling of the mvc architecture pattern.  It described all the roles in an mvc architecture, and provided strict rules as to who knows who and how the sequence of interactions went.  I wrote a number of &lt;a href=&#34;https://www.google.com/url?q=http://www.andypatterns.com/index.php/blog/puremvc_refactor/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497540127&amp;amp;usg=AOvVaw1wOxO1elRARnO7oLGybGMF&#34;&gt;articles&lt;/a&gt; about it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is a framework and has been ported to most languages.  In practice I found it effective though tedious because of all the rules and registrations - and with its home grown eventing system it is tedious to declare event types, register handlers etc.  I wanted something simpler, whilst keeping the good stuff.  When I implemented an early/partial HexMvc version of a minimal PureMvc sample app, I was able to remove all references to the PureMvc framework and simplify the resulting application - the cost was a dozen extra lines of code to get it working the same.  But being able to remove an entire framework and get the the same result was certainly encouraging.&lt;/p&gt;
&lt;h2 id=&#34;hexmvc-fundamentals&#34;&gt;HexMVC Fundamentals&lt;/h2&gt;
&lt;h3 id=&#34;app-in-the-centre&#34;&gt;App in the centre&lt;/h3&gt;
&lt;p&gt;We start the basic hexagonal architecture with the idea of application in the core.&lt;/p&gt;
&lt;p&gt;The application talks to interfaces, which are implemented by adapters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The controller too, lives inside the central app hub.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-app&#34;&gt;The App&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Holds refs to the core adapters (server, gui, model)&lt;/li&gt;
&lt;li&gt;Wires the core adapters so they know about the app&lt;/li&gt;
&lt;li&gt;App has job of housing the domain logic and app logic and thus the controller/commands.&lt;/li&gt;
&lt;li&gt;App sometimes mediates - calls come in and the app sends them out again. Defines one or two methods that an adapter may need (e.g. for that adapter to communicate some info to or get some info from another adapter)  Mediation role.&lt;/li&gt;
&lt;li&gt;Defines Boot() and Shutdown()&lt;/li&gt;
&lt;li&gt;Injects multicast dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the app does not instantiate objects - this is done by the bootstrapper.&lt;/p&gt;
&lt;h4 id=&#34;layers-as-slices-through-the-app-circle&#34;&gt;Layers as slices through the App circle.&lt;/h4&gt;
&lt;p&gt;Thus we have taken top down layering and making it round a “Application Hub” instead.  If you follow one particular event flow e.g. from gui to model and back again, you get a traditional view-controller-model top down layered cake.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image17.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;But by allowing for more event flows and more services plugged in to a hub, we get a more flexible and interesting architecture, which is still a layered one.  Thus you can get different layers depending on where you start and where you finish.  Nobody is ‘on top’ or ‘on the bottom’.&lt;/p&gt;
&lt;p&gt;E.g. I add a server layer which provides REST services to the web, as an example of another significant layer.&lt;/p&gt;
&lt;h4 id=&#34;interfaces-everywhere&#34;&gt;Interfaces Everywhere&lt;/h4&gt;
&lt;p&gt;As GOF says in its introduction, one of the main two OO principles is “Program to an interface, not an implementation”.  This allows clients to be decoupled from the implementation.&lt;/p&gt;
&lt;h4 id=&#34;adpaters-everywhere&#34;&gt;Adpaters Everywhere&lt;/h4&gt;
&lt;p&gt;In HexMvc we write adapters to implement the interfaces. The adapters’ purpose is to provide a level of indirection between the application logic and the substantive thing the application is talking to.&lt;/p&gt;
&lt;h3 id=&#34;hexmvc-control-flow&#34;&gt;HexMvc Control flow&lt;/h3&gt;
&lt;p&gt;In HexMvc I pretty much follow the PureMvc rules and call sequences.&lt;/p&gt;
&lt;h4 id=&#34;the-rules&#34;&gt;The rules&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Model notifies, but doesn&amp;rsquo;t listen and ultimately knows nothing about anything else in the system.&lt;/li&gt;
&lt;li&gt;View sends messages to controller and listens for incoming messages from model.&lt;/li&gt;
&lt;li&gt;Controller commands are created and invoked by certain messages and they send out messages if they want to.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-typical-call-sequence&#34;&gt;The typical call sequence&lt;/h4&gt;
&lt;p&gt;Here the gui adapter raises command events and listens for notification events.  A command event is an event that causes the controller to do something (which may then indirectly instantiate a command object to the work).  A notification event would be e.g. the model layer saying ‘something has changed’.  Controllers act directly on the model / model adapter layer and don’t typically raise events.  The model layer doesn’t listen for events, but can generate notification events.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image15.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;
&lt;p&gt;The controller makes available an abstract chunk of information that the view renders, so in that sense a HexMvc controller is like a traditional web controller class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Controller listens for GUI command messages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Responds by implementing the business logic  - optionally uses command objects to do the work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Talks to the model adapter and other adapters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Offers other functionality that can get invoked directly (not just from eventing) e.g. from the server service. Provides information as implementation independent, abstract chunks e.g. dictionaries, datastructures, vanilla app objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that controllers shouldn’t get too ‘view specific’ - these roles are performed by the View Adapter.  Choosing templates and constructing juicy, view specific data structures are not jobs for the controller.&lt;/p&gt;
&lt;h3 id=&#34;eventing&#34;&gt;Eventing&lt;/h3&gt;
&lt;p&gt;I use a simplified eventing system (see in depth discussion on eventing later in this document).&lt;/p&gt;
&lt;h4 id=&#34;application-specific-eventing-vs-gui-eventing&#34;&gt;Application specific eventing vs gui eventing&lt;/h4&gt;
&lt;p&gt;The adapters is where you implement application specific eventing.  The Gui itself may have some eventing but this is gui implementation specific and not to be confused with the eventing that the application uses.  Its the gui adapter for example, that intercepts gui specific eventing and rasies the appropriate application event.  The gui adapater similarly listens for the appropriate application event and does something with it, like poke values into controls on a windows form.&lt;/p&gt;
&lt;h3 id=&#34;the-bootstrapper&#34;&gt;The Bootstrapper&lt;/h3&gt;
&lt;p&gt;Instantiation of adapters and the things they adapt (the ‘ring’ objects) should be outside the App.  Theoretically you inject different ring adapters into the app and the app will still work.  That’s the whole point.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instantiates all instances of objects&lt;/li&gt;
&lt;li&gt;Injects normal dependencies, wires up the ring adapters to talk to each other if needed&lt;/li&gt;
&lt;li&gt;Can be considered configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dependency-injection&#34;&gt;Dependency Injection&lt;/h3&gt;
&lt;p&gt;The bootstrapper has aspects of a factory in that it instantiates the correct objects.&lt;/p&gt;
&lt;p&gt;It then uses dependency injection config bootup everywhere to configure&lt;/p&gt;
&lt;p&gt;When you wire up your objects to point to each other you are doing dependency injection - as long as the objects are not instantiating instances of the objects they are pointing to themselves, and the injection is done from ‘outside’. The objects being injected are thus depending on an abstraction or interface - which is injected later.&lt;/p&gt;
&lt;h2 id=&#34;hexmvc-in-detail&#34;&gt;HexMvc in Detail&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;All in One HexMvc Diagram&lt;/p&gt;
&lt;h3 id=&#34;app-to-gui-boundary&#34;&gt;App to GUI boundary&lt;/h3&gt;
&lt;p&gt;Swappable guis, just rewrite the gui adapter&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image23.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;view&#34;&gt;View&lt;/h3&gt;
&lt;p&gt;We should distinguish between the view adapter and the view ‘renderer’/controls.  The latter ‘ring object’ can be hand crafted by code or built by nice high level form building tools - and should have absolutely no knowledge of the app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Views renderers are totally dumb.  &lt;/li&gt;
&lt;li&gt;View Adapter on the other hand know both about the dirty details of view controls and how to populate them.&lt;/li&gt;
&lt;li&gt;The View Adapter binds to or overrides GUI specific events and translates these into application events.  Conversely the GUI adapter listens for relevant application events (e.g. model ‘I have changed’) and responds by updating the real GUI.&lt;/li&gt;
&lt;li&gt;The View Adapter talks directly to the app/controller to get information.  Just as with the server adapter, this information is made available as an abstract chunk of information that is independent of the view.  Its up to the view or ther server to ‘render’ it appropriately.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, its the gui adapters that recieve events from e.g. the model, regarding things that change and need to be re-rendered. Anytime you switch GUI implementations, you put in place a different adapter - ensuring it hooks into and participates in the same eventing infrastructure.&lt;/p&gt;
&lt;p&gt;The interface to your alternate gui adapters is, of course, the same.  &lt;/p&gt;
&lt;p&gt;Its the gui adapters that recieve events from e.g. the model, regarding things that change and need to be re-rendered. Anytime you switch GUI implementations, you put in place a different adapter - ensuring it hooks into and participates in the same eventing infrastructure.&lt;/p&gt;
&lt;p&gt;Typically the gui adapter listens for application events and updates the particular gui in a particular way.&lt;/p&gt;
&lt;h3 id=&#34;app-to-model-boundary&#34;&gt;App to Model boundary&lt;/h3&gt;
&lt;h4 id=&#34;model&#34;&gt;Model&lt;/h4&gt;
&lt;p&gt;The Model contains the raw domain classes and their relationships.  The model adapter interface is what the app deals with.&lt;/p&gt;
&lt;p&gt;HexMvc favours a thin model approach where the majority of domain and business logic is kept in the  controller because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A thin model means you can rebuild a model rapidly as needed, for different implementations (see more info on this below).  You preserve the hard domain and business logic in the controller, which never changes.  The App and Controller are the core which never changes.&lt;/li&gt;
&lt;li&gt;A centralised coordinated domain logic with undo/redo in a central place is something I’m trying out at this stage of my programming!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see that when the application talks to the model, it talks via an adapter, via an interface.&lt;/p&gt;
&lt;h4 id=&#34;eventing-in-the-model-adapter&#34;&gt;Eventing in the model adapter&lt;/h4&gt;
&lt;p&gt;Similarly the model adapter is the where model ‘onchange’ application events are raised.  The model remains pure and simple.  The model’s “Add Some Entity” operation is implemented by the model adapter, which pokes the information into the pure model and then its the model adapter which raises the relevant onchange application notification event.&lt;/p&gt;
&lt;h4 id=&#34;model-no-longer-at-the-bottom&#34;&gt;Model no longer at the bottom&lt;/h4&gt;
&lt;p&gt;It may seem strange to have the model as a sattelite rather than in the heart of the application.  But to put the model inside the app centre would to make the same ‘mistake’ as putting the model at the bottom of the traditional layer cake.  Its not necessarily wrong, its just inflexible and not in the spirit of pluggability.&lt;/p&gt;
&lt;h4 id=&#34;why-have-multiple-model-implementations&#34;&gt;Why have multiple model implementations?&lt;/h4&gt;
&lt;p&gt;This lets you switch out the model for a differently implemented model.  Now this may sound strange - swapping out a different model, as the model is typically a core part of an application and independent of any particular implementation.  But you need to be able to do this because I found that when implementing a ORM model which auto persists to a db, I had to annotate my classes with a certain syntax.  In my regular OO model, none of this syntax was needed. So I couldn’t use the same source code for my model - my model was not ‘pure’ enough. Implementation details were, rightly or wrongly, creeping into my pure model.  Further evidence of this was that my model implementations operated differently - my OO version had to work harder to store collections, whereas the ORM model had that functionality for free, due to the underlying SQL db.&lt;/p&gt;
&lt;p&gt;Thus switching model implementations is no different to switching out gui implementations.&lt;/p&gt;
&lt;p&gt;That’s why models are out on the ring and not in the centre - they are not reified but are just another application service.  This also means that a thin model approach is best, so that business logic is not duplicated, and can be kept in the core app - which is where I like it best these days anyway.&lt;/p&gt;
&lt;h4 id=&#34;different-back-ends-to-a-model&#34;&gt;Different ‘back ends’ to a model&lt;/h4&gt;
&lt;p&gt;Model swappability is not to be confused with the idea of different ‘back ends’ to a model.  When you keep the model code the same and switch in different persistence or database backends - that is merely a nice feature of a particular model implementation.  Its an implementation which has some persistence flexibility.  But if I don’t want to conform to that particular e.g. Ruby ActiveRecord paradigm, with its particular model annotations and syntax - I don’t have to.  HexMvc allows me to swap in a totaly different model paradigm, with entirely different model syntax and annotations - its completely flexible.&lt;/p&gt;
&lt;h3 id=&#34;model-to-persistence-boundary&#34;&gt;Model to Persistence boundary&lt;/h3&gt;
&lt;p&gt;As we said earlier, the model adapter provides the overall interface to the &amp;lsquo;model subsystem&amp;rsquo;. The model adapter methods include model manipulation and access methods, as well as persistence methods. e.g.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Behind the model adapter is the pure model and possibly a persistence object.  The persistence class is itself adapted behind an interface, so that different persistence techniques can be used.  The model adapter coordinates both the pure model and the swappable persistence class.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The persistence class knows about the model, it has to, in order to get persistence data in and out of it.&lt;/p&gt;
&lt;p&gt;The underlying real model class provides the model methods, obviously.&lt;/p&gt;
&lt;p&gt;The underlying real persistence class provides the persistence methods.&lt;/p&gt;
&lt;h4 id=&#34;different-persistence-techniques&#34;&gt;Different persistence techniques&lt;/h4&gt;
&lt;p&gt;Typically you do not need an explicitly coded persistence object ‘backend’ if your model already uses the ORM pattern, and persistes automatically to a db.  And usually you can choose the db vendor through config files.&lt;/p&gt;
&lt;p&gt;But if you are hand-crafting your own persistence backend mechanism which can be swapped for other persistence mechanisms, then the following design seems a reasonable approach.&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;is-an-abstract-persistence-interface-possible&#34;&gt;Is an abstract persistence interface possible?&lt;/h4&gt;
&lt;p&gt;An alternative ‘swappable persistence backend approach’ I tried was to have the model communicate with an abstract persistence interface which you can swap - this prooved too hard. But again, if you can pull it off, that&amp;rsquo;s fine. Just hide all this stuff behind the Model Adapter.&lt;/p&gt;
&lt;h4 id=&#34;switchable-db-persistence-backends-to-a-particular-model&#34;&gt;Switchable db persistence backends to a ‘particular’ model.&lt;/h4&gt;
&lt;p&gt;Here we are talking about a model that has swappable persistence backends.  As mentioned earlier, the idea of different persistence/implementation ‘back ends’ to a model is to be distinguished from swapping entire model implementations.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you swap model implementations your model code changes and has different code syntax annotations and implementation logic.&lt;/li&gt;
&lt;li&gt;When you swap persistence back-ends, the model code stays the same and a configuration file lets you switch in different a persistence / database backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;on-file-names-and-connection-strings&#34;&gt;On file names and connection strings&lt;/h4&gt;
&lt;p&gt;The Model Adapter LoadAll() optionally does take a filename as a parameter e.g. LoadAll(‘mydata.txt’). This is fine for when the app wants to specify a persistence file to load/save to and is the common case catered for.  &lt;/p&gt;
&lt;p&gt;If you are e.g. persisting to a database using a connection string, there is now more information to be specified than a mere filename e.g. database name, username, password etc.  We arguably should not contaminate the interface of ModelAdapter with all sorts of Persistence specific methods and parameters - after all, the ModelAdapter must be a straightforward interface that can be implemented by various persistence implementations - so that persistence implementations can be swapped in/out seamlessly.&lt;/p&gt;
&lt;p&gt;The solution is to move this problem into the configuration/wiring/bootup stage where the Persistance object is instantiated and configured. For example, In the case of Sql database persistence, a Persistence class is not needed since the Model is auto persisted.  In this case the ModelSqlAdapter implements the required LoadAll methods by doing nothing. And the connection string etc. is done in the configuration.&lt;/p&gt;
&lt;h3 id=&#34;app-to-server-boundary&#34;&gt;App to Server boundary&lt;/h3&gt;
&lt;p&gt;Server thread is like another gui layer, just write a different server adapter&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image22.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;careful-with-your-call-sequence&#34;&gt;Careful with your call sequence&lt;/h4&gt;
&lt;p&gt;A slightly different call sequence is needed when providing a server interface to your app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can’t simply have the server subscribe to model onchange notifications, because the server must prepare and return a response immediately - at the end of the incoming request.  &lt;/li&gt;
&lt;li&gt;You can’t can’t have the server raise an application event which the controller then picks up and acts on, because you typically want an immediate response so that a response object can be built.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means the server must call directly into the controller and get the information it needs, and the controller must call directly into the model (adapter) to make changes and get results.  This is not strange, this is simply the web mvc approach.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image19.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;its-not-necesssarily-a-synchronous--asynchronous-issue&#34;&gt;Its not necesssarily a synchronous / asynchronous issue&lt;/h4&gt;
&lt;p&gt;Note that this is not a synchronous / asynchronous issue - since most eventing whilst appearing semantically asynchronous is actually all implemented synchronously.  Its more an issue of incoming function calls on the server needing to do all their work within the same function call, whereas with an eventing approach, work is broken up across several function calls and returned using several function calls.&lt;/p&gt;
&lt;h4 id=&#34;implications&#34;&gt;Implications&lt;/h4&gt;
&lt;p&gt;This all means that controller commands must be able to be invoked directly or invocable as a result of an event being raised.&lt;/p&gt;
&lt;p&gt;Note that the model can still send its onChange notifications, its just that the server is not hooked up to them - but other subsystems might be.  So this allows for webpages to indirectly affect a desktop GUI view - neat.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Example of using the REST api via a web browser.  The GUI updates itself simultaneously!&lt;/p&gt;
&lt;p&gt;Aside: Threading introduces a bit of complexity, watch out for communication between threads, added a mutex method on the app, which can do anything needed&lt;/p&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;h3 id=&#34;adapters&#34;&gt;Adapters&lt;/h3&gt;
&lt;p&gt;More elaboration on &lt;a href=&#34;https://abulka.github.io/patterns/hexmvc-adapters&#34;&gt;HexMVC adapters&lt;/a&gt; and Adapter Patterns in general.&lt;/p&gt;
&lt;h3 id=&#34;events&#34;&gt;Events&lt;/h3&gt;
&lt;p&gt;More elaboration on &lt;a href=&#34;https://abulka.github.io/patterns/hexmvc-eventing&#34;&gt;HexMVC eventing&lt;/a&gt; and Event Patterns in general.&lt;/p&gt;
&lt;h3 id=&#34;hexmvc-source-code&#34;&gt;HexMVC Source Code&lt;/h3&gt;
&lt;p&gt;Here is the directory of code used to develop the ideas in this article. It contains various versions of implementations, mainly in Python and .NET.  I need to document it sometime.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/abulka/pynsource/tree/master/Research/hexmvc&#34;&gt;https://github.com/abulka/pynsource/tree/master/Research/hexmvc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P.S. There is no reason it is located in the &lt;code&gt;pynsource&lt;/code&gt; GitHub project directory - it just happened that way. It should be moved to its own repository.&lt;/p&gt;
&lt;h2 id=&#34;presentation-in-2012&#34;&gt;Presentation in 2012&lt;/h2&gt;
&lt;p&gt;I presented the HexMVC pattern to the Melbourne Patterns Group in 2012.&lt;/p&gt;
&lt;p&gt;Re the talk - yeah it was full on 1.75 hours, 10 people - quite a complex topic.  I got some useful feedback re points that could be clearer etc. A couple of heart felt applauses and one guy came up to me and shook my hand with enthusiasm.   A few others didn&amp;rsquo;t say as much as I hoped - I guess I was looking for a bit more feedback. I probably didn&amp;rsquo;t pause enough and allow audience participation like I normally do - I just barrelled through the material a bit.  Its not easy, esp. - when presenting something complex and new-ish for the first time.&lt;/p&gt;
&lt;h3 id=&#34;post-presentation-clarifications&#34;&gt;Post Presentation Clarifications&lt;/h3&gt;
&lt;p&gt;Thanks for those who came and listened to my HexMvc talk last night. If anyone is interested in accessing and commenting on the google doc which will soon be an article on my website, please &lt;a href=&#34;mailto:abulka@gmail.com&#34;&gt;email me&lt;/a&gt; for access.  I was also hoping for some ‘peer review’ on my talk so please send me your thoughts if you get time - I would really appreciate the feedback.&lt;/p&gt;
&lt;p&gt;Meanwhile here are some more considered responses to a few of last night’s questions:&lt;/p&gt;
&lt;h4 id=&#34;q-whats-the-distinction-between-the-model-and-the-model-adapter&#34;&gt;Q: ‘What’s the distinction between the model and the model adapter’&lt;/h4&gt;
&lt;p&gt;A: The application should treat the model adapter as if it were the model. And as Stewart reminded me of my own point (thanks!), the adapter adds the application eventing so that the model is not contaminated with that eventing infrastructure stuff. The adapter also hides model specific operations that are done in different ways e.g. FindThings() lives in the model adapter and is implemented totally differently in the OO model adapter implementation vs. the SQL model adapter implementation (which utilises a fast sql query).  Yes, there seems to be some flexibility re whether you put model subsystem functionality into the model or its model adapter. Certainly business rules and exceptions I would put in the controller, and keep the model subsystem thin.&lt;/p&gt;
&lt;h4 id=&#34;q-the-server-becomes-just-another-view&#34;&gt;Q: ‘The server becomes just another view’&lt;/h4&gt;
&lt;p&gt;A: Yes - and yey - it all turns out to be very symmetrical.  Though because the services offered by the server REST api are available via http then you might access these services without any sort of browser/view - just trawling for data and making command calls into the application.  Perhaps this subsystem should be called ‘services’ not server?  Done, I’ve renamed it.&lt;/p&gt;
&lt;h4 id=&#34;q-why-in-the-diagram-does-the-app-point-to-the-gui-but-in-fact-the-gui-gets-updated-directly-from-the-model-via-notifications&#34;&gt;Q: ‘Why in the diagram does the App point to the GUI but in fact the GUI gets updated directly from the model via notifications’&lt;/h4&gt;
&lt;p&gt;A: Good point, my ‘arrows’ and their directions could have been made clearer.  The connection between the core app and the gui is one of composition and rarely used.  Its the eventing from view to controller and from model to view that forms 90% of the communication with the view.  My sequence diagrams showed this, but my overal structural diagram was, let us say, a bit more abstract and loose re this point.  Here is an updated diagram that should make things clearer:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/patterns/images/hexmvc/image11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;POST TALK THOUGHTS:&lt;/p&gt;
&lt;p&gt;Look at the ideas of &lt;a href=&#34;https://www.google.com/url?q=http://obvious.retromocha.com/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497596031&amp;amp;usg=AOvVaw3G_JvaDfacMb4Ki6Z4oU07&#34;&gt;‘obvious’ framework&lt;/a&gt; which is based on Uncle Bob’s thoughts. It has an independent APP and a plugs/jacks approach.&lt;/p&gt;
&lt;p&gt;Asked for more info in a &lt;a href=&#34;https://www.google.com/url?q=https://github.com/RetroMocha/obvious/issues/2&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1644533497596383&amp;amp;usg=AOvVaw1J3id81clTw9cpbH3F_u04&#34;&gt;github post.&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: GUI Showdown</title>
      <link>https://abulka.github.io/blog/2022/02/11/gui-showdown/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2022/02/11/gui-showdown/</guid>
      <description>
        
        
        &lt;p&gt;Andy&amp;rsquo;s &lt;a href=&#34;https://abulka.github.io/gui-showdown&#34;&gt;GUI Showdown&lt;/a&gt; - The same application, implemented in various ways - which is better, cleaner, more understandable etc?&lt;/p&gt;
&lt;p&gt;Like the TodoMVC &amp;ldquo;Rosetta Stone&amp;rdquo; project, but uses a different example application, and includes Python as well as Javascript implementations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This project was originally intended to see if an ECS (Entity Component System), which is commonly used in building games, could be used to implement a &amp;ldquo;normal&amp;rdquo; GUI application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;five-javascript-implementations&#34;&gt;Five Javascript implementations:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://abulka.github.io/gui-showdown&#34;&gt;Live Demo&lt;/a&gt; of all Javascript implementations.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Technique&lt;/th&gt;
&lt;th&gt;Lines&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OO&lt;/td&gt;
&lt;td&gt;279&lt;/td&gt;
&lt;td&gt;Gui wired via OO (Object Oriented Models with Observer)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MVCA&lt;/td&gt;
&lt;td&gt;383&lt;/td&gt;
&lt;td&gt;Gui wired via &lt;a href=&#34;https://github.com/abulka/todomvc-oo&#34;&gt;MVCA&lt;/a&gt; Architectural Pattern 🆕!!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;228&lt;/td&gt;
&lt;td&gt;Gui wired via ECS (Entity Component System)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PLAIN&lt;/td&gt;
&lt;td&gt;154&lt;/td&gt;
&lt;td&gt;Gui wired via plain JQuery&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VUE&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;td&gt;Gui wired via Vue.js&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;two-wxpython-implementations&#34;&gt;Two wxPython implementations:&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Technique&lt;/th&gt;
&lt;th&gt;Lines&lt;/th&gt;
&lt;th&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ECS&lt;/td&gt;
&lt;td&gt;344&lt;/td&gt;
&lt;td&gt;Gui wired via ECS (Entity Component System)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OO&lt;/td&gt;
&lt;td&gt;290&lt;/td&gt;
&lt;td&gt;Gui wired via OO (Object Oriented Models with Observer)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- P.S. Why is the python ESC version bigger than OO, yet the js ESC version is **smaller** than js OO!?? --&gt;
&lt;p&gt;Counting the number of lines is approximate.  Implementation code that is a convenient extension to a library or framework is not counted.  E.g. Vue.js itself is not counted, obviously.  ECS uses Jecs library, which is not counted, nor are some extension functions I added.  OO technique uses an observer design pattern, whose short implementation code is not counted - its the least I could do to help the OO approach which came in at a whopping 300 lines.&lt;/p&gt;
&lt;p&gt;There is an index.html launch page to get to all these implementations, as well as a debug view showing models in real time as you work with the GUI.&lt;/p&gt;
&lt;h2 id=&#34;the-application-being-implemented&#34;&gt;The Application being implemented&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/abulka/gui-showdown/raw/master/docs/images/2019-07-17_11-41-03.gif&#34; alt=&#34;The UI&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;specification&#34;&gt;Specification&lt;/h3&gt;
&lt;p&gt;Whilst not that complex, this application has a few interesting nuances which challenge any implementation. The main nuance is that whilst the &amp;ldquo;model&amp;rdquo; can be edited and manipulated (made uppercase, set to certain phrases) the top header area displays the model according to various &amp;ldquo;display options&amp;rdquo;.  Changing the display options changes how to top area appears but does not change the model.&lt;/p&gt;
&lt;p&gt;Specifically, the behaviour we are implementing is:&lt;/p&gt;
&lt;p&gt;Model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;welcome message&lt;/strong&gt;, default &amp;ldquo;Welcome&amp;rdquo;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;user&lt;/strong&gt;, with a &lt;code&gt;firstname&lt;/code&gt; and &lt;code&gt;surname&lt;/code&gt;, default &amp;ldquo;Sam Smith&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;welcome_msg&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Welcome&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;firstname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Sam&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;surname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Smith&amp;#34;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The GUI displays:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the welcome message twice
&lt;ul&gt;
&lt;li&gt;top left: pure message&lt;/li&gt;
&lt;li&gt;top right: message + user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;text entry, which allows editing of the welcome message&lt;/li&gt;
&lt;li&gt;text entry, which allows editing of the user name and surname&lt;/li&gt;
&lt;li&gt;checkbox1, which toggles the model welcome message uppercase/lowercase&lt;/li&gt;
&lt;li&gt;checkbox2, which toggles the top right user to uppercase (not via model)&lt;/li&gt;
&lt;li&gt;button1, which resets the welcome message to &amp;ldquo;Hi&amp;rdquo;&lt;/li&gt;
&lt;li&gt;button2, which resets the user to &amp;ldquo;Fred Flinstone&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;commentary&#34;&gt;Commentary&lt;/h2&gt;
&lt;p&gt;More commentary and evaluation of the techniques to come.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: TodoMVC implemented using a game architecture — ECS</title>
      <link>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/</guid>
      <description>
        
        
        &lt;p&gt;Building traditional GUIs with the Entity Component System.&lt;/p&gt;
&lt;p&gt;Is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity_component_system&#34;&gt;Entity Component System&lt;/a&gt; any good for building traditional GUIs?&lt;/p&gt;
&lt;p&gt;It turns out that the answer is yes! Whilst ECS is most commonly used in building games, it can also be used for building a traditional web “form” style application like TodoMVC. However you will need to radically rethink how models, their data and behaviour is organised.&lt;/p&gt;
&lt;p&gt;This is arguably a refreshing, mind-blowing lesson in GUI programming! 🤯😉&lt;/p&gt;
&lt;p&gt;See full article on Medium &lt;a href=&#34;https://medium.com/@abulka/todomvc-implemented-using-a-game-architecture-ecs-88bb86ea5e98&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: TodoMVC implemented using traditional OO, Controllers and Events</title>
      <link>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/</guid>
      <description>
        
        
        &lt;p&gt;TodoMVC implemented in a classic Object Oriented way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TodoMVC is a long standing web project showing how a ToDo app can be built in numerous frameworks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The classic Javascript TodoMVC app implemented without a framework, using plain Object Oriented programming + a traditional MVC design pattern. Distinct, mediating Controller objects are the key to this implementation.&lt;/p&gt;
&lt;p&gt;Running demo &lt;a href=&#34;https://abulka.github.io/todomvc-oo/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See my full article on Medium &lt;a href=&#34;https://medium.com/@abulka/todomvc-implemented-using-traditional-oo-controllers-and-events-5e4c09f80cd4&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See also &lt;a href=&#34;https://github.com/1Marc/todomvc-vanillajs-2022&#34;&gt;this GitHub repo&lt;/a&gt; by Marc Grabanski which shows us how to built TodoMVC in vanilla JS in 2022 (no classes are used in this version).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Patterns: MVC-App Architectural Pattern</title>
      <link>https://abulka.github.io/patterns/mvca-pattern/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/patterns/mvca-pattern/</guid>
      <description>
        
        
        &lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article describes the &amp;ldquo;MVC-App Architectural Pattern&amp;rdquo; which you can use to design your software applications, when you need to support a GUI.  It is not a framework, it is a small set of principles which let you build sane, modular GUIs in any language, using any off the shelf UI components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the original, deprecated, MGM pattern which initially inspired this &amp;ldquo;MVC-App Pattern&amp;rdquo; pattern, see &lt;a href=&#34;https://abulka.github.io/patterns/mgm-pattern/&#34;&gt;MGM pattern&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;todomvc-oo&#34;&gt;TodoMVC-OO&lt;/h2&gt;
&lt;p&gt;This is the classic Javascript &lt;a href=&#34;https://github.com/tastejs/todomvc&#34;&gt;TodoMVC app&lt;/a&gt; implemented &lt;strong&gt;without a framework&lt;/strong&gt; 😄, simply using plain Object Oriented programming + a traditional MVC design pattern.&lt;/p&gt;
&lt;p&gt;Distinct, mediating &lt;code&gt;Controller&lt;/code&gt; classes are the key to this implementation.&lt;/p&gt;
&lt;img src=&#34;https://github.com/tastejs/todomvc-app-css/raw/master/screenshot.png&#34; width=&#34;500&#34;&gt;
&lt;p&gt;Running demo &lt;a href=&#34;https://abulka.github.io/todomvc-oo/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mvca-architectural-pattern&#34;&gt;MVCA Architectural Pattern&lt;/h2&gt;
&lt;p&gt;This project fully implements the TodoMVC specification. It is implemented without a framework, using plain Object Oriented programming + the &lt;strong&gt;MVCA&lt;/strong&gt; architectural design pattern:&lt;/p&gt;
&lt;p&gt;Whilst the MVC (Model View Controller) pattern is commonly and glowingly referred to, implementations can vary widely. Most documentation on MVC, including the official &lt;a href=&#34;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;wikipedia article&lt;/a&gt; is vague on definitions and details.  This TodoMVC-OO project uses the MVCA pattern (formerly the &lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern) which is a clear and unambiguous interpretation of MVC, with the following key ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;View&lt;/strong&gt; means a modern GUI framework, and therefore is usually already available to be used by the programmer.&lt;/li&gt;
&lt;li&gt;One or more &lt;strong&gt;Controllers&lt;/strong&gt; mediate between the View and the rest of the Application, listening for GUI events. Nobody else knows about the View.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Model&lt;/strong&gt; is traditional data, may contain some business logic, and may broadcast events when its attributes change.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Application&lt;/strong&gt; owns the model(s), holds view state and contains some business logic methods.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Eventing&lt;/strong&gt; system is needed, traditionally Observer pattern but the stronger decoupling and the proper event objects of the Publisher-Subscriber pattern is preferred.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus MVCA simply means &amp;ldquo;&lt;strong&gt;M&lt;/strong&gt;odel &lt;strong&gt;V&lt;/strong&gt;iew &lt;strong&gt;C&lt;/strong&gt;ontroller &lt;strong&gt;A&lt;/strong&gt;pplication&amp;rdquo; - all four roles are necessary to any implementation.&lt;/p&gt;
&lt;!-- ![MVCA Architecture](https://github.com/abulka/todomvc-oo/raw/master/out/docs_other/plantuml/mvca-architecture-v2.svg?sanitize=true) 
    this version doesn&#39;t render the internal images (which are base64 encoded) due to &#34;because it violates the following Content Security Policy directive:...&#34;
    but serving the same image via github.io works ok.
--&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/todomvc-oo/images/mvca-architecture-v2.svg?sanitize=true&#34; alt=&#34;MVCA Architecture&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The above diagram was generated semi-automatically from Javascript source code residing in GitHub using &lt;a href=&#34;www.gituml.com&#34;&gt;GitUML&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;a href=&#34;https://abulka.github.io/todomvc-oo/images/mvca-architecture-v2.svg?sanitize=true&#34;&gt;here&lt;/a&gt; for more diagram detail as a .svg and the ability to zoom. &lt;/li&gt;
&lt;li&gt;View this actual &lt;a href=&#34;https://www.gituml.com/viewz/181&#34;&gt;diagram 181&lt;/a&gt; on GitUML.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvca-in-detail&#34;&gt;MVCA In Detail&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s go through the four parts of the MVCA pattern, which is precisely adhered to by this TodoMVC-OO implementation. Actually there is a fifth important part - the eventing system - which glues it all together - let&amp;rsquo;s look at the Model first.&lt;/p&gt;
&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;Model&lt;/strong&gt; is traditional, may contain some business logic, and may broadcast events when its attributes change.&lt;/p&gt;
&lt;p&gt;By traditional, I mean the Model does not know about anything else except perhaps other models. Its the core model of your data, the domain of the what the application is all about. In the case of the Todo application, it is a collection of Todo items, which can be marked completed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; TodoItem {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(title, id, completed) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; title &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; title;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._completed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; completed &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; completed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; util.uuid() &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; id;  &lt;span style=&#34;color:#6272a4&#34;&gt;// no getter/setter needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get title() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._title;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set title(v) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; v;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.dirty()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get completed() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._completed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set completed(v) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._completed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; v;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.dirty()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get as_dict() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            id&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.id,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.title,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            completed&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.completed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        notify_all(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;deleted todoitem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dirty() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        notify_all(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;modified todoitem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;, {during_load&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Model is usually broken into many smaller interconnected models in an attempt to reflect the real world domain being implemented as software. The Model can be implemented as mere objects in memory or a full-fledged database model, or a &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt; mapping between the two.  In our case, we have a pure memory model, which gets persisted into local browser storage as JSON.&lt;/p&gt;
&lt;p&gt;You will find that some &amp;lsquo;model&amp;rsquo; concepts are more about how the information is presented in the GUI, thus I recommend these are kept as attributes of the Application class, and referred to as the &lt;em&gt;view state&lt;/em&gt; or &lt;em&gt;view model&lt;/em&gt;. The attribute &lt;code&gt;filter&lt;/code&gt; is an example of such view state.  The Application class can also hold collections of models which is what we do in this project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Application {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(config) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.todos &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []  &lt;span style=&#34;color:#6272a4&#34;&gt;// model collection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.filter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// view model, options are: &amp;#39;all&amp;#39;, &amp;#39;active&amp;#39;, &amp;#39;completed&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The model can be fat or thin - a fat model will have more business logic in the model. A thin model will most business or application logic in the Application class, treating the model as just data structures.&lt;/p&gt;
&lt;p&gt;Finally, the Model needs to participate in the internal eventing system. Whenever an attribute changes it should send out a notification event - this is why most attributes of our &lt;code&gt;TodoItem&lt;/code&gt; class are accessed via getter and setter methods. For example setting &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;completed&lt;/code&gt; will trigger an internal event to whoever may be listening. This internal eventing mechanism is how Controllers know to update the GUI with updated model information.&lt;/p&gt;
&lt;h3 id=&#34;view&#34;&gt;View&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;View&lt;/strong&gt; means a modern GUI framework, and as such is already available to be used by the programmer.
In our case, our modern GUI framework is the browser DOM which you can build in HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;toggle-all&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;toggle-all&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then Controllers use the GUI native eventing system to listen for interesting events&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.gui.$toggle_all.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;change&amp;#39;&lt;/span&gt;, handler)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;
&lt;p&gt;The Controller is the most interesting aspect of MVC.&lt;/p&gt;
&lt;p&gt;In many software designs, the Controller isn&amp;rsquo;t necessarily a single thing. A bunch of stray GUI event handler functions are in reality, part of the &amp;lsquo;controller role&amp;rsquo;. Code that copies data from the model into the GUI/DOM is also part of the Controller role.
I feel the challenge of GUI architectures is to tame the role of Controller into some semblance of coherance and symmetric organisation. Which is why MVCA prescribes creating Controller classes.&lt;/p&gt;
&lt;p&gt;In TodoMVC-OO we have a Controller class &lt;code&gt;ControllerTodoItem&lt;/code&gt; and instantiate one per TodoItem model instance. That&amp;rsquo;s arguably a lot of controller instances, but this approach allows fine grained updating of the DOM. In contrast, the Jquery version of TodoMVC rebuilds the entire todo DOM on each refresh - something that might become inefficient for non-toy apps.&lt;/p&gt;
&lt;p&gt;In TodoMVC-OO we have a Controller class &lt;code&gt;ControllerHeader&lt;/code&gt; for looking after the header part of the GUI and &lt;code&gt;ControllerFooter&lt;/code&gt; for looking after the footer area, which is where the &lt;code&gt;filter&lt;/code&gt; buttons are and the count of uncompleted todo items is displayed. The number of Controllers you create is up to you: one Controller per GUI element for fine grained updates, a more relaxed approach of one Controller per related group of GUI elements (my preference) or arguably even one Controller for all GUI elements! I go into more academic detail on this topic in my &lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern paper.&lt;/p&gt;
&lt;p&gt;By clearly defining what a mediating Controller is, and organising our app into different sensible controllers, we tame our design and prevent it from turning into spaghetti.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View events &lt;em&gt;only&lt;/em&gt; talk to Controllers:
&lt;ul&gt;
&lt;li&gt;View events (&amp;lsquo;gui events&amp;rsquo; e.g. via &lt;code&gt;.on(&#39;click&#39;, ...)&lt;/code&gt;) go to one or more Controllers.&lt;/li&gt;
&lt;li&gt;Controllers update the View, usually in reponse to an &amp;lsquo;internal event&amp;rsquo; notification.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Controller talks to the rest of the system:
&lt;ul&gt;
&lt;li&gt;Accesses App view state.&lt;/li&gt;
&lt;li&gt;Calls App business logic methods.&lt;/li&gt;
&lt;li&gt;Modifies the Model directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Controller listens for &amp;lsquo;internal events&amp;rsquo; broadcast from Model &amp;amp; App.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whilst that may seem like a lot to understand, its basically saying Controllers talk to the GUI - nobody else does. Controllers then call into the rest of the system to get things done&lt;/p&gt;
&lt;p&gt;Importantly, we must resist putting business logic into the Controller, simply let the controller call the Application to do what needs to be done. The Controller should do the minimal possible work, mediating and translating between the View and the rest of the system (the App + Model).&lt;/p&gt;
&lt;h3 id=&#34;application&#34;&gt;Application&lt;/h3&gt;
&lt;p&gt;The role of the Application is also important and often overlooked/undocumented. The Application owns the Model, and looks after persisting it. The Application can listen for internal Model events.&lt;/p&gt;
&lt;p&gt;Whilst it is fine to wire Controllers directly to model instances, you will also need the Application to hold &amp;ldquo;view state&amp;rdquo; e.g. like the state of the active &amp;ldquo;filter&amp;rdquo; in this Todo application.  The Application is a centralised class, a kind of hub - to hold higher level business logic and more complex model manipulations. The Application class&amp;rsquo;s functionality can of course be composed of smaller pieces as software grows more complex but a class called &lt;code&gt;Application&lt;/code&gt; should always still exist.&lt;/p&gt;
&lt;h3 id=&#34;eventing-system&#34;&gt;Eventing System&lt;/h3&gt;
&lt;p&gt;Eventing is an important consideration in decoupling models from controllers, and to facilitate abstract communication between objects.&lt;/p&gt;
&lt;p&gt;Two eventing systems should be distinguished:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GUI native&lt;/strong&gt;: The native eventing system of the GUI Framework e.g. DOM &lt;code&gt;.on(&#39;click&#39;, ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal&lt;/strong&gt;: Your choice of an application system wide eventing system e.g. Publish-Subscribe e.g. &lt;code&gt;document.addEventListener(&amp;quot;hello&amp;quot;, (event) =&amp;gt; { ... })&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both eventing systems are used in the TodoMVC-OO implementation. As you can see in the diagram above, DOM eventing reaches the Controllers, but no further. The remaining eventing is internal.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/abulka/lcodemaps&#34;&gt;Literate Code Map&lt;/a&gt; of the event flow of TodoMVC-OO. Events are reified as coloured objects, each different event gets a different colour.
&lt;img src=&#34;https://raw.githubusercontent.com/abulka/todomvc-oo/master/out/docs_other/plantuml/todomvc-oo-event-flow-gituml-134.png&#34; alt=&#34;todomvc event flow&#34;&gt;
&lt;em&gt;TodoMVC-OO event flow.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The above diagram was generated semi-automatically from Javascript source code residing in GitHub using &lt;a href=&#34;www.gituml.com&#34;&gt;GitUML&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;a href=&#34;https://abulka.github.io/todomvc-oo/images/todomvc-oo-event-flow-gituml-134.svg&#34;&gt;here&lt;/a&gt; for more diagram detail as a .svg and the ability to zoom. &lt;/li&gt;
&lt;li&gt;View this actual &lt;a href=&#34;https://www.gituml.com/viewz/134&#34;&gt;diagram 134&lt;/a&gt; on GitUML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The eventing pattern depicted here is &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;Publisher-Subscriber&lt;/a&gt; where real event objects are &amp;lsquo;broadcast&amp;rsquo; into the ether/event bus/system/whatever - allowing any code in the system to subscribe and respond - the point is, the code emitting the event does not have references to receiver object/methods.&lt;/p&gt;
&lt;p&gt;The Javascript built in Publisher-Subscriber eventing approach is more flexible and powerful than the &lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;Observer&lt;/a&gt; pattern since the Observer pattern &lt;em&gt;requires observers to know about&lt;/em&gt; and subscribe to Subject objects, which is not always possible or convenient. More dicussion on the differences can be found &lt;a href=&#34;https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c&#34;&gt;in this article&lt;/a&gt; and on &lt;a href=&#34;https://stackoverflow.com/questions/6439512/difference-between-observer-pattern-and-event-driven-approach&#34;&gt;Stackoverflow&lt;/a&gt;. Thus we use Publisher-Subscriber eventing (event name → object method) rather than the traditional Observer pattern (object → object) approach.&lt;/p&gt;
&lt;p&gt;I used to be a fan of the traditional Observer pattern but in my later years find the Publisher-Subscriber pattern to be simpler and more powerful - plus Publisher-Subscriber is built into Javascript you simply &lt;code&gt;document.addEventListener(&amp;quot;hello&amp;quot;, (event) =&amp;gt; { ... })&lt;/code&gt; to listen and &lt;code&gt;document.dispatchEvent(new CustomEvent(event_name, { detail: {from: from, data: data } }))&lt;/code&gt; to notify all.&lt;/p&gt;
&lt;p&gt;The Javascript built in Publisher-Subscriber eventing system is used as the internal eventing system of this TodoMVC-OO implementation.&lt;/p&gt;
&lt;h2 id=&#34;application-bootstrapping&#34;&gt;Application Bootstrapping&lt;/h2&gt;
&lt;p&gt;To get things running, some bootstrapping code will create an instance of the Application which in turn creates all the Controllers and loads the Model.
The bootstrapping in TodoMVC-OO is done in &lt;code&gt;app.js&lt;/code&gt; which creates an instance of Application which is defined in &lt;code&gt;application.js&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; config &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {...}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Application(config)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that a &lt;code&gt;config&lt;/code&gt; object with a list of callback methods is passed into the Application.&lt;/p&gt;
&lt;p&gt;Giving the Application class knowledge of individual Controller classes and all the GUI view elements they need is arguably contaminating the Application class with too much GUI view and Controller knowledge.&lt;/p&gt;
&lt;p&gt;The solution I use is to pass the Application a &lt;code&gt;config&lt;/code&gt; object which contains a bunch of callbacks. Each callback function will magically create a Controller instance, wired to look after its GUI elements. Each callback function hides, within itself, references to the DOM - which we don&amp;rsquo;t want the Application to have. In this way, the bootstrapping code and the Controller code are the only parts of the architecture that know about the View specifics (which we want to restrict).&lt;/p&gt;
&lt;p&gt;Thus whenever the Application needs to instantiate a Controller (e.g. each time a TodoItem is created) it calls a &lt;code&gt;config&lt;/code&gt; callback function.
Another example is during bootup - some permanent Controllers need to be created, like the Controller looking after the header area, so the Application calls
&lt;code&gt;this.callback_config.cb_header(this)&lt;/code&gt; which creates an instance of the &lt;code&gt;ControllerHeader&lt;/code&gt; wired to &lt;code&gt;$(&#39;.new-todo&#39;)&lt;/code&gt; and &lt;code&gt;$(&#39;.toggle-all&#39;)&lt;/code&gt;.  The Application only needs to know the callback function names and thus remains pure.&lt;/p&gt;
&lt;p&gt;Notice in the &lt;code&gt;config&lt;/code&gt; object below that each callback refers to the view through JQuery syntax e.g. &lt;code&gt;$(&#39;ul.todo-list&#39;)&lt;/code&gt; and passes these references into the contructor of the Controller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; config &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Callback to create the todo item controllers - are added as needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cb_todo&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (app, todo) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ControllerTodoItem(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            app,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            todo,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            { $todolist&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ul.todo-list&amp;#39;&lt;/span&gt;) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Callbacks to create the permanent controllers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cb_header&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (app) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ControllerHeader(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            app,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                $input&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.new-todo&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                $toggle_all&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.toggle-all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cb_footer&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (app) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ControllerFooter(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            app,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                $footer&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;footer&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                $footer_interactive_area&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.footer&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course the Controller itself will have further references to View DOM elements, however these references should be based on searching &lt;em&gt;within&lt;/em&gt; the outer DOM element passed to the Controller - thus achieving some degree of &amp;lsquo;component-isation&amp;rsquo; and re-use. For example the same Controller could be used to look after different DOM elements with different element id&amp;rsquo;s.&lt;/p&gt;
&lt;h2 id=&#34;todomvc-oo-conclusion&#34;&gt;TodoMVC-OO Conclusion&lt;/h2&gt;
&lt;p&gt;This project fully implements the TodoMVC specification and is implemented without a framework, using plain Object Oriented programming + MVCA architectural design pattern, as described above.&lt;/p&gt;
&lt;p&gt;Running demo &lt;a href=&#34;https://abulka.github.io/todomvc-oo/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;improvements&#34;&gt;Improvements&lt;/h3&gt;
&lt;p&gt;In this implementation, I notice that footer renders too early rather than right at the end of the initial render. Its just a subtle flash of the footer when the page is initially redrawn, but I&amp;rsquo;d like to correct this.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Official &lt;a href=&#34;http://todomvc.com/&#34;&gt;TodoMVC project&lt;/a&gt; with other TodoMVC implementations (e.g. Vue, Angular, React etc.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abulka/todomvc-ecs&#34;&gt;TodoMVC-ECS&lt;/a&gt; - My &amp;ldquo;Entity Component System&amp;rdquo; implementation of TodoMVC&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://abulka.github.io/gui-showdown/main_mvca.html&#34;&gt;MVCA&lt;/a&gt; another example of an app implemented using the MVCA architecture (Javascript, open source)&lt;/li&gt;
&lt;li&gt;Andy&amp;rsquo;s &lt;a href=&#34;https://abulka.github.io/gui-showdown&#34;&gt;GUI Showdown&lt;/a&gt; The same application, implemented in various ways - which is better, cleaner, more understandable etc. (Javascript, open source)
&lt;ul&gt;
&lt;li&gt;OO&lt;/li&gt;
&lt;li&gt;MVCA&lt;/li&gt;
&lt;li&gt;ECS&lt;/li&gt;
&lt;li&gt;PLAIN&lt;/li&gt;
&lt;li&gt;VUE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;docs_other/mgm.md&#34;&gt;MGM&lt;/a&gt; pattern (older version of MVCA, presented at a Patterns Conference)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- - [Used by](https://github.com/abulka/todomvc-oo) --&gt;
&lt;!-- - [Website](https://www.gituml.com/editz/134) --&gt;
&lt;!-- - [Blog](https://www.gituml.com/editz/136) --&gt;
&lt;!-- - [FAQ](https://www.gituml.com/editz/136) --&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m recently loving &lt;a href=&#34;https://flet.dev/docs/&#34;&gt;Flet&lt;/a&gt; which lets you build Flutter GUIs using Python.  However I miss the reactivity of Vuejs and even Flutter. So I put together a quick solution - instead of imperitively allowing the Flet UI control event callbacks e.g. on_click, to update the UI directly, we update a reactive model, which in turn updates the Flet UI.  A full example is at &lt;a href=&#34;https://github.com/abulka/freactive-python&#34;&gt;https://github.com/abulka/freactive-python&lt;/a&gt;.  It shows how such a simplified architecture can (even without the Observer classes) can achieve similar functionality to the TodoMVC-OO architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;diagramming&#34;&gt;Diagramming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gituml.com&#34;&gt;GitUML&lt;/a&gt; diagramming used for this project&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abulka/lcodemaps&#34;&gt;Literate Code Mapping&lt;/a&gt; diagramming used for this project&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- - [Medium article]()  (coming in Apr 2020) --&gt;
&lt;!-- ### Support

- [Stack Overflow](http://stackoverflow.com/questions/tagged/MVCA)
- [Twitter](http://twitter.com/unjazz) --&gt;
&lt;h2 id=&#34;credit&#34;&gt;Credit&lt;/h2&gt;
&lt;p&gt;Created by &lt;a href=&#34;http://andypatterns.com&#34;&gt;Andy Bulka&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: This project is not not officially part of the &lt;a href=&#34;http://todomvc.com/&#34;&gt;TodoMVC project&lt;/a&gt; - as it is does not use a MVC framework library, nor does it meet the criterion of &amp;ldquo;having a community&amp;rdquo; around it.  On the other hand, perhaps a pattern is equivalent enough to a framework - after all there is a plain Javascript TodoMVC implementation officially available using ad-hoc techniques. Plus, there has been a &amp;ldquo;community&amp;rdquo; around the Object Oriented MVC pattern for decades now - hasn&amp;rsquo;t there? 😉&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Building a Python-Electron App</title>
      <link>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2018/10/03/building-a-python-electron-app/</guid>
      <description>
        
        
        &lt;p&gt;Building a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad.
The closest you can get is to follow a long recipe of steps — which I propose to outline here.&lt;/p&gt;
&lt;p&gt;See full article on Medium &lt;a href=&#34;https://medium.com/@abulka/electron-python-4e8c807bfa5e&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
