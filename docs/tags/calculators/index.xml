<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andy Bulka – Calculators</title>
    <link>https://abulka.github.io/tags/calculators/</link>
    <description>Recent content in Calculators on Andy Bulka</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 14 Feb 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://abulka.github.io/tags/calculators/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Projects: Websites</title>
      <link>https://abulka.github.io/projects/websites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/websites/</guid>
      <description>
        
        
        &lt;p&gt;Being an application software developer, I made the transition to building web applications.  Here are some of them.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Technology&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GitUML&lt;/td&gt;
&lt;td&gt;UML visualisation for Git repositories&lt;/td&gt;
&lt;td&gt;Python, Django, Javascript&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python to RPN&lt;/td&gt;
&lt;td&gt;Python to RPN converter&lt;/td&gt;
&lt;td&gt;Python, Flask, Javascript&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RPN Calculators&lt;/td&gt;
&lt;td&gt;Online RPN calculators programmable in Javascript&lt;/td&gt;
&lt;td&gt;Javascript, HTML, CSS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Toolback - App Builder&lt;/td&gt;
&lt;td&gt;An online programming environment, with low code features.&lt;/td&gt;
&lt;td&gt;Python, Javascript&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chord Jammer&lt;/td&gt;
&lt;td&gt;A midi web app that lets you play chords with 1 finger in the left hand and jam safely in the right hand.&lt;/td&gt;
&lt;td&gt;Javascript, Vuejs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rationale&lt;/td&gt;
&lt;td&gt;An argument mapping application&lt;/td&gt;
&lt;td&gt;C#, .NET&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: Javascript RPN calculators</title>
      <link>https://abulka.github.io/projects/websites/rpn-calcs/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/websites/rpn-calcs/</guid>
      <description>
        
        
        &lt;p&gt;These RPN calculators are programmable in Javascript, thus taking the vintage HP calculator paradigm and adding a modern language.&lt;/p&gt;
&lt;h3 id=&#34;rpn-calc&#34;&gt;Rpn-calc&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/rpn-calc-1.png&#34; alt=&#34;rpn-calc-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the built in Javascript code editor.&lt;/p&gt;
&lt;p&gt;Parameters to Javascript functions are taken off the RPN stack. Return values from Javascript functions are pushed onto the RPN stack.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/rpn-calc-2.png&#34; alt=&#34;rpn-calc-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atug.com/jsrpncalc-web/&#34;&gt;https://atug.com/jsrpncalc-web/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;rpn-calc2&#34;&gt;Rpn-calc2&lt;/h3&gt;
&lt;p&gt;A completely new implementation, also programmable in Javascript. Define interactive UI buttons and sliders.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/rpn-calc2-1.png&#34; alt=&#34;rpn-calc2-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/rpn-calc2-2.png&#34; alt=&#34;rpn-calc2-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atug.com/jsrpncalc2/&#34;&gt;https://atug.com/jsrpncalc2/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: Python to RPN</title>
      <link>https://abulka.github.io/projects/websites/pyrpn/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/websites/pyrpn/</guid>
      <description>
        
        
        &lt;p&gt;A Python to HP42S RPN converter website &lt;a href=&#34;http://www.pyrpn.atug.com&#34;&gt;www.pyrpn.atug.com&lt;/a&gt; &lt;br&gt;
Allows you to program your old vintage HP Calculator in Python!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/nqfq01xaxvi4xnv/python_rpn_ui_01.png?raw=1&#34; alt=&#34;[Image: python_rpn_ui_01.png?raw=1]&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See also my blog post &lt;a href=&#34;http://www.andypatterns.com/index.php/blog/ast-parsing-python-generate-hp-calculator-rpn/&#34; title=&#34;AST Parsing with Python to generate HP Calculator RPN&#34;&gt;How I used the Python AST capabilities to build a Python to Rpn converter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You write code in a high level structured language (which happens to be Python 3 syntax), hit a button and RPN is generated. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/3xcmxfxraxc6wej/python_rpn_ui_02small.png?raw=1&#34; alt=&#34;[Image: python_rpn_ui_02small.png?raw=1]&#34;&gt;&lt;/p&gt;
&lt;p&gt;You then paste the RPN into Free42 or transfer it to your DM42 (by &lt;a href=&#34;https://www.swissmicros.com/dm42/decoder/&#34;&gt;creating a raw&lt;/a&gt;) - and it runs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Examples: &lt;a href=&#34;http://www.pyrpn.atug.com/examples&#34;&gt;http://www.pyrpn.atug.com/examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;User Guide: &lt;a href=&#34;http://www.pyrpn.atug.com/help&#34;&gt;http://www.pyrpn.atug.com/help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Canvas for 42S Simulator: &lt;a href=&#34;http://www.pyrpn.atug.com/canvas&#34;&gt;http://www.pyrpn.atug.com/canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;List of HP42S Commands Supported Reference: &lt;a href=&#34;http://www.pyrpn.atug.com/cmds&#34;&gt;http://www.pyrpn.atug.com/cmds&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The converter supports core Python syntax (which is very powerful), but does not implement the built in Python libraries that you would get in desktop Python. You have to rely on the ability to call HP42S commands from Python to do your work - which of course you can do. Specifically, it has the following capabilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Functions, Multiple functions, nested functions&lt;/li&gt;
&lt;li&gt;Parameter passing, receiving return values, multiple return values&lt;/li&gt;
&lt;li&gt;if elif else&lt;/li&gt;
&lt;li&gt;Comparison operators == != &amp;gt; &amp;lt; &amp;gt;= &amp;lt;=&lt;/li&gt;
&lt;li&gt;Booleans True, False and operators not or and&lt;/li&gt;
&lt;li&gt;for loops, range(), for..in iteration through lists and dictionary keys&lt;/li&gt;
&lt;li&gt;while loops, while&amp;hellip;else&lt;/li&gt;
&lt;li&gt;continue and break operations in for loops and while loops&lt;/li&gt;
&lt;li&gt;Lists and Dictionaries (basic operations only).&lt;/li&gt;
&lt;li&gt;Matrices, Pythonic matrix element access syntax [row,col]&lt;/li&gt;
&lt;li&gt;NumPy compatible slicing syntax for sub-matrices&lt;/li&gt;
&lt;li&gt;Complex numbers using either 42S or Python native syntax&lt;/li&gt;
&lt;li&gt;Expressions involving nested brackets&lt;/li&gt;
&lt;li&gt;assert&lt;/li&gt;
&lt;li&gt;Testing and clearing of flags&lt;/li&gt;
&lt;li&gt;Access most HP42S commands as function calls e.g. FIX(2)&lt;/li&gt;
&lt;li&gt;Some enhanced functions to make life easier e.g. varmenu() automates and simplifies the generation of MVAR based code.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: Toolback</title>
      <link>https://abulka.github.io/projects/websites/toolback/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/projects/websites/toolback/</guid>
      <description>
        
        
        &lt;p&gt;Toolback - Low Code App Builder.&lt;/p&gt;
&lt;p&gt;An online programming environment, with low code features.  Drag and drop a UI and add scripts directly to components.  Generate websites and desktop apps (electron based) with a click of a button.&lt;/p&gt;
&lt;h3 id=&#34;toolback&#34;&gt;Toolback&lt;/h3&gt;
&lt;p&gt;Toolback is the drag and drop UI builder and online, Low Code, app building IDE.&lt;/p&gt;
&lt;!-- ![toolback-1](/projects/websites/images/toolback-1.png) --&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/toolback-2.png&#34; alt=&#34;toolback-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/toolback-7-drag-drop.png&#34; alt=&#34;toolback-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/toolback-3.png&#34; alt=&#34;toolback-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/toolback-4.png&#34; alt=&#34;toolback-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Preview your app with a key press.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/toolback-5-menus.gif&#34; alt=&#34;toolback-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;Export to a website or electron app - one click!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/toolback-6-electron.png&#34; alt=&#34;toolback-6&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;toolback-lite&#34;&gt;Toolback Lite&lt;/h3&gt;
&lt;p&gt;Toolback-Lite is a lightweight drag and drop UI builder and online app building IDE. The drag and drop is done on a grid rather than using the the complex &lt;a href=&#34;https://grapesjs.com/&#34;&gt;grapes-js&lt;/a&gt; html builder library, which Toolback uses.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/projects/websites/images/toolback-lite-1.gif&#34; alt=&#34;toolback-lite-1&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Projects: Print42</title>
      <link>https://abulka.github.io/projects/apps/print42/</link>
      <pubDate>Mon, 23 Nov 2020 12:18:07 +1100</pubDate>
      
      <guid>https://abulka.github.io/projects/apps/print42/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;http://www.print42.atug.com&#34;&gt;Print42&lt;/a&gt; is a log tailing GUI program which optionally echoes log lines to thermal printer tape. Its like a modern thermal printer version of a ticker tape for tailing log files. It features display font size options, search and filtering. You can also annotate the output with text fragments that you type in - or screenshots that you paste in.&lt;/p&gt;
&lt;p&gt;As well as physically printing from Free42, the Print42 software can also be used to print HP Prime screenshots (from either the emulator or real HP Prime hardware via the HP connectivity kit).&lt;/p&gt;
&lt;p&gt;Outside the world of calculators, Print42 can be used to &amp;rsquo;tail&amp;rsquo; log files (programmers take note) and to print graphic snippets from the web. Useful if you want to rapidly print information to stuff into your pocket or to study and annotate printouts of complex information, at your desk.&lt;/p&gt;
&lt;p&gt;If you are looking for a useful, fun new gadget, you might want to consider buying an Epson thermal printer and trying Print42. However you can also use Print42 with your regular desktop printer, for free.&lt;/p&gt;
&lt;p&gt;The website for downloads and further information is &lt;a href=&#34;http://www.print42.atug.com/&#34;&gt;www.print42.atug.com&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Python AST Parsing</title>
      <link>https://abulka.github.io/blog/2018/06/01/python-ast-parsing/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://abulka.github.io/blog/2018/06/01/python-ast-parsing/</guid>
      <description>
        
        
        &lt;p&gt;How I used the Python AST capabilities to build the &lt;a href=&#34;https://pyrpn.atug.com/&#34;&gt;Python to Rpn converter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;python-compilation-pipeline&#34;&gt;Python compilation pipeline&lt;/h2&gt;
&lt;p&gt;My program works at the AST stage of the compilation pipeline:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abulka.github.io/blog/images/python_ast_parsing_design_of_compiler.jpg&#34; alt=&#34;Image: hacking-python-asts-pycon-de-2017-suhas&#34;&gt;&lt;/p&gt;
&lt;p&gt;Specifically my approach has been to use Python&amp;rsquo;s built in ability to parse itself into an AST &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;&gt;Abstract Syntax Tree&lt;/a&gt;, then to traverse this tree using the visitor design pattern to generate the RPN.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Python AST parser is built into Python and thus requires that you be running Python to use it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;For example, parsing the following Python code with &lt;code&gt;ast.parse&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; ast
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; astunparse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(astunparse&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dump(ast&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;x = 1 + 2&amp;#39;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will generate the following AST data structure representing &lt;code&gt;x = 1 + 2&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Module(body=[Assign(
  targets=[Name(
    id=&amp;#39;x&amp;#39;,
    ctx=Store())],
  value=BinOp(
    left=Num(n=1),
    op=Add(),
    right=Num(n=2)))])
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reception-to-the-talk&#34;&gt;Reception to the talk&lt;/h2&gt;
&lt;p&gt;The reception to the talk entitled &amp;ldquo;Leveraging the Python AST, Python’s hidden DOM&amp;rdquo; was good, but became fun and buoyant once the audience realised I had targeted an old HP calculator !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/b/bb/Hp42s_face.jpeg&#34; alt=&#34;old HP calculator&#34;&gt;&lt;/p&gt;
&lt;p&gt;with this fancy Python technology - especially when I pulled out my HP calculator collection for all to see and touch. 😄&lt;/p&gt;
&lt;p&gt;-Andy Bulka&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1_qNKLofUwPhs_LsF-AQM-0WstS2jeYrusU5El4RLfnc/edit?usp=sharing&#34;&gt;Python AST talk slides&lt;/a&gt; of the talk I gave to a local Python User Group in Melbourne, Australia, about how I used the Python AST capabilities to build the Python to Rpn converter.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pyrpn.atug.com/&#34;&gt;Python to Rpn converter&lt;/a&gt; which uses these AST conversion capabilities to convert Python code into HP calculator RPN code.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
