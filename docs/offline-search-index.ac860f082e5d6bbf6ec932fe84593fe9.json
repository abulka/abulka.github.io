[{"body":"Here is a list of my non web, standalone apps:\n Desktop Apps (Pynsource, Print42) Mobile App (Brew Moments)  ","categories":"","description":"","excerpt":"Here is a list of my non web, standalone apps:\n Desktop Apps …","ref":"/projects/apps/","tags":"","title":"Apps"},{"body":"Literate Code Maps I’ve invented a diagramming methodology called Literate Code Maps which improve upon some aspects of UML - actually they are quite different and arguably more useful than UML for understanding complex source code projects. I’ve been using this notation for many years, and it might help you in your projects.\nI’ve also been writing additional articles on Medium instead of my Blog here.\n","categories":"","description":"","excerpt":"Literate Code Maps I’ve invented a diagramming methodology called …","ref":"/projects/big-ideas/","tags":"","title":"Big Ideas"},{"body":"Wware Consulting offers:\n Object Oriented Programming Training Design Patterns training Staff onboarding consulting Developer Documentation consulting  Principal Consultant Andy Bulka\nEmail: abulka@gmail.com\nAddress\nWware Consulting\n34/271 Collins st\nMelbourne, Australia\nPhone: +61412-759186\nAndy Bulka’s Developer Story Andy Bulka’s Developer Story as pdf\nSelected resume and project moments as a timeline (Originally generated by StackOverflow before that feature was deprecated):\n","categories":"","description":"","excerpt":"Wware Consulting offers:\n Object Oriented Programming Training Design …","ref":"/about/consulting/","tags":"","title":"Consulting"},{"body":"Snippet Creator This extension helps to automate snippet creation. Select the code you want to create snippet from and use command Create Snippet from the command palette or your custom keybind.\nhttps://github.com/abulka/vscode-snippet-creator\nSnippets Explorer Visual Studio Code extension which displays all available language snippets in a TreeView\nhttps://github.com/abulka/vscode-snippets-explorer\nElectron-Flask App Generator Yoeman project generator to create an Electron app running a Flask server inside itself. Deployable via PyInstaller and Electron Forge packager.\nCreate an Electron App project that auto-starts a Flask server the electron app can call for services. Deployable as a single App that users can double click on and run.\nhttps://github.com/abulka/generator-electron-flask\n _-----_ ╭──────────────────────────╮ | | │ Welcome to the amazing │ |--(o)--| │ generator-electron-flask │ `---------´ │ generator! │ ( _´U`_ ) ╰──────────────────────────╯ /___A___\\ / | ~ | __'.___.'__ ´ ` |° ´ Y ` ? App Name myapp ? Description My Electron application description ? Author's Name Fred Smith ? Author's Email fred@example.com ? license: Apache 2.0 ? Package keywords (comma to split) python, js, great-app ? Run flask on port number? 5000 ? Initial flask url (e.g. /hello or /hello-vue) to display? / hello ? Choose from misc options (Press \u003cspace\u003e to select, \u003ca\u003e to toggle all, \u003ci\u003e to invert selection) ❯◉ Electron logging ◯ Print current working directory on startup ◯ Print node and electron versions on starrtup ◉ Fully quit on Mac on exit (without needing CMD-Q) ◉ Open Electron/Chrome DevTools in final app  Example of generated app:\nDedent for Dart Dedent - Remove any common leading whitespace from every line in text. Ported from Python.\nhttps://pub.dev/packages/dedent\nRelationship Manager A lightweight Object Database (no SQL used) class for Python 3\nhttps://pypi.org/project/relationship-manager/\nImage Presenter An image presentation tool, where you can click and zoom into various parts of a single image.\nRelevant text notes associated with each sub-area would appear when zoomed in. Arrow keys/buttons allow you to step through a narrated sequence of zooms, so that you get can be carefully guided through an art image, or diagram.\nTwo demo prototype versions, using different underlying technologies:\n https://atug.com/image_presenter/layerjs/ https://atug.com/image_presenter/zoomooz/  Source code currently unreleased.\n","categories":"","description":"","excerpt":"Snippet Creator This extension helps to automate snippet creation. …","ref":"/projects/libraries/","tags":["Software Product","Vscode","Electron","Flask","SQL"],"title":"Libraries \u0026 Tools"},{"body":"GitUML UML visualisation for Git repositories (website app).\nUnderstand code quickly: Automatically generate UML class diagrams from source code residing in git repositories. Diagrams automatically update when you push code using git.\nVisit GitUML now, create a free account and begin creating UML diagrams and documentation.\nPython to RPN Check out Python to RPN if you have an old vintage HP Calculator that you want to program in Python! Impossible? See also my blog post How I used the Python AST capabilities to build a Python to Rpn converter.\nI am pleased to announce the Python to HP42S RPN converter website is online.\nwww.pyrpn.atug.com You write code in a high level structured language (which happens to be Python 3 syntax), hit a button and RPN is generated. You then paste the RPN into Free42 or transfer it to your DM42 (by creating a raw) - and it runs.\n Examples: http://www.pyrpn.atug.com/examples User Guide: http://www.pyrpn.atug.com/help Canvas for 42S Simulator: http://www.pyrpn.atug.com/canvas List of HP42S Commands Supported Reference: http://www.pyrpn.atug.com/cmds  The converter supports core Python syntax (which is very powerful), but does not implement the built in Python libraries that you would get in desktop Python. You have to rely on the ability to call HP42S commands from Python to do your work - which of course you can do. Specifically, it has the following capabilities:\n Variables Functions, Multiple functions, nested functions Parameter passing, receiving return values, multiple return values if elif else Comparison operators == != \u003e \u003c \u003e= \u003c= Booleans True, False and operators not or and for loops, range(), for..in iteration through lists and dictionary keys while loops, while…else continue and break operations in for loops and while loops Lists and Dictionaries (basic operations only). Matrices, Pythonic matrix element access syntax [row,col] NumPy compatible slicing syntax for sub-matrices Complex numbers using either 42S or Python native syntax Expressions involving nested brackets assert Testing and clearing of flags Access most HP42S commands as function calls e.g. FIX(2) Some enhanced functions to make life easier e.g. varmenu() automates and simplifies the generation of MVAR based code.  Online Programmable RPN calculators Rpn-calc Here is the built in Javascript code editor.\nParameters to Javascript functions are taken off the RPN stack. Return values from Javascript functions are pushed onto the RPN stack.\nhttps://atug.com/jsrpncalc-web/\nRpn-calc2 A completely new implementation, also programmable in Javascript. Define interactive UI buttons and sliders.\nhttps://atug.com/jsrpncalc2/\nJupyter Notebooks A way of implementing complex calculators incl. scrolling text area UI widgets within Jupyter Notebooks.\nScrolling Textareas Scrolling Textareas in a Python Jupyter Notebook, allows building a kind of “Calculator Playground”.\nVarious Jupyter Notebooks at https://bitbucket.org/abulka/jupyter_play/src/master/ (private)\nGist of the scrolling textarea technique: https://gist.github.com/abulka/3043e8a4d78d2e26f872542524a0aa3e (public)\nGoogle Colaboratory A way of implementing UI scrolling regions within Google Colaboratory Notebooks. Google Colaboratory, or “Colab” for short, is a version of Jupyter Notebooks, and allows you to write and execute Python in your browser.\nThis Colab project is a simpler version of the scrolling text area idea above, and needs to be fleshed out a little more fully to match the native Jupyter notebook functionality above.\nToolback - App Builder An online programming environment, with low code features. Drag and drop a UI and add scripts directly to components. Generate websites and desktop apps (electron based) with a click of a button.\nToolback Toolback is the drag and drop UI builder and online, Low Code, app building IDE.\nPreview your app with a key press.\nExport to a website or electron app - one click!\nToolback Lite Toolback-Lite is a lightweight drag and drop UI builder and online app building IDE. The drag and drop is done on a grid rather than using the the complex grapes-js html builder library, which Toolback uses.\nChord Jammer A midi web app that lets you play chords with 1 finger in the left hand and jam safely in the right hand. As you change chords, the rh notes are filtered so you always play good sounding notes.\n MIDI powered by WebMidi.js GUI powered by webaudio-controls Scales powered by tonaljs - A functional music theory library for Javascript. ~/Devel/midi-play/webmidijs-play  Sample config export let project = {  chords: {  'C3': {  lhchord: Em7Chord,  rhnotes: EmScaleMelodic,  },  'D3': {  lhchord: AmAdd9Chord,  rhnotes: EmScaleNatural,  },  'E3': {  lhchord: CM9Chord,  rhnotes: EmScaleNatural,  },  'F3': {  lhchord: BmAdd11ChordInversion1,  rhnotes: EmScaleNatural,  rhnotes2: EmScaleHarmonic,  rhnotes3: EmBlues,  }  } } Single finger Chords With the project config above\n Play C3 to trigger chord Em7Chord and jam in default scale EmScaleMelodic Play D3 to trigger chord AmAdd9Chord and jam in default scale EmScaleNatural Play E3 to trigger chord CM9Chord and jam in default scale EmScaleNatural Play F3 to trigger chord BmAdd11ChordInversion1 and jam in default scale EmScaleNatural  Jamming notes are G3 to C5 and are filtered to be in the default scale for that chord.\nScale Switching whilst playing You can switch to e.g. the pentatonic scale for the current chord by pressing D#4. Switch back to the default scale by pressing C#4.\nHere is a list of modifier keys and what they do to the rh scale:\n C#4 default scale, rhnotes in config D#4 rhnotes2 scale in config F#4 rhnotes3 scale in config G#4 transpose rh scale by options.transposeUpAmount semitones A#4 transpose rh scale down by options.transposeDownAmount semitones  You can customise the transposition amounts for a given project via config e.g.\nexport let project = {  chords: {...},  options: {  transposeUpAmount: 4,  transposeDownAmount: -2,  } } Potentially other customisations via config will be supported in the future:\n Being able to specify which scales to switch to, instead of pentatonic and blues. Being able to change what the modifier keys actually are (unlikely).  Left hand black key modifiers The octave containing the left hand chord trigger notes will have its black keys used as modifiers. The C# acts as a SHIFT, so\n C# hold down to engage SHIFT mode D# cmdSetScaleFiltering(false) F# cmdSetScaleFiltering(true) G# transposeChord down a semitone A# transposeChord up a semitone SHIFT D# stopAllNotes() SHIFT F# scaleFilteringModificationSticky toggle SHIFT G# reset chord transpose - todo SHIFT A# reset chord transpose - todo  Config customisations supported export let project = {  chords: {...},  options: {...},   splitNote: 'C3', // Where the root note is (see explanation below)  rhStartOctave: 3, // To which octave to start mapping notes to } Rationale As CTO of Austhink, I technically managed and helped architect Rationale - an argument mapping application, written in C# and .NET. This was done together with a great team of developers and thinkers incl. the CEO Tim van Gelder.\nRationale - the desktop app\n Rationale is now available as an online web app at https://www.rationaleonline.com/\n🎗 Disclaimer: The web version of Rationale was developed by another team, using the source code and design of the desktop Rationale as a base.\n Also at Austhink, we developed the online debating and argument mapping website the Hive.\nHive - online debating and argument mapping website\n","categories":"","description":"","excerpt":"GitUML UML visualisation for Git repositories (website app). …","ref":"/projects/websites/","tags":["Software Product","Calculators","Python","Jupyter","Music","Diagramming"],"title":"Websites"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/diagramming/","tags":"","title":"Diagramming"},{"body":"Visit pynsource.com.\nPynsource is a UML tool for Python a desktop App for Mac, Window and Linux.\nPynsource imports Python code and features zoom, Ascii and PlantUML views and Auto Layout\nCommunity Edition is free, fully functional and open source - check out the Pynsource GitHub repository.\nBuy the Pro Edition for $20 to unlock the zoom feature and other pro features.\nVisit the Pynsource Home Page\n","categories":"","description":"","excerpt":"Visit pynsource.com.\nPynsource is a UML tool for Python a desktop App …","ref":"/projects/apps/pynsource/","tags":["UML","Software Product","Diagramming","Python"],"title":"Pynsource"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/python/","tags":"","title":"Python"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/software-product/","tags":"","title":"Software Product"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/uml/","tags":"","title":"UML"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/controllers/","tags":"","title":"Controllers"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/design-patterns/","tags":"","title":"Design Patterns"},{"body":"Andy Bulka,\nMarch 2012\nA new, architectural pattern for building multi-platform, scalable applications based on ideas from the Hexagonal Architecture pattern + Model View Controller (MVC).\nTLDR: Write the application layer but don’t import or use any libraries directly. Wrap all “library” calls with Adapter objects, so that you can switch to other libraries easily.\nTLDR: “Libraries” can amazingly, include the application data Model itself, Database and persistence layers, the entire GUI and all calls to server APIs. Plug and play everything with this architecture!\n  This is a draft article, written in 2012. It could do with some further editing, but I’ve never gotten around to it, so finally decided to publish it anyway, in 2022.\n Abstract HexMVC - This is my name for an architectural pattern that has arisen out of some long term research into PureMVC and ways to simplify it. Its also an attempt to fix some of the unsatisfactory aspects of traditional layered architectures by incorporating some core ideas out of the mysterious Hexagonal Architecture pattern. The hexagonal structure allows us to put the model on a more equal footing with other layers - rather than always having the model ‘at the bottom’. Its a rejection of a complex ’event’-ing framework in favour of multicast delegation based on interfaces. It uses dependency injection to configure apps to use different libraries and frameworks, whilst keeping the core app the same.\nI will present a fully functional example code which can be configured to run under pure python or under .NET using a choice of different GUI libraries (wxpython or windows forms or wpf), different server libraries (bottle or .NET). Everything is switchable using config files. The persistence layer is also switchable and the servers implement REST APIs consistent with the services offered by the core App.\nNote that the example code needs no framework code whatsoever, thus could be considered an architectural pattern - an abstract idea that can be implemented in any language and used in any project. The pattern lets you develop a core application and swap in \u0026 out alternate gui’s, persistence and services. It prescribes how to add app functionality whilst keeping your design clean.\nExample - Python Here is a real configuration Python file which assembles, injects and launches my sample application. The application consists of a GUI, a Server, a model with application logic.\nfrom ModelOo import Model from ModelOoAdapter import ModelOoAdapter  #from PersistenceOoPickle import Persistence from PersistenceOoHomegrown import Persistence  from ServerBottleAdapter import Server #from ServerMockAdapter import Server  from ViewWxAdapter import MyWxApp import wx from UtilRandomStdpythonAdapter import RandomIntFunction from UtilJsonStdpythonAdapter import JsonFromDictFunction from App import App  # Create Model - Object Oriented instances in memory model_oo = Model() persistence = Persistence() model = ModelOoAdapter(model_oo, persistence)  # Create Server server = Server(host='localhost', port=8081)  # Create Gui wxapp = MyWxApp(redirect=False) gui = wxapp.myframe # gui mediator inherits from gui rather than wrapping it  # Hook up Utility adapters gui.random = RandomIntFunction server.json_from_dict = JsonFromDictFunction  # Create Core Hexagon App and inject adapters app = App(model, server, gui) wx.CallAfter(app.Boot)  # Start Gui wxapp.MainLoop() Example - Javascript Here is a Todo app implementation in Javascript http://jsfiddle.net/tcab/mC5qA/\n\u003cselect id=\"list\" size=\"10\" style=\"width: 15em\"\u003e\u003c/select\u003e\u003cbr/\u003e \u003cbutton id=\"plusBtn\"\u003e + \u003c/button\u003e \u003cbutton id=\"minusBtn\"\u003e - \u003c/button\u003e /* MODEL */  var ListModel = function (items) {  this._items = items;  this._selectedIndex = -1; };  ListModel.prototype = {   getItems : function () {  return [].concat(this._items);  },   addItem : function (item) {  this._items.push(item);  },   removeItemAt : function (index) {  var item = this._items[index];  this._items.splice(index, 1);  maxindex = this._items.length - 1;  if (this._selectedIndex \u003e maxindex) {  this.setSelectedIndex(maxindex);  }  return item;  },   getSelectedIndex : function () {  return this._selectedIndex;  },   setSelectedIndex : function (index) {  this._selectedIndex = index;  }  };  var ListModelAdapter = function (model) {  this._model = model; };  ListModelAdapter.prototype = {   getItems : function () {  return this._model.getItems();  },   addItem : function (item) {  this._model.addItem(item);  $(document).trigger('MODEL_THING_ADDED', {item: item});  },   removeItemAt : function (index) {  var item = this._model.removeItemAt(index);  $(document).trigger('MODEL_CHANGED', {item: item});  },   getSelectedIndex : function () {  return this._model.getSelectedIndex();  },   setSelectedIndex : function (index) {  var previousIndex = this._selectedIndex;  this._model.setSelectedIndex(index);  $(document).trigger('MODEL_SELECTION_CHANGED', {previous: previousIndex});  }  };   /* VIEW */  var ListViewAdapter = function (model) {  this._model = model; };  ListViewAdapter.prototype = {   show : function () {  this.rebuildList();  },   rebuildList : function () {  console.log(\"VIEW REBUILD with index at \" + this._model.getSelectedIndex());  var list = $('#list');  list.html('');  var items = this._model.getItems();  var i = 0;  for (var key in items) {  list.append($('\u003coption value=\"' + i + '\"\u003e' + items[key] + '\u003c/option\u003e'));  i++;  }  this.updateSelected();  },   updateSelected : function () {  console.log(\"VIEW updateSelected \" + this._model.getSelectedIndex());  $('#list')[0].value = this._model.getSelectedIndex();  },   onAdd : function () {  $(document).trigger('CMD_ADD_ITEM');  },   onDelete : function () {  $(document).trigger('CMD_DELETE_ITEM');  },   onListSelectionChanged : function (e) {  $(document).trigger('CMD_SELECTION_CHANGED', e);  },  };  /* CONTROLLER */  var ListController = function (model) {  this._model = model; };  ListController.prototype = {   cmdAddItem : function () {  var item = prompt('Add item:', '');  if (item)  this._model.addItem(item);  },   cmdDelItem : function () {  var index = this._model.getSelectedIndex();  console.log(\"controller delItem \" + index);  if (index != -1)  this._model.removeItemAt(this._model.getSelectedIndex());  },   cmdUpdateSelected : function (e) {  console.log(\"CONTROLLER updateSelected \" + e.target.selectedIndex);  this._model.setSelectedIndex(e.target.selectedIndex);  },  };  /* Bootstrap */  $(function () {  //var model = new ListModel(['aaa', 'bbb', 'ccc', 'ddddd']);  var model = new ListModelAdapter(new ListModel(['aaa', 'bbb', 'ccc', 'ddddd']));  var view = new ListViewAdapter(model);  var controller = new ListController(model); // can also pass in view if you need it.   // Private eventing between gui and gui adapter  $('#plusBtn').click(function () { view.onAdd() });  $('#minusBtn').click(function () { view.onDelete() });  $('#list').change(function (e) { view.onListSelectionChanged(e); });  // More abstract application eventing  $(document).bind('CMD_ADD_ITEM', function(e) { controller.cmdAddItem(); });  $(document).bind('CMD_DELETE_ITEM', function(e) { controller.cmdDelItem(); });  $(document).bind('CMD_SELECTION_CHANGED', function(e, info) { controller.cmdUpdateSelected(info); });  $(document).bind('MODEL_THING_ADDED', function(e, info) { view.rebuildList(); });  $(document).bind('MODEL_CHANGED', function(e, info) { view.rebuildList(); });  $(document).bind('MODEL_SELECTION_CHANGED', function(e, info) { view.updateSelected(); });   view.show(); });  There are more source code implementations in the appendix\n HexMvc History MGM days My initial simplification and re-telling of MVC came with my MGM pattern where I simply said (well perhaps not so simply, given that it was a paper for a design patterns conference) was that in these (more modern) days where we have proper, sophisticated GUI widgets with eventing and self rendering - there was a need to retell the MVC story - which was traditionally also looking after all eventing, user interaction and even rendering of the GUI.\nSo I came up with MGM (model-gui-mediator) where the mediator took on the roles of intercepting events from the GUI widget, sticking info into the model, and also of populating the GUI with fresh information. The “mediator” class (the last “M” in MGM - although visually it sat more in the middle - between the model and the gui) was a controller and view adapter in one - whereas these days I would separate these two roles, as you will see in HexMVC. The benefit of this variation of the MVC design pattern was that was practical and minimalist. It dealt with the reality of modern gui widgets, whether they be GUI widgets or html DOM elements and created only a single class that mediated with a model. In a sense it was the simplest MVC possible, whilst retaining model and gui separation.\nNext steps As I learned more about the roles involved in MVC, and encountered variants that teased apart those roles more fully (like pureMVC) I became interested in upscaling my MVC approach a little so that it was more all encompassing and took into account whole-application considerations, like providing a central controller layer for housing many ‘commands’. Then I became interested in bootstrapping the wiring of whole apps with MVC architectures, and eventually in the swappability of guis and models - which led to HexMVC.\nHexMVC in a nutshell  TLDR: Write the application layer but don’t import or use any libraries directly. Wrap all library calls with Adapter objects, so that you can switch to other libraries easily.\n HexMVC says that there must be a view class that looks after the off the shelf GUI widget (or in the case of the browser, the DOM element). In the wild, the term “view” is ambiguous and sometimes means the gui adapter or the gui or both. I use the term view adapter for the class that looks after the widget/DOM element.\nSo far this is not controversial. HexMVC then goes on to say a few more interesting things:\n  Firstly, that models and GUI widgets should be treated on an equal footing, and be “adapted”.\n  Secondly, that generic, application eventing should occur between adapters and a central controller - any private eventing between the gui and its adapter should remain private. In the case of model adapters, they implement all the eventing and the models remain pure.   Lastly, the application and controller are bound together as the “application hub”, which may be split into many command objects. The application layer talks to the orbiting sattelite functionality via the adapter interfaces, and thus the application is insulated from changes in the “implementation”. Adapters can, more efficiently, also talk to each other directly, but again, only through the adapter interfaces.\n  More broadly, the HexMVC approach is wired up through dependency injection and eventing and as you may have noticed, the use of adapters - more specifically families of adapters - so that different implementations can be plugged in without the application noticing. An adapter is essentially a ‘driver’ you install for a particular implementation being used - like a new printer driver for a new printer. That’s where the ‘hex’ comes into it, from the ‘hexagonal’ architecture pattern idea (later renamed “ports and adapters”).\nRules and Roles: Note: when I say ‘notifies’ I mean via notifications via eventing - which is managed/wired up by dependency injection - and not through layers actually knowing about each other.\n view layer notifies controller, model layer usually does not notify controller, but it could. model layer often efficiently notifies view layer directly, yes. view layer can read from model later directly, yes - but not modify it. controller can manipulate both model and view layers.  Layered Architectures I had always been fascinated by the idea of pluggable, modular application designs where you could plug in decoupled services/functionality into an app. Its a truth that adding functionality adds complexity almost exponentially - it becomes harder and harder to add features without introducing problems and inteference. I wanted a way out of that.\nSimple layering:\nA recent talk I gave on layered architectures reinforced the benefits of layering. However I found numerous people talking about the limitations of having the model ‘at the bottom’ of the layering stack. Plus lots of people were introducing an ‘infrastructure layer’ which stood vertically and had access to all layers. Finally, there were all these techniques for breaking out of layers, like broadcast notifications, eventing and dependency injection. So I got to thinking that maybe a different metaphor was needed, something a bit less vertical, and more like a circle.\nPossible evolution of layering\nWhen teaching design patterns courses including sessions about the adapter pattern, I would always end that particular session with the idea of using adapters as a way of insulating an app from the ‘bad outside world’ and adapt all external libraries. It was a radical, intriguiing idea - possibly a bit impractical and theoretical. So I ended up trying to build such a system anyway.\nAlistair Cockburn described a hexagonal architecture (later renamed Ports and Adapters pattern) which had services, gui’s, db, etc. around a central app. The application talked to adapters. The hexagonal architecture\n  This was the architecture I was intrigued by, but there were no reference implementations, and a lot of the writing on the webpage seemed theoretical and sketchy - like a half baked idea that nobody had actually tried. So I went ahead and built something similar - as simply as possible.\nI had always liked the PureMvc pattern, which was a bold retelling of the mvc architecture pattern. It described all the roles in an mvc architecture, and provided strict rules as to who knows who and how the sequence of interactions went. I wrote a number of articles about it.\nIt is a framework and has been ported to most languages. In practice I found it effective though tedious because of all the rules and registrations - and with its home grown eventing system it is tedious to declare event types, register handlers etc. I wanted something simpler, whilst keeping the good stuff. When I implemented an early/partial HexMvc version of a minimal PureMvc sample app, I was able to remove all references to the PureMvc framework and simplify the resulting application - the cost was a dozen extra lines of code to get it working the same. But being able to remove an entire framework and get the the same result was certainly encouraging.\nHexMVC Fundamentals App in the centre We start the basic hexagonal architecture with the idea of application in the core.\nThe application talks to interfaces, which are implemented by adapters.\nThe controller too, lives inside the central app hub.\nThe App  Holds refs to the core adapters (server, gui, model) Wires the core adapters so they know about the app App has job of housing the domain logic and app logic and thus the controller/commands. App sometimes mediates - calls come in and the app sends them out again. Defines one or two methods that an adapter may need (e.g. for that adapter to communicate some info to or get some info from another adapter) Mediation role. Defines Boot() and Shutdown() Injects multicast dependencies  Note the app does not instantiate objects - this is done by the bootstrapper.\nLayers as slices through the App circle. Thus we have taken top down layering and making it round a “Application Hub” instead. If you follow one particular event flow e.g. from gui to model and back again, you get a traditional view-controller-model top down layered cake.\nBut by allowing for more event flows and more services plugged in to a hub, we get a more flexible and interesting architecture, which is still a layered one. Thus you can get different layers depending on where you start and where you finish. Nobody is ‘on top’ or ‘on the bottom’.\nE.g. I add a server layer which provides REST services to the web, as an example of another significant layer.\nInterfaces Everywhere As GOF says in its introduction, one of the main two OO principles is “Program to an interface, not an implementation”. This allows clients to be decoupled from the implementation.\nAdpaters Everywhere In HexMvc we write adapters to implement the interfaces. The adapters’ purpose is to provide a level of indirection between the application logic and the substantive thing the application is talking to.\nHexMvc Control flow In HexMvc I pretty much follow the PureMvc rules and call sequences.\nThe rules  The Model notifies, but doesn’t listen and ultimately knows nothing about anything else in the system. View sends messages to controller and listens for incoming messages from model. Controller commands are created and invoked by certain messages and they send out messages if they want to.  The typical call sequence Here the gui adapter raises command events and listens for notification events. A command event is an event that causes the controller to do something (which may then indirectly instantiate a command object to the work). A notification event would be e.g. the model layer saying ‘something has changed’. Controllers act directly on the model / model adapter layer and don’t typically raise events. The model layer doesn’t listen for events, but can generate notification events.\nController The controller makes available an abstract chunk of information that the view renders, so in that sense a HexMvc controller is like a traditional web controller class.\n  Controller listens for GUI command messages\n  Responds by implementing the business logic - optionally uses command objects to do the work\n  Talks to the model adapter and other adapters\n  Offers other functionality that can get invoked directly (not just from eventing) e.g. from the server service. Provides information as implementation independent, abstract chunks e.g. dictionaries, datastructures, vanilla app objects.\n  Note that controllers shouldn’t get too ‘view specific’ - these roles are performed by the View Adapter. Choosing templates and constructing juicy, view specific data structures are not jobs for the controller.\nEventing I use a simplified eventing system (see in depth discussion on eventing later in this document).\nApplication specific eventing vs gui eventing The adapters is where you implement application specific eventing. The Gui itself may have some eventing but this is gui implementation specific and not to be confused with the eventing that the application uses. Its the gui adapter for example, that intercepts gui specific eventing and rasies the appropriate application event. The gui adapater similarly listens for the appropriate application event and does something with it, like poke values into controls on a windows form.\nThe Bootstrapper Instantiation of adapters and the things they adapt (the ‘ring’ objects) should be outside the App. Theoretically you inject different ring adapters into the app and the app will still work. That’s the whole point.\n Instantiates all instances of objects Injects normal dependencies, wires up the ring adapters to talk to each other if needed Can be considered configuration  Dependency Injection The bootstrapper has aspects of a factory in that it instantiates the correct objects.\nIt then uses dependency injection config bootup everywhere to configure\nWhen you wire up your objects to point to each other you are doing dependency injection - as long as the objects are not instantiating instances of the objects they are pointing to themselves, and the injection is done from ‘outside’. The objects being injected are thus depending on an abstraction or interface - which is injected later.\nHexMvc in Detail All in One HexMvc Diagram\nApp to GUI boundary Swappable guis, just rewrite the gui adapter\nView We should distinguish between the view adapter and the view ‘renderer’/controls. The latter ‘ring object’ can be hand crafted by code or built by nice high level form building tools - and should have absolutely no knowledge of the app.\n Views renderers are totally dumb.  View Adapter on the other hand know both about the dirty details of view controls and how to populate them. The View Adapter binds to or overrides GUI specific events and translates these into application events. Conversely the GUI adapter listens for relevant application events (e.g. model ‘I have changed’) and responds by updating the real GUI. The View Adapter talks directly to the app/controller to get information. Just as with the server adapter, this information is made available as an abstract chunk of information that is independent of the view. Its up to the view or ther server to ‘render’ it appropriately.  For example, its the gui adapters that recieve events from e.g. the model, regarding things that change and need to be re-rendered. Anytime you switch GUI implementations, you put in place a different adapter - ensuring it hooks into and participates in the same eventing infrastructure.\nThe interface to your alternate gui adapters is, of course, the same. Its the gui adapters that recieve events from e.g. the model, regarding things that change and need to be re-rendered. Anytime you switch GUI implementations, you put in place a different adapter - ensuring it hooks into and participates in the same eventing infrastructure.\nTypically the gui adapter listens for application events and updates the particular gui in a particular way.\nApp to Model boundary Model The Model contains the raw domain classes and their relationships. The model adapter interface is what the app deals with.\nHexMvc favours a thin model approach where the majority of domain and business logic is kept in the controller because\n A thin model means you can rebuild a model rapidly as needed, for different implementations (see more info on this below). You preserve the hard domain and business logic in the controller, which never changes. The App and Controller are the core which never changes. A centralised coordinated domain logic with undo/redo in a central place is something I’m trying out at this stage of my programming!  Here you can see that when the application talks to the model, it talks via an adapter, via an interface.\nEventing in the model adapter Similarly the model adapter is the where model ‘onchange’ application events are raised. The model remains pure and simple. The model’s “Add Some Entity” operation is implemented by the model adapter, which pokes the information into the pure model and then its the model adapter which raises the relevant onchange application notification event.\nModel no longer at the bottom It may seem strange to have the model as a sattelite rather than in the heart of the application. But to put the model inside the app centre would to make the same ‘mistake’ as putting the model at the bottom of the traditional layer cake. Its not necessarily wrong, its just inflexible and not in the spirit of pluggability.\nWhy have multiple model implementations? This lets you switch out the model for a differently implemented model. Now this may sound strange - swapping out a different model, as the model is typically a core part of an application and independent of any particular implementation. But you need to be able to do this because I found that when implementing a ORM model which auto persists to a db, I had to annotate my classes with a certain syntax. In my regular OO model, none of this syntax was needed. So I couldn’t use the same source code for my model - my model was not ‘pure’ enough. Implementation details were, rightly or wrongly, creeping into my pure model. Further evidence of this was that my model implementations operated differently - my OO version had to work harder to store collections, whereas the ORM model had that functionality for free, due to the underlying SQL db.\nThus switching model implementations is no different to switching out gui implementations.\nThat’s why models are out on the ring and not in the centre - they are not reified but are just another application service. This also means that a thin model approach is best, so that business logic is not duplicated, and can be kept in the core app - which is where I like it best these days anyway.\nDifferent ‘back ends’ to a model Model swappability is not to be confused with the idea of different ‘back ends’ to a model. When you keep the model code the same and switch in different persistence or database backends - that is merely a nice feature of a particular model implementation. Its an implementation which has some persistence flexibility. But if I don’t want to conform to that particular e.g. Ruby ActiveRecord paradigm, with its particular model annotations and syntax - I don’t have to. HexMvc allows me to swap in a totaly different model paradigm, with entirely different model syntax and annotations - its completely flexible.\nModel to Persistence boundary As we said earlier, the model adapter provides the overall interface to the ‘model subsystem’. The model adapter methods include model manipulation and access methods, as well as persistence methods. e.g.\nBehind the model adapter is the pure model and possibly a persistence object. The persistence class is itself adapted behind an interface, so that different persistence techniques can be used. The model adapter coordinates both the pure model and the swappable persistence class.\nThe persistence class knows about the model, it has to, in order to get persistence data in and out of it.\nThe underlying real model class provides the model methods, obviously.\nThe underlying real persistence class provides the persistence methods.\nDifferent persistence techniques Typically you do not need an explicitly coded persistence object ‘backend’ if your model already uses the ORM pattern, and persistes automatically to a db. And usually you can choose the db vendor through config files.\nBut if you are hand-crafting your own persistence backend mechanism which can be swapped for other persistence mechanisms, then the following design seems a reasonable approach.Is an abstract persistence interface possible? An alternative ‘swappable persistence backend approach’ I tried was to have the model communicate with an abstract persistence interface which you can swap - this prooved too hard. But again, if you can pull it off, that’s fine. Just hide all this stuff behind the Model Adapter.\nSwitchable db persistence backends to a ‘particular’ model. Here we are talking about a model that has swappable persistence backends. As mentioned earlier, the idea of different persistence/implementation ‘back ends’ to a model is to be distinguished from swapping entire model implementations.  When you swap model implementations your model code changes and has different code syntax annotations and implementation logic. When you swap persistence back-ends, the model code stays the same and a configuration file lets you switch in different a persistence / database backend.  On file names and connection strings The Model Adapter LoadAll() optionally does take a filename as a parameter e.g. LoadAll(‘mydata.txt’). This is fine for when the app wants to specify a persistence file to load/save to and is the common case catered for. If you are e.g. persisting to a database using a connection string, there is now more information to be specified than a mere filename e.g. database name, username, password etc. We arguably should not contaminate the interface of ModelAdapter with all sorts of Persistence specific methods and parameters - after all, the ModelAdapter must be a straightforward interface that can be implemented by various persistence implementations - so that persistence implementations can be swapped in/out seamlessly.\nThe solution is to move this problem into the configuration/wiring/bootup stage where the Persistance object is instantiated and configured. For example, In the case of Sql database persistence, a Persistence class is not needed since the Model is auto persisted. In this case the ModelSqlAdapter implements the required LoadAll methods by doing nothing. And the connection string etc. is done in the configuration.\nApp to Server boundary Server thread is like another gui layer, just write a different server adapter\nCareful with your call sequence A slightly different call sequence is needed when providing a server interface to your app.\n You can’t simply have the server subscribe to model onchange notifications, because the server must prepare and return a response immediately - at the end of the incoming request.  You can’t can’t have the server raise an application event which the controller then picks up and acts on, because you typically want an immediate response so that a response object can be built.  This means the server must call directly into the controller and get the information it needs, and the controller must call directly into the model (adapter) to make changes and get results. This is not strange, this is simply the web mvc approach.\nIts not necesssarily a synchronous / asynchronous issue Note that this is not a synchronous / asynchronous issue - since most eventing whilst appearing semantically asynchronous is actually all implemented synchronously. Its more an issue of incoming function calls on the server needing to do all their work within the same function call, whereas with an eventing approach, work is broken up across several function calls and returned using several function calls.\nImplications This all means that controller commands must be able to be invoked directly or invocable as a result of an event being raised.\nNote that the model can still send its onChange notifications, its just that the server is not hooked up to them - but other subsystems might be. So this allows for webpages to indirectly affect a desktop GUI view - neat.\nExample of using the REST api via a web browser. The GUI updates itself simultaneously!\nAside: Threading introduces a bit of complexity, watch out for communication between threads, added a mutex method on the app, which can do anything needed\nAppendix Adapters More elaboration on HexMVC adapters and Adapter Patterns in general.\nEvents More elaboration on HexMVC eventing and Event Patterns in general.\nHexMVC Source Code Here is the directory of code used to develop the ideas in this article. It contains various versions of implementations, mainly in Python and .NET. I need to document it sometime.\nhttps://github.com/abulka/pynsource/tree/master/Research/hexmvc\nP.S. There is no reason it is located in the pynsource GitHub project directory - it just happened that way. It should be moved to its own repository.\nPresentation in 2012 I presented the HexMVC pattern to the Melbourne Patterns Group in 2012.\nRe the talk - yeah it was full on 1.75 hours, 10 people - quite a complex topic. I got some useful feedback re points that could be clearer etc. A couple of heart felt applauses and one guy came up to me and shook my hand with enthusiasm. A few others didn’t say as much as I hoped - I guess I was looking for a bit more feedback. I probably didn’t pause enough and allow audience participation like I normally do - I just barrelled through the material a bit. Its not easy, esp. - when presenting something complex and new-ish for the first time.\nPost Presentation Clarifications Thanks for those who came and listened to my HexMvc talk last night. If anyone is interested in accessing and commenting on the google doc which will soon be an article on my website, please email me for access. I was also hoping for some ‘peer review’ on my talk so please send me your thoughts if you get time - I would really appreciate the feedback.\nMeanwhile here are some more considered responses to a few of last night’s questions:\nQ: ‘What’s the distinction between the model and the model adapter’ A: The application should treat the model adapter as if it were the model. And as Stewart reminded me of my own point (thanks!), the adapter adds the application eventing so that the model is not contaminated with that eventing infrastructure stuff. The adapter also hides model specific operations that are done in different ways e.g. FindThings() lives in the model adapter and is implemented totally differently in the OO model adapter implementation vs. the SQL model adapter implementation (which utilises a fast sql query). Yes, there seems to be some flexibility re whether you put model subsystem functionality into the model or its model adapter. Certainly business rules and exceptions I would put in the controller, and keep the model subsystem thin.\nQ: ‘The server becomes just another view’ A: Yes - and yey - it all turns out to be very symmetrical. Though because the services offered by the server REST api are available via http then you might access these services without any sort of browser/view - just trawling for data and making command calls into the application. Perhaps this subsystem should be called ‘services’ not server? Done, I’ve renamed it.\nQ: ‘Why in the diagram does the App point to the GUI but in fact the GUI gets updated directly from the model via notifications’ A: Good point, my ‘arrows’ and their directions could have been made clearer. The connection between the core app and the gui is one of composition and rarely used. Its the eventing from view to controller and from model to view that forms 90% of the communication with the view. My sequence diagrams showed this, but my overal structural diagram was, let us say, a bit more abstract and loose re this point. Here is an updated diagram that should make things clearer:\nPOST TALK THOUGHTS:\nLook at the ideas of ‘obvious’ framework which is based on Uncle Bob’s thoughts. It has an independent APP and a plugs/jacks approach.\nAsked for more info in a github post.\n","categories":"","description":"Hexagonal Architecture pattern + Model View Controller (MVC)","excerpt":"Hexagonal Architecture pattern + Model View Controller (MVC)","ref":"/patterns/hexmvc/","tags":["Design Patterns","MVC","Controllers","Javascript"],"title":"HexMVC"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/javascript/","tags":"","title":"Javascript"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/mvc/","tags":"","title":"MVC"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/gui/","tags":"","title":"GUI"},{"body":"Andy’s GUI Showdown - The same application, implemented in various ways - which is better, cleaner, more understandable etc?\nLike the TodoMVC “Rosetta Stone” project, but uses a different example application, and includes Python as well as Javascript implementations.\n This project was originally intended to see if an ECS (Entity Component System), which is commonly used in building games, could be used to implement a “normal” GUI application.\n Five Javascript implementations: Live Demo of all Javascript implementations.\n   Technique Lines Comment     OO 279 Gui wired via OO (Object Oriented Models with Observer)   MVCA 383 Gui wired via MVCA Architectural Pattern 🆕!!   ECS 228 Gui wired via ECS (Entity Component System)   PLAIN 154 Gui wired via plain JQuery   VUE 58 Gui wired via Vue.js    Two wxPython implementations:    Technique Lines Comment     ECS 344 Gui wired via ECS (Entity Component System)   OO 290 Gui wired via OO (Object Oriented Models with Observer)    Counting the number of lines is approximate. Implementation code that is a convenient extension to a library or framework is not counted. E.g. Vue.js itself is not counted, obviously. ECS uses Jecs library, which is not counted, nor are some extension functions I added. OO technique uses an observer design pattern, whose short implementation code is not counted - its the least I could do to help the OO approach which came in at a whopping 300 lines.\nThere is an index.html launch page to get to all these implementations, as well as a debug view showing models in real time as you work with the GUI.\nThe Application being implemented Specification Whilst not that complex, this application has a few interesting nuances which challenge any implementation. The main nuance is that whilst the “model” can be edited and manipulated (made uppercase, set to certain phrases) the top header area displays the model according to various “display options”. Changing the display options changes how to top area appears but does not change the model.\nSpecifically, the behaviour we are implementing is:\nModel:\n a welcome message, default “Welcome” a user, with a firstname and surname, default “Sam Smith”  model = {\"welcome_msg\": \"Welcome\", \"user\": {\"firstname\": \"Sam\", \"surname\": \"Smith\"}} The GUI displays:\n the welcome message twice  top left: pure message top right: message + user   text entry, which allows editing of the welcome message text entry, which allows editing of the user name and surname checkbox1, which toggles the model welcome message uppercase/lowercase checkbox2, which toggles the top right user to uppercase (not via model) button1, which resets the welcome message to “Hi” button2, which resets the user to “Fred Flinstone”  Commentary More commentary and evaluation of the techniques to come.\n","categories":"","description":"","excerpt":"Andy’s GUI Showdown - The same application, implemented in various …","ref":"/blog/2022/02/11/gui-showdown/","tags":["Design Patterns","GUI","Controllers","Javascript","Python","Vuejs","Observer","MVC"],"title":"GUI Showdown"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/observer/","tags":"","title":"Observer"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/vuejs/","tags":"","title":"Vuejs"},{"body":"These blog posts are often based on presentations that I have given to live audiences at various programmer enthusiast user groups or conferences.\nTalks given but unfortunately no website presentation materials  2007 July - Object Role Modeling - What is it? 2006 October - More on UML Pattern Tools 2004 October - Design Patterns found in the C# Language 2004 June - Object Thinking - Book Review 2003 Aug - Pattern Automation and UML 2003 January - Object Orientation, UML and Delphi 2002 December - Mediator Dialog Patterns 2002 October - An Introduction to Refactoring  Blog Entries in Date Order  2019 - HexMVC Design Pattern (coming soon…) 2018 June - How I used the Python AST capabilities to build a Python to Rpn converter 2011 - Developing a Layout Algorithm for UML diagrams 2011 - Easy Dependency Injection and Mocking in Ruby 2011 - Recursively Cloning Directories in Ruby using Hard Links 2010 - Ruby vs. Python list comprehensions 2010 - Cairngorm vs PureMVC Model to View notifications 2009 April - Refactoring to PureMVC 2009 March - PureMVC - Architectural Pattern - Minimal wxPython Example 2009 Feb -Towards a central repository of Design Patterns 2009 Feb - UML and Design Pattern support in Netbeans 6 2009 Jan - Designing software visually (incl. Executable UML and MDA) 2008 Sep - State Pattern in Flex 3 2008 March - Extract Composite - Refactoring to a Pattern 2007 Nov - Thoughts on Closures 2007 July - Object Role Modeling - What is it? 2007 January - Teaching 23 patterns in 3 days - Experiences from the bunker 2006 October - More on UML Pattern Tools 2006 March - Tooled Composite - Architectural Design Pattern 2005 July - Object Relational Mapping Design Pattern - Using SQLObject 2005 March - Getting from State to Bridge Design Pattern - A Journey 2004 October - Design Patterns found in the C# Language 2004 August - Blackboard Architectural Pattern 2004 June - Object Thinking - Book Review 2003 Aug - Pattern Automation and UML 2003 January - Object Orientation, UML and Delphi 2002 December - Mediator Dialog Patterns 2002 October - An Introduction to Refactoring 2002 September - Null Object Design Pattern 2002 September - Using Design Patterns in Real Projects 2000 January - Patterns, ModelMaker \u0026 Beyond  Slideshare slides https://www2.slideshare.net/tcab22/edit_my_uploads Scribd pdfs https://www.scribd.com/user/5064053/tcab22\nFiles in these directories will be listed in reverse chronological order.\nMy articles on Medium I’ve been publishing a lot on Medium recently. Why? Because the articles seems to get more widely read, and the Medium editor is so simple and produces beautifully formatted articles.\nBuilding a deployable Python-Electron App\nBuilding a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps - which I outline here.\nIt gets over 1,000 reads a week for some reason, more than any of my other medium articles.\nAsync/await for wxPython\nPython 3 GUI apps with asynchronous functionality\nGetting Python and wxPython apps into the Ubuntu app store\nHave you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.\nDjango View logging is back-the-front\nHow the order of view request log messages in Django apps might be confusing, and how to fix it.\nTodoMVC implementation articles Here are my two recent articles implementing the classic Javascript TodoMVC app in various ways. These two articles shows you how to design apps. Its an alternative to using a modern javascript framework like Vue, Angular or React.\n Classic - OO, Controllers and Events ECS - using a game architecture  TodoMVC implemented using traditional OO, Controllers and Events.\nTodoMVC implemented in a classic Object Oriented way - which includes running code you can run in your browser.\nTodoMVC implemented using a game architecture — ECS.\nLiterate Code Maps is my website dedicated to a new diagramming technique based on UML but more useful.\n","categories":"","description":"","excerpt":"These blog posts are often based on presentations that I have given to …","ref":"/blog/2022/01/21/history-of-this-blog/","tags":"","title":"History of this Blog"},{"body":"Diagramming Methodology Specification\nLiterate Code Maps are diagrams which help programmers understand the structure and behaviour of source code.\nExample Code Map diagrams differ from UML diagrams in that they focus on real source code fragments and lots of rich-text formatted story-telling narrative. They combine class and sequence diagrams into the same diagram, offering step by step numbering to follow the behaviour of a use case story.\nThe 5 laws of literate code mapping  Boxes represent any scope or namespace - be creative Show structure and behaviour in the same diagram Code compartments in boxes contain code fragments and richly formatted narrative Lines representing function calls between boxes are numbered to tell a story Cross reference numbers can appear anywhere to associate ideas  Think of literate code maps like UML class diagrams where the classes are now boxes which can represent more things, and lines represent function calls as well as structure. Boxes contain one or more extra compartments containing real code fragments and rich narrative.\nSee full website dedicated to Literate Code Mapping here.\n","categories":"","description":"","excerpt":"Diagramming Methodology Specification\nLiterate Code Maps are diagrams …","ref":"/projects/big-ideas/lcodemaps/","tags":["Diagramming","Thoughts","UML"],"title":"Literate Code Mapping"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/thoughts/","tags":"","title":"Thoughts"},{"body":"General Software Architecture Consulting I will work with you to plan your next software project, ensuring you are using the latest practices and technologies.\nI oversaw the building of a large software applications and technical teams at Austhink Software (as Chief Technical Officer), Telstra (Python Team Leader) and many other similar leadership roles.\nRapid ‘Staff Onboarding’ Service We will work with your team - hands on, to\n  Oversee the documentation of your critical project creating:\n  An engaging project overview and architecture summary document (five pages).\n  Five key GitUML project diagrams incl. some as Literate Code Maps.\n  Two quality tutorials.\n  Develop rapid onboarding programs for new staff that use this documentation, together with traditional onboarding through handovers, working with automated tests etc.\n  Ensure knowledge is captured when staff leave\n  We can audit your project documentation to protect your company IP and to support governance\n  Our consulting pays for itself through increased programmer productivity and the ability to scale projects more rapidly.\n  ","categories":"","description":"","excerpt":"General Software Architecture Consulting I will work with you to plan …","ref":"/about/consulting/contracting/","tags":"","title":"Contracting"},{"body":"Obect Oriented Programming \u0026 Design Patterns Training Courses\nElevate the effectiveness of your entire programming team - Andy can deliver his existing or a customised Design Patterns Course to your entire programming team - at your company’s premises or via Zoom.\nI have delivered training courses across Australia incl. at The Australian Synchrotron.\nConsulting and Mentoring is also available. Contact Andy for availability.\nCourse 1: Design Patterns Code: IM500-020\nSeries: Computer Professional\nDuration: 2-3 days\nLocation: Onsite (your location within Australia (or ask))\nCost: $ Email for pricing for up to 6 people - per day. $220 per extra person - max 10 people. Plus GST.\nRoom: Trainer requires a whiteboard, projector. Computers for attendees are not needed. Course materials: Are supplied (approx 320 pages) - option for client to print and bind if that is more convenient. Contains code examples, whiteboard screenshots, tips, UML diagrams, advanced discussions etc.\nThe front cover of the comprehensive training materials supplied during this course.\n Sample pages from the course manual.\n### Overview\nThis course provides students with the necessary knowledge and skills required to understand and use the fundamental 23 design patterns as outlined in the classic book “Design Patterns”. Participants will be able to use the vocabulary of patterns to communicate to software engineers in order to design superior, maintainable, cutting edge software.\nOutline Course Outline\nA brief history of design patterns - the patterns movement, how the GOF book was created, why a knowledge of design patterns is crucial to today’s software developers. Where did patterns come from, what is the role of Christopher Alexander. Who are the key patterns people around the world. How has Australia been involved in the world patterns conference scene.\nDetailed presentations of 20 design patterns: including: state, strategy, adapter, mediator, template method, bridge, factory + more.   “State Pattern” can get rid of lots of if/else spaghetti code\n  “Strategy Pattern” can make your application more pluggable.   “Adapter” is one of the most important fundamental patterns.   “Mediator Pattern” can reduce coupling between classes and reduce complexity.\n  Understanding the “Template Method Pattern” requires that you know your object oriented principles and can make your code base more organized.   “Bridge Pattern” is a little complex but once you have invested in it, allows you to switch implementations with a single switch.   The factory patterns (“Factory Method” and “Abstract Factory”) are core patterns relating to the creation of instances of your classes.   Many more patterns like this are presented during this course. Also covered are topics like:\n How patterns are used together – most people are surprised when shown how patterns can be combined. We will look at the notion of “roles” in classes and look at diagramming techniques for showing overlapping patterns in UML diagrams. Design Pattern Software - A presentation of a couple of UML design patterns tools for windows including Sparx Enterprise Architect and IBM Rationale Rose. Discussion - Current research directions and the future of patterns (both theoretical and tools). Classic and cutting edge books and ideas are discussed (time permitting).  Outcome and Benefits After completing this course, students will know how to:\n Describe the history of patterns development. Appreciate the benefits of a patterns approach to programming design. Describe the detailed design, purpose and behaviour of 20 of the original GOF design patterns. Communicate with other developers using the language of patterns. Use design patterns to improve the design of new and existing software. Implement various patterns in various programming languages. Combine different patterns so that they work together in a software design Understand some of the design patterns contained in such frameworks as.NET and Java Choose from a variety of UML tools which automate the application of patterns  Prerequisites: Attendees should have:\n An Understanding of object oriented programming techniques Experience with an object-oriented programming language such as Python, Java or C# Some exposure to UML diagramming models.  The 2 day course can only cover 2/3rds of the total material in this sheet. As such only approximately 12 patterns can be covered, and some topics like architectural patterns, UML automation tools etc cannot be covered. However attendees can to some extent customize the course content within the time constraints. The 3rd day of the course can be delivered at a later stage as a one day “top up” course.\nDetail Course Detail\n   Introduction to Patterns   What are Patterns?\n  Pattern Purposes\n  The GOF patterns\n  Pattern classifications\n  The Use of UML\n  Relationships between patterns\n  When to use patterns \u0026 when not to\n    Patterns: General Issues   Reading a pattern\n  Intent, applicability, forces of patterns\n  Solutions \u0026 Consequences\n  Implementation issues - language specific\n  Anti-patterns\n  Re-factoring of patterns\n      Creational Patterns Abstract Factory\nBuilder\nFactory Method\nPrototype\nSingleton\n  Structural Patterns Adapter\nBridge\nComposite\nDecorator\nFacade\nFlyweight\nProxy\nNull Object\n  Behavioral Patterns Chain of Responsibility\nCommand\nInterpreter\nIterator\nMediator\nMemento\nObserver\nState\nStrategy\nTemplate Method\nVisitor\n    Architectural Patterns Layers\nBlackboard\nReactor\nModel-View-Controller\n  Patterns in Frameworks Java\n.NET\n  Advanced Blending Patterns\nAutomating patterns – UML tools and IDE’s\nThe future of patterns\n    Note: Some of the advanced patterns and topics, above, are subject to time constraints and may not be covered in full. Courses can be customised to ensure you learn about the area you want.\n Course 2: Object Oriented Programming and Design Code: IM500-021\nSeries: Computer Professional\nDuration: 2 days\nLocation: Onsite (your location within Australia (or ask))\nCost: $ Email for pricing for up to 6 people - per day. $220 per extra person - max 10 people. Plus GST.\nRoom: Trainer requires a whiteboard, projector. Computers for attendees are not needed. Introduction to OO, UML and Design Patterns Course\nThis course is designed to be a gentler introduction to Design Patterns.\nCourse materials: Are supplied (approx 120 pages) - option for client to print and bind if that is more convenient. Contains code examples, whiteboard screenshots, tips, UML diagrams, advanced discussions etc.\nDay 1:  Introduction to Object Oriented programming Transitioning from other languages Classes, Objects, Methods, Attributes, Properties What are Interfaces and why use them Poly-what? - What is Polymorphism Dynamic vs. Static - why have types OO language features in Java / C# / Python / Flex (your choice) What good Object Oriented systems look like Traps of OO - fragile hierachies - the trend towards composition not inheritance Dependency Injection Basics of modelling in UML UML notation How to use UML in day to day design Overview of modelling tools (Visual Studio, Enterprise Architect) A brief history of design patterns - the patterns movement, how the GOF book was created Why a knowledge of design patterns is crucial to today’s software developers.  Day 2:  Detailed presentations of 6-7 design patterns: including: state, strategy, adapter, mediator, template method, bridge, factory. “State Pattern” can get rid of lots of if/else spaghetti code. “Strategy Pattern” can make your application more pluggable. “Adapter” is one of the most important fundamental patterns. “Mediator Pattern” can reduce coupling between classes and reduce complexity. “Template Method Pattern” requires that you know your object oriented principles and can make your code base more organized. “Bridge Pattern” is a little complex but once you have invested in it, allows you to switch implementations with a single switch. The factory patterns (“Factory Method” and “Abstract Factory”) are core patterns. How patterns are used together UML extensions used to document patterns   About the Trainer: Andy Bulka has been teaching design patterns for five years, running three day workshops covering all the 23 GOF patterns.\nHe is an active member of Melbourne Patterns User Group giving regular presentations and talks. Andy was Local Conference Chair at the Australian Koala Plop Patterns Conference 2002, and is author of several papers on Design Patterns and Software development ? see his patterns and blog at www.andypatterns.com\nAndy Bulka is principal consultant at Wware Consulting. Prior to that, he was Technical Director and Chief Software Architect at Austhink Software www.austhink.com for four years (2004-2008), developing world class visualisation software in C# .NET and Flex 3 using agile methodologies, design patterms and 25 years of programming experience. Prior to that, Andy has developed software in many fields - consistently applying design patterns to numerous real world applications including windows desktop applications, web sites and even a commercial computer game.\nPatterns Related Positions 2004-2008: Trainer in Design Patterns ? running 3 day workshops covering all 23 GOF patterns. The course has been given over seven times in both Melbourne and Perth. Several jobs have been repeat courses for the same company (delivered to a different set of students).\n2000-present: Active member of Melbourne Patterns User Group giving regular presentations and talks. http://melbournepatterns.org/\n2002: Local Conference Chair, Koala Plop Patterns Conference, Melbourne Australia.\nwww.mcs.vuw.ac.nz/~kplop/aboutus.html\n1999-2008: Maintain website on research into software development: www.andypatterns.com\nRefereed Papers Bulka, A. (2003). Design Pattern Automation. In Proc. Pattern Languages of Programs 2002. Revised papers from the Third Asia-Pacific Conference on Pattern Languages of Programs, (KoalaPLoP 2002), Melbourne, Australia. Conferences in Research and Practice in Information Technology, 13. Noble, J., Ed. ACS. 1.\nhttp://crpit.com/Vol13.html\n2000-2002: Three patterns conference papers which have been presented at KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs) in both 2000 and 2001. My shepherds were Jim Coplien (MGM pattern), Ali Arsanjani (TI pattern) and James Noble (RM pattern). These final versions incorporate comments and reviews from the attendees of KoalaPlop 2000 and 2001.\nhttp://www.andypatterns.com/index.php/design_patterns\nvan Gelder, T. J., \u0026 Bulka, A. (2000) Reason!: Improving informal reasoning skills. in Proceedings of the Australian Computers in Education Conference, Melbourne July 2000.\nView\n2008: Visualizing Argument Structure using Hi-Trees. Tim van Gelder, Kim Marriott (Monash University), Peter Sbarski (Monash University), Dr. Daniel Prager, Andy Bulka. Proceedings of the 4th International Symposium on Visual Computing, Las Vegas, United States.\nView\nMajor Software Developed Rationale, bCisive, Hive - World class argument visualisation software suite, www.austhink.com Architect and CTO.\nReason!Able - Reasoning software in use in schools around the world, Programmer.\nPyNSource - Python code reverse engineering utility and UML modelling tool, Programmer.\nArchitect, Team Leader, Lead Programmer, Hunting Tank Software, Victoria (2001 - 2004). Combat Campaign Game.\nResearch Logo - Developed the educational programming environment “Logo” for the Australian Microbee computer - used by Australian schools. Lead programmer of a team of three. Wrote the manual/book Research logo : A logo programming environment, ISBN 0949309435 published by?Waitara, N.S.W. : Honeysoft Publishing Company, 1985.? Now held at The National Library of Australia.\n1991-1998 - Multimedia Toolbook programmer, developing many entertaining and effective training and educational CD titles for businesses around Australia, including\n Telstra BHP TAFE Unisys Telstra Learning Multimedia Asia Pacific Bookman Press Empire Ridge etc.  Contact Courses can be customised to suit your needs.\nAndy Bulka\nDesign Patterns Training and Consulting ABN 75 565 207 060\nWeb: http://abulka.github.io Email: abulka@gmail.com\n Phone: 0412 759 186\n Addendum: If you would like me to run a design patterns course or consult on your next software design, please check out my product page. There is also an open source Python UML tool you might be interested in, plus references to products I have developed over the years esp. the worldclass argumentation visualisation software Rationale and bCisive.\n","categories":"","description":"","excerpt":"Obect Oriented Programming \u0026 Design Patterns Training Courses\nElevate …","ref":"/about/consulting/training/","tags":"","title":"Training"},{"body":"Brew Moments Coffee Ratio Calculation App for Android phones and tablets, built using Dart and Flutter.\n Visit the Brew Moments home page Visit the Brew Moments playstore page  Status Free to download.\n","categories":"","description":"","excerpt":"Brew Moments Coffee Ratio Calculation App for Android phones and …","ref":"/projects/apps/brew-moments/","tags":["Flutter","Software Product"],"title":"Brew Moments"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/flutter/","tags":"","title":"Flutter"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/calculators/","tags":"","title":"Calculators"},{"body":"Print42 is a log tailing GUI program which optionally echoes log lines to thermal printer tape. Its like a modern thermal printer version of a ticker tape for tailing log files. It features display font size options, search and filtering. You can also annotate the output with text fragments that you type in - or screenshots that you paste in.\nAs well as physically printing from Free42, the Print42 software can also be used to print HP Prime screenshots (from either the emulator or real HP Prime hardware via the HP connectivity kit).\nOutside the world of calculators, Print42 can be used to ’tail’ log files (programmers take note) and to print graphic snippets from the web. Useful if you want to rapidly print information to stuff into your pocket or to study and annotate printouts of complex information, at your desk.\nIf you are looking for a useful, fun new gadget, you might want to consider buying an Epson thermal printer and trying Print42. However you can also use Print42 with your regular desktop printer, for free.\nThe website for downloads and further information is www.print42.atug.com\n","categories":"","description":"","excerpt":"Print42 is a log tailing GUI program which optionally echoes log lines …","ref":"/projects/apps/print42/","tags":["Software Product","Calculators"],"title":"Print42"},{"body":"Abstract Basically describes a lightweight, in-memory Object Database.\nClasses that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional “pointer” and “arraylist” techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved, especially when back-pointers are involved.\nUsing a Relationship Manager object to manage the relationships can mitigate these problems and make managing relationships straightforward. It also opens up the possibility of powerful querying of relationships, a very simple version of something like LINQ.\nIn a sense, an Object Database is an elaborate implementation of the Relationship Manager pattern. However the intent of the Relationship Manager pattern is lighter weight, to replace the wirings between objects rather than acting as a huge central database on disk - though persistence is built into Relationship Manager too.\nThe Official Pattern Note this pattern was written and presented in 2001 - quite a while ago! In 2020 the API of the Python Relationship Manager implementation was revised and improved - see full API documentation.\n Download as pdf.\nQuick Example The examples on this page use the modern v2. Python implementation.\nRelationship Manager has also been implemented in Python, C# (.net4 and .net core) and Java - see the Relationship Manager GitHub project for all implementation source code.\nInstallation pip install relationship-manager Usage from relmgr import RelationshipManager  rm = RelationshipManager() rm.enforce(\"xtoy\", \"onetoone\", \"directional\") x = object() y = object() rm.add_rel(x, y, \"xtoy\") assert rm.find_target(x, \"xtoy\") == y Benefits  Modelling relationships is easy and consistent Back pointer are free Using a query language (think LINQ) is possible over your objects Optional constraints ensure wrong wirings are not made  Traditional object oriented programmers wire up their objects manually using pointers and arrays, whereas database programmers save their objects in a database and let the database model the relationships.\nProgrammers often use ORM mappers to get the best of both worlds - objects which also have a representation in a database. Relationship Manager is another solution to being able to more easily model and query your objects - without needing a database.\nQueries You can make queries on the Relationship Manager instance:\n# query API def find_targets(self, source, rel_id) -\u003e List: def find_target(self, source, rel_id) -\u003e object: def find_sources(self, target, rel_id) -\u003e List: # Back pointer query def find_source(self, target, rel_id) -\u003e object: # Back pointer query def find_rels(self, source, target) -\u003e List: def is_rel(self, source, target, rel_id=1) -\u003e bool: Constrained Relationships You can enforce relationships. For example enforce() works like this:\nrm.enforce(\"xtoy\", \"onetoone\", \"directional\") The relationship is registered as being one to one and directional, so that e.g. when you add a second relationship between the same two objects the first relationship is automatically removed - ensuring the relationship is always one to one. Alternatively, the implementation could raise an exception (go into the source and change it if this is what you need).\nModelling relationships What methods do I put where when modelling relationships?\nWhat are all the possibilities of relationships between two classes?\nWhen looking at all the possibilities of relationships between two classes, you get\n one to one one to many many to one many to many  Then you have the variations generated by whether the relationships are either\n directional bi-directional  Finally, you have variations of whether you put pointer methods (e.g. set, get, add) on one class or the other, or both.\nFor example, assuming you have a two classes one on the lhs and one on the rhs - you could omit methods on e.g. the rhs. class, or you could go to the other extreme and provide a full range of methods on the rhs. class. I recommend that you use the table of relationship scenarios table to figuring out what methods to put where for each type of classic relationship you want to model. For example, to implement a one to many relationship between two classes X and Y, you would use template 4 or 5 (use the latter if you want bidirectionality)\nNote that some combinatorial possibilities do not make sense and are left out of the table below.  S means singular API - this makes sense for one to one relationships, or the many side (ironically) of one to many relationships. It consists of methods like get, set, clear. P means plural API- this makes sense where you are dealing with collections, a many concept. It consists of methods like add, remove, getall. - means no methods relating to the relationship have been implemented on that class.  Blank cells mean “not applicable”.\n   Scenario # see below directional bi-directional comments      one to one\n1 --\u003e 1 one to one\n1 \u003c--\u003e 1    #1. S -      #2. - S      #3.   S S using ‘bidirectional’ relationship, which creates two relationship entries   #3A.   S S alternative implementation using a single ‘direction’ relationship - the bidirectionality is figured out using the magic of rm.find_source()    one to many\n1 --\u003e * one to many\n1 \u003c--\u003e *    #4. P -      #5.   P S using ‘bidirectional’ relationship, which creates two relationship entries   #5A.   P S alternative implementation using a single ‘direction’ relationship - the bidirectionality is figured out using the magic of rm.find_source()    many to one\n* --\u003e 1 many to one\n* \u003c--\u003e 1    #6. - P      #7.   S P     many to many\n* --\u003e * many to many\n* \u003c--\u003e *    #8. P -      #9. - P      #10.   P P     An attempt at mapping the theoretical relationship possibilities\nThe above table shows all the possible relationship scenarios between two classes. It indicates various possibilities as to the methods you can add to either class. For example a one to many relationship where the “many” side has no need of any methods to see who is pointing at it, would use template 4.\nTable of Relationship Scenarios How to implement relationships using sets of Relationship Manager methods\nHere is a list of classic “relationship scenarios” (e.g. one to one, one to many etc.) and how to implement them using the Relationship Manager API.\nThe right hand side of the below table shows python code using calls to RM (relationship manager) using the shorthand notation for the function names. For long hand names just substitute in the appropriate name e.g. instead of RM.R() you would call rm.AddRelationship().\nNote: The method names below are just suggestions. Normally you would use better method names that pertain to your application domain.\n Instead of .addY(y) you might have addOrder(order). Instead of .getX() you might have getCustomer(). Instead of getAllY() you might have .getOrders() etc.  Here is the table:\n Look up the scenario you need to implement on the left, then use the template implementation on the right in your code.    Relationship Scenario Example Python Implementation   Implementing one to one relationships between class X and Y        #1.  1 → 1, directional, all methods on X\n Singular API No API ______________ ______________ | X | | Y | |______________| |______________| | | | | |void setY(y) |1 1| | |Y getY() |⎯⎯⎯⎯⎯⎯⎯⎯⎯→| | |void clearY()| | | |______________| |______________|  Note: The clearY() implementation needs to get a reference to y in order to call remove_rel(x, y, ...) which is done by calling getY() on itself.\n   class X: def __init__(self): rm.enforce(\"xtoy\", \"onetoone\", \"directional\") def setY(self, y): rm.add_rel(self, y, \"xtoy\") def getY(self): rm.find_target(source=self, rel_id=\"xtoy\") def clearY(self): rm.remove_rel(self, self.getY(), \"xtoy\")   class Y: pass     #2.  1 → 1, directional, all methods on Y\n No API Singular API ______________ ______________ | X | | Y | |______________| |______________| | | | | | |1 1| setX(x) | | |⎯⎯⎯⎯⎯⎯⎯⎯→ | getX() | | | | clearX() | |______________| |______________|     class X: pass   class Y: def __init__(self): rm.enforce(\"xtoy\", \"onetoone\", \"directional\") def setX(self, x): rm.add_rel(x, self, \"xtoy\") def getX(self): rm.find_source(target=self, rel_id=\"xtoy\") def clearX(self): rm.remove_rel(self.getX(), self, \"xtoy\")     #3.  1 ←→ 1, bi-directional, methods on both X and Y\n Singular API Singular API ______________ ______________ | X | | Y | |______________| |______________| | | | | |void setY(y) |1 1| setX(x) | |Y getY() | ←⎯⎯⎯⎯→ | getX() | |void clearY()| | clearX() | |______________| |______________|     class X: def __init__(self): rm.enforce(\"xy\", \"onetoone\", \"bidirectional\") def setY(self, y): rm.add_rel(self, y, \"xy\") def getY(self): rm.find_target(self, \"xy\") def clearY(self): rm.remove_rel(self, self.getY(), \"xy\")   class Y: def __init__(self): rm.enforce(\"xy\", \"onetoone\", \"bidirectional\") def setX(self, x): rm.add_rel(self, x, \"xy\") def getX(self): rm.find_target(self, \"xy\") def clearX(self): rm.remove_rel(self, self.getX(), \"xy\")     #3A.  1 ←→ 1, bi-directional, methods on both X and Y\nAlternative implementation of scenario 3, using \"directional\" and a backpointer method\n diagram as above     class X: def __init__(self): rm.enforce(\"xy\", \"onetoone\", \"directional\") # different to 3. # uses 'directional' not 'bidirectional' def setY(self, y): rm.add_rel(self, y, \"xy\") # same as 3. def getY(self): rm.find_target(self, \"xy\") # same as 3. def clearY(self): rm.remove_rel(self, self.getY(), \"xy\") # same as 3.   class Y: def __init__(self): rm.enforce(\"xy\", \"onetoone\", \"directional\") # different to 3. # uses 'directional' not 'bidirectional' # redundant call since already called in X's constructor def setX(self, x): # different to 3. rm.add_rel(self, x, \"xy\") # source and target params swapped def getX(self): # different to 3. rm.find_source(self, \"xy\") # uses 'find_source' not 'find_target' def clearX(self): # different to 3. rm.remove_rel(self, self.getX(), \"xy\") # source and target params swapped      Notes on Scenario 3 and 3A:\n  When you create a bi-directional enforcement rule (Scenario 3) with a call to rm.enforce(\"xy\", \"onetoone\", \"bidirectional\") you are actually causing rm to create two relationship entries in the rm. This means you can reliably use a rm.find_target(source=self) call from either side, knowing there is a relationship in both directions.\n  When you create a directional enforcement rule (Scenario 3A) with a call to rm.enforce(\"xy\", \"onetoone\", \"directional\") or leave out this call altogether, you are causing rm to create only the relationships that you ask for. Thus classes on the 'target' side of a relationship cannot call rm.find_target(source=self) to find out who is pointing to them. They can however, thanks to the magic of rm, call rm.find_source() to derive this information.   This means bidirectional relationships never actually need to be used or declared, 😲, since an implicit back-pointer (i.e. a back reference) is always deducible using rm.find_source(), when using a Relationship Manager! In fact a bidirectional relationship creates extra entries in the rm datastructure, and slightly more overhead in performance (maintaining both relationships e.g. in the case of creation and removal).\nHowever you may still want to declare a bidirectional relationship for its semantic value in your particular business logic domain, or for domain modelling accuracy - or even just for your own implementation preferences.      Implementing one to many relationships between class X and Y      #4.  1 → *, directional, all methods on X\n Plural API No API _____________ ______________ | X | | Y | |_____________| |______________| | | | | |addY(y) |1 *| | |getAllY() | ⎯⎯⎯⎯⎯⎯→ | | |removeY(y) | | | |_____________| |______________|     class X: def __init__(self): rm.enforce def addY(self, y): rm.add_rel(self, y, \"xtoy\") def getAllY(self): rm.find_targets(self, \"xtoy\") def removeY(self, y): rm.remove_rel(self, y, \"xtoy\")   class Y: # no methods on rhs pass     #5.  1 ←→ *, bi-directional, methods on both X and Y\n Plural API Singular API _____________ ______________ | X | | Y | |_____________| |______________| | | | | |addY(y) |1 *| setX(x) | |getAllY() | ←⎯⎯⎯⎯→ | getX() | |removeY(y) | | clearX() | |_____________| |______________|   X has the required plural API Y has the reciprocal singular API   Since there are two API's, one on each class, this makes it a bidirectional relationship.  However - there still remains a sense of directionality because the one to many is directional i.e. the the lhs. 'one' side is the X and the rhs. 'many' side is the Y, not the other way around.    class X: def __init__(self): rm.enforce(\"xtoy\", \"onetomany\", \"bidirectional\") def addY(self, y): rm.add_rel(self, y, \"xtoy\") def getAllY(self): rm.find_targets(self, \"xtoy\") def removeY(self, y): rm.remove_rel(self, y, \"xtoy\")   class Y: # though bi, there is still a direction! def setX(self, x): rm.add_rel(x, self, \"xtoy\") def getX(self): rm.find_target(self, \"xtoy\") def clearX(self): rm.remove_rel(self, self.getX(), \"xtoy\")     #5A.  1 ←→ *, bi-directional, methods on both X and Y\nAlternative implementation of scenario 5, using \"directional\" and a backpointer method\n diagram as above     class X: def __init__(self): rm.enforce(\"xtoy\", \"onetomany\", \"directional\") # different to 5 # uses 'directional' not 'bidirectional' def addY(self, y): rm.add_rel(self, y, \"xtoy\") # same as 5. def getAllY(self): rm.find_targets(self, \"xtoy\") # same as 5. def removeY(self, y): rm.remove_rel(self, y, \"xtoy\") # same as 5.   class Y: def setX(self, x): rm.add_rel(x, self, \"xtoy\") # same as 5. def getX(self): rm.find_source(self, \"xtoy\") # different to 5 # uses 'find_source' not 'find_target' def clearX(self): rm.remove_rel(self.getX(), self, \"xtoy\") # different to 5 # source and target params swapped     Implementing many to one relationships between class X and Y      #6.  * → 1, directional, all methods on Y\n No API Plural API ______________ ______________ | X | | Y | |______________| |______________| | | | | | |* 1|addX(x) | | | ⎯⎯⎯⎯⎯⎯→ |getAllX() | | | |removeX(x) | |______________| |______________|    DRAFT API (not tested)\n class X: pass   class Y: def addX(x) - None: rm.add_rel(x, this, \"xtoy\") def getAllX() - List: return rm.find_sources(this, \"xtoy\") def removeX(x) - None: rm.remove_rel(x, this, \"xtoy\")  \n   #7.  * ←→ 1, bi-directional, methods on both X and Y\n Singular API Plural API ______________ ______________ | X | | Y | |______________| |______________| | | | | |void setY(y) |* 1|addX(x) | |Y getY() | ←⎯⎯⎯⎯→ |getAllX() | |void clearY()| |removeX(x) | |______________| |______________|    DRAFT API (not tested)\n class X: def setY(y) - None: rm.add_rel(this, y, \"xtoy\") def getY() - Y: rm.find_target(this, \"xtoy\") def clearY() - None: rm.remove_rel(this, getY(), \"xtoy\")   class Y: def addX(x) - None: rm.add_rel(x, this, \"xtoy\") def getAllX() - List: rm.find_sources(this, \"xtoy\") def removeX(x) - None: rm.remove_rel(x, this, \"xtoy\")  \n   Implementing many to many relationships between class X and Y      #8.  * → *, directional, all methods on X\n Plural API No API _____________ ______________ | X | | Y | |_____________| |______________| | | | | |addY(y) |* *| | |getAllY() | ⎯⎯⎯⎯⎯⎯→ | | |removeY(y) | | | |_____________| |______________|    DRAFT API (TODO, not tested)\n   #9.  * → *, directional, all methods on Y\n No API Plural API ______________ ______________ | X | | Y | |______________| |______________| | | | | | |* *|addX(x) | | | ⎯⎯⎯⎯⎯⎯→ |getAllX() | | | |removeX(x) | |______________| |______________|    DRAFT API (TODO, not tested)\n   #10.  * ←→ *, bi-directional, methods on both X and Y\n Plural API Plural API ______________ ______________ | X | | Y | |______________| |______________| | | | | | addY(y) |* *| addX(x) | | getAllY() | ←⎯⎯⎯⎯→ | getAllX() | | removeY(y) | | removeX(x) | |______________| |______________|    DRAFT API (TODO, not tested)\n    These scenarios are all unit tested in tests/python/test_enforcing.py in the GitHub project.\n Back pointers One of the benefits of the relationship manager pattern is that you don’t have to explicitly wire up and maintain back-pointers. Once you add a pointer relationship, you get the back pointer relationship available, for free. And once you delete the pointer relationship, the back-pointer relationship goes away automatically too.\nThe following code is a good example of how the use of RM saves you from having to explicitly maintain backpointers. P.S. To run the code you also need the support files found here. View the code below (requires the flash plugin) - showing an implementation of a Composite Pattern, with back pointer - or simply read the pdf directly.\n Backpointers are pointers on the “target end” of a relationship, so that the target object knows who is pointing at it. For example when a Customer places an Order, it might be convenient for any particular order instance to know which customer ordered it. I think you can choose to conceive of the backpointer in a few different ways:\n as an extra, separate relationship or as part of the one bidirectional relationship or merely a convenience method in the implementation in the r.h.s. class  The easiest way of implementing this backpointer without using relationship manager is to follow the Martin Fowler refactoring technique - see Martin Fowler ‘Refactorings’ p. 197 “Change Unidirectional Association to Bidirectional” - this will ensure you get the wiring correct. In this refactoring, you decide which class is the master and which is the slave etc. See the before and after python pdf below for an example of the correct wiring.\nThe way of implementing a backpointer using relationship manager is simply to call the rm.find_source(target=self) method. Since a rm holds all relationships, it can answer lots of questions for free - just like SQL queries to a database.\n Bi-directional relationships A bi-directional relationship between X and Y means both sides have pointers to each other.\nor just\nWithin this seemingly obvious idea are a myriad of nuances:\nWe must distinguish between a relationship that in its domain meaning, goes both ways, and a relationship which goes one way only. And furthermore, implementationally, you can have RM methods on one class only, on the other class only, or on both classes. The meaning of the relationship and the implementation (methods to create and look up those relationships) are two different things!\n As the diagram above shows, one bi-bidirectional relationship is arguably shorthand for two directional relationships.  In fact in the Python rm implementation, when you create a bi-directional enforcement rule (e.g. Scenario 3) with a call to rm.enforce(“xy”, “onetoone”, “bidirectional”) you are actually causing rm to create two relationship entries in the rm. This means you can reliably use a rm.find_target(source=self) call from either side, knowing there is a relationship in both directions.\n The methods you implement on your classes to create and look up relationships can influence your perception of what is pointing to what.  When you put an API (relationship manager methods) on both classes this might seem to imply that you are implementing bi-directionality - however this does not mean that the “semantic relationship” points in both directions. The meaning of the relationship is often in one direction only, and the existence of methods on both classes merely gives you a convenient way of querying the directional relationship that exists.\nA rm, like a database, allows you to ‘cheat’ and find out who is pointing to a class even though that class has no actual pointers implementing ‘am pointed to by’. This is accomplished by using rm.find_source(target=self). But just because a rm let’s you find out this knowledge doesn’t mean there is a official modelling of this back-relationship in your domain.\n Back-pointer relationships are not the same thing as official, semantic relationships.  However you may still want to declare a bidirectional relationship for its semantic value in your particular business logic domain, or for domain modelling accuracy - or even just for your own implementation preferences.\n A bi-directional relationship (pair) can be implemented more efficiently by a single directional relationship together with the magic rm back-pointer lookup call rm.find_source(target=self).  When you create a directional enforcement rule (e.g. Scenario 3A) with a call to rm.enforce(“xy”, “onetoone”, “directional”) or leave out this call altogether, you are causing rm to create only the relationships that you ask for. Thus classes on the ’target’ side of a relationship cannot call rm.find_target(source=self) to find out who is pointing to them. They can however, thanks to the back-pointer lookup magic of rm, call rm.find_source(target=self) to derive this information.\nThis means bidirectional relationships never actually need to be used or declared, 😲, since an implicit back-pointer (i.e. a back reference) is always deducible using rm.find_source(), when using a Relationship Manager! In fact a bidirectional relationship creates extra entries in the rm datastructure, and slightly more overhead in performance (maintaining both relationships e.g. in the case of creation and removal).\n Name your relationships with direction in mind If you choose to implement relationship related methods on both classes use the same relationship id on both sides.  The same relationship id should be used in both classes e.g. \"xtoy\" (notice the sense of directionality is built into the name of the relationship!). Even though there is an API on both classes allowing each class to find the other class, does not turn the relationship semantics to be bi-directional from the point of view of domain modelling, but only in a convenient implementation sense. Some may frown on this ability of an implementation to cheat and betray the domain model. Perhaps a flag could be set in the rm to disallow use of the back-pointer lookup magic rm.find_source(target=self) of rm,.\nIn the following implementation of a one to many relationship between class X and class Y, notice the same relationship id \"xtoy\" must be used in both classes.\nclass X:  def __init__(self): rm.enforce(\"xtoy\", \"onetoone\", \"directional\")  def setY(self, y): rm.add_rel(self, y, \"xtoy\")  def getY(self): return rm.find_target(self, \"xtoy\")  def clearY(self): rm.remove_rel(self, self.getY(), \"xtoy\")  class Y:  def __init__(self): rm.enforce(\"xtoy\", \"onetoone\", \"directional\") # probably redundant  def setX(self, x): rm.add_rel(x, self, \"xtoy\")  def getX(self): return rm.find_source(self, \"xtoy\")  def clearX(self): rm.remove_rel(self.getX(), self, \"xtoy\") Note that both classes calling rm.enforce is possibly redundant, since its telling the rm the same information - depending on the order of initialisation of your classes.\nExamples Python Example - Observer pattern Here is an example of hiding the use of Relationship Manager, found in the examples folder as relmgr/examples/observer.py - the classic Subject/Observer pattern:\nfrom relmgr import RelationshipManager   rm = RelationshipManager()   class Observer:   @property  def subject(self):  return rm.find_target(self)   @subject.setter  def subject(self, _subject):  rm.add_rel(self, _subject)   def notify(self, subject, notification_type):  pass # implementations override this and do something   class Subject:   def notify_all(self, notification_type: str):  observers = rm.find_sources(self) # all things pointing at me  for o in observers:  o.Notify(self, notification_type)   def add_observer(self, observer):  rm.add_rel(observer, self)   def remove_observer(self, observer):  rm.remove_rel(source=observer, target=self) When using the Subject and Observer, you use their methods without realising their functionality has been implemented using rm. See tests/python/examples/test_observer.py in the GitHub project for the unit tests for this code.\nC# Example - modelling Person –\u003e* Order Say you want to model a Person class which has one or more Orders. The Order class needs to have a backpointer - back to the Person owning that order.\nInstead of hand coding and reinventing techniques for doing all the AddOrder() methods and GetOrders() methods etc. using ArrayLists and whatever, we can do it using the relationship manager object instead, which turns out to be simpler and faster and less error prone. The RM (relationship manager) is implemented in this particular example as a static member of the base BO (business object) class. Thus in this situation all business objects will be using the same relationship manager.\n Note that the use of Relationship Manager is hidden, and is a mere implementation detail.\n Here is the c# code to implement the above UML. This code uses the v1 API documented in the Relationship Manager GitHub project:\nusing System; using System.Collections; using System.Collections.Generic; using RelationshipManager.Interfaces; using RelationshipManager.Turbo;  namespace Example_Person_Order_Console_App {  class Program  {  static void Main(string[] args)  {  var jane = new Person(\"Jane\");  var order1 = new Order(\"Boots\");  var order2 = new Order(\"Clothes\");  jane.AddOrder(order1);  jane.AddOrder(order2);   // test forward pointer wiring  Console.WriteLine(jane + \" has \" + jane.GetOrders().Count + \" orders\");   // test the backpointer wiring  foreach (var order in jane.GetOrders())  {  Console.WriteLine(\"The person who ordered \" + order + \" is \" + order.GetPerson());  }   Console.WriteLine(\"Done!\");   }   ///   /// BO is the base Business Object class which holds a single static reference   /// to a relationship manager. This one relationship manager is   /// used for managing all the relationships between Business Objects  /// like Person and Order.   ///   public class BO // Base business object   {  static protected RelationshipMgrTurbo rm = new RelationshipMgrTurbo();  }    ///   /// Person class points to one or more orders.   /// Implemented using a relationship manager rather   /// than via pointers and arraylists etc.   ///   public class Person : BO  {  public string name;   static Person()  {  rm.EnforceRelationship(\"p-\u003eo\", Cardinality.OneToMany, Directionality.DirectionalWithBackPointer);  }   public Person(string name)  {  this.name = name;  }   public override string ToString()  {  return \"Person: \" + this.name;  }   public void AddOrder(Order o)  {  rm.AddRelationship(this, o, \"p-\u003eo\");  }   public void RemoveOrder(Order o)  {  rm.RemoveRelationship(this, o, \"p-\u003eo\");  }   public List\u003cOrder\u003e GetOrders()  {  IList list = rm.FindObjectsPointedToByMe(this, \"p-\u003eo\");   // cast from list of 'object' to list of 'Person'  var result = new List\u003cOrder\u003e();  foreach (var order in list)  result.Add((Order)order);   // attempts at other simpler ways to cast a whole list  //result = list as List\u003cOrder\u003e; // crash  //result = new List\u003cOrder\u003e(list); // syntax error?   return result;  }  }   ///   /// Order class points back to the person holding the order.   /// Implemented using a relationship manager rather  /// than via pointers and arraylists etc.   ///   public class Order : BO  {  public string description;   public Order(string description)  {  this.description = description;  }   public override string ToString()  {  return \"Order Description: \" + this.description;  }   public void SetPerson(Person p)  {  // though mapping is bidirectional, there is still a primary relationship direction!  rm.AddRelationship(p, this, \"p-\u003eo\");   }   public Person GetPerson()  {  // cast from 'object' to 'Person'  return (Person)rm.FindObjectPointingToMe(this, \"p-\u003eo\");  }   public void ClearPerson()  {  rm.RemoveRelationship(this, this.GetPerson(), \"p-\u003eo\");  }  }   }  } Output:\nPerson: Jane has 2 orders The person who ordered Order Description: Clothes is Person: Jane The person who ordered Order Description: Boots is Person: Jane Done! C# Future Directions A generics version of relationship manager would be cool - that way no casting would be required. Presently all calls to relationship manager return objects or lists of objects - which you have to cast to the specific type you actually have stored. You can see this casting in the above example.\nResources   Python Implementation README and GitHub project.\n  Full Python Relationship Manager API documentation.\n  See original andypatterns page\n  Official Relationship Manager Pattern page incl. academic paper by Andy Bulka (this page).\n  ","categories":"","description":"A central mediating class which records all the one-to-one, one-to-many and many-to-many relationships between a group of selected classes.\n","excerpt":"A central mediating class which records all the one-to-one, …","ref":"/patterns/relationship-manager/","tags":["Design Patterns","Python","SQL"],"title":"Relationship Manager - Design Pattern"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/sql/","tags":"","title":"SQL"},{"body":"Building traditional GUIs with the Entity Component System.\nIs the Entity Component System any good for building traditional GUIs?\nIt turns out that the answer is yes! Whilst ECS is most commonly used in building games, it can also be used for building a traditional web “form” style application like TodoMVC. However you will need to radically rethink how models, their data and behaviour is organised.\nThis is arguably a refreshing, mind-blowing lesson in GUI programming! 🤯😉\nSee full article on Medium here.\n","categories":"","description":"","excerpt":"Building traditional GUIs with the Entity Component System.\nIs the …","ref":"/blog/2020/05/18/todomvc-implemented-using-a-game-architecture-ecs/","tags":["GUI","Javascript","MVC"],"title":"TodoMVC implemented using a game architecture — ECS"},{"body":"TodoMVC implemented in a classic Object Oriented way.\nThe classic Javascript TodoMVC app implemented without a framework, using plain Object Oriented programming + a traditional MVC design pattern. Distinct, mediating Controller objects are the key to this implementation.\nRunning demo here.\nSee full article on Medium here.\n","categories":"","description":"","excerpt":"TodoMVC implemented in a classic Object Oriented way.\nThe classic …","ref":"/blog/2020/05/18/todomvc-implemented-using-traditional-oo-controllers-and-events/","tags":["GUI","Controllers","Javascript","Observer","MVC"],"title":"TodoMVC implemented using traditional OO, Controllers and Events"},{"body":"I’ve been publishing a lot on Medium recently. Why? Because the articles seems to get more widely read, and the Medium editor is so simple and produces beautifully formatted articles.\nBuilding a deployable Python-Electron App\nBuilding a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps - which I outline here.\nIts about how to use Electron as a GUI front end to Python 3. It gets over 1,000 reads a week for some reason, more than any of my other articles.\nAsync/await for wxPython\nPython 3 GUI apps with asynchronous functionality\nGetting Python and wxPython apps into the Ubuntu app store\nHave you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.\nDjango View logging is back-the-front\nHow the order of view request log messages in Django apps might be confusing, and how to fix it.\n TodoMVC implementation articles Here are my two recent articles implementing the classic Javascript TodoMVC app in various ways. These two articles shows you how to design apps. Its an alternative to using a modern javascript framework like Vue, Angular or React.\n Classic - OO, Controllers and Events ECS - using a game architecture  TodoMVC implemented using traditional OO, Controllers and Events.\nTodoMVC implemented in a classic Object Oriented way - which includes running code you can run in your browser.\nTodoMVC implemented using a game architecture — ECS.\nBuilding traditional GUIs with the Entity Component System\n","categories":"","description":"","excerpt":"I’ve been publishing a lot on Medium recently. Why? Because the …","ref":"/projects/big-ideas/medium-articles/","tags":"","title":"Medium Articles"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/django/","tags":"","title":"Django"},{"body":"Have you ever looked through your Django log files and console messages, felt something was out of order and didn’t make sense, but couldn’t quite put your finger on it?\nHere is an example of what I mean. Here is some view code:\ndef diagramz_list(request, template_name=\"list.html\"):  log.info(\"diagramz_list has been called\")  ...  return render(request, template_name, {\"object_list\": diagrams}) that gets routed via url(r”^listz$”, views.diagramz_list, name=”listall”).\nLet’s look at the log file and console messages that get generated when you do the usual python manage.py runserver and using the browser, visit endpoint /listz:\n[2018–10–20 14:42:50] [INFO] diagramz_list has been called [2018–10–20 14:42:51] [INFO] “GET /listz HTTP/1.1” 200 119585 Can you see the problem?\nRight — the hit on the endpoint /listz gets logged after the output of the logging statement which says “diagramz_list has been called”. That’s counterintuitive for me when I do logfile analysis.\n IMO — the Django endpoint call should be logged immediately.\n See full article on Medium here.\n","categories":"","description":"","excerpt":"Have you ever looked through your Django log files and console …","ref":"/blog/2019/09/04/django-view-logging-is-back-the-front/","tags":["Django","Python"],"title":"Django View logging is back-the-front"},{"body":"Have you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.\nI wanted to get my UML tool for Python, Pynsource, into the Ubuntu/Snapcraft app store for a long time. This is the story of how I made that happen.\nIt certainly wasn’t easy. It took me a week of work, struggling with the concepts, documentation and various bugs in the tooling to finally get my app listed. Hopefully I can save you some time getting your Python command line app or wxPython GUI app published.\nSee full article on Medium here.\n","categories":"","description":"","excerpt":"Have you ever dreamt of getting your own apps in the Ubuntu app store? …","ref":"/blog/2019/04/06/getting-wxpython-apps-into-the-ubuntu-app-store/","tags":["Python","wxPython","Ubuntu"],"title":"Getting wxPython apps into the Ubuntu app store"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/ubuntu/","tags":"","title":"Ubuntu"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/wxpython/","tags":"","title":"wxPython"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/async/","tags":"","title":"Async"},{"body":"How to build Python 3 GUI apps with asynchronous functionality.\nPython 3’s support of async/await is the new hotness, allowing cooperative computation with reduced complexity and without needing threads — as long as you use async compatible libraries like aiohttp etc. You can’t use the famous requests library because it is not async aware and will block, but not to worry, those other libraries have you covered.\nSee full article on Medium here.\n","categories":"","description":"","excerpt":"How to build Python 3 GUI apps with asynchronous functionality.\nPython …","ref":"/blog/2019/03/02/async/await-for-wxpython/","tags":["Async","GUI","Controllers","Python","wxPython"],"title":"Async/await for wxPython"},{"body":"Introduction This article is twenty years old - its ideas are now simplified and clarified at MVCA pattern\nA live demo running in a browser.\nTip for understanding this article: This is arguably the traditional MVC pattern with terminology tweaked and clarified, and updated for ‘modern’ times where Views are no longer manually drawn but are instead off the shelf GUI widgets or DOM elements.\n Mediator == Controller GUI == View  The Pattern  Download as pdf.\nComments Comments now disabled due to spam.\nPosted on Jan 18th, 2009 Hi Andy,\nI’ve read your article about the MGM Patterns, it’s a great pattern.\nHowever, I have a question, could you please show me.\nLet say I have a Textbox (GUI), a business object with only 1 property Text,\na mediator-view as your pattern defined.\nWhen changing Business.Text, this procedure is called:\nprocedure setText(Value: String); begin FText := Value; NotifyChanges; // \\*\\*\\* notify mediator to change Editbox content end; therefore, mediator is notified:\nprocedure BusinessChanged; begin FGUI.Text := FBusiness.Text; // this makes Editbox OnChange fires end; OnChange event of Editbox:\nprocedure Edit1Change(); begin Mediator := FindMediator(Self) Mediator.Business.Text := TEdit(Self).Text; { \\*\\*\\* This line would call Business.setText and make an infinity loop } end; The only method I’ve thought of is let the Mediator modify FText field of\nBusiness object. But in this way, Busniess and Mediator have to be in a same\nunit. Is there another way to solve this problem?\nThanks for your sharing!\nKarr. C.\nPosted by Andy on Jan 18th, 2009 Thanks for your interest in the MGM pattern. Your assumption in the above code is that the Editbox OnChange fires when you programatically set the FGUI.Text, which would cause the event sequence\ngui changes -\u003e mgm notified -\u003e changes model -\u003e model notifies mgm -\u003e mgm modifies gui -\u003e gui changes and so on, infinitely!! See your lines marked *** highlighted lines above.\nHowever the Editbox OnChange fires only seems to fire when the text is altered by the user in the gui. It does not fire when the edit1.text is changed programatically. So there is no loop.\nI tried it in Delphi 6. Here is a sample delphi app that proves it.\nhttp://www.atug.com/downloads/mgmquickproof01.zip\nIt has a cheaper form of mgm which I just whipped up, in order to demonstrate the point.\nP.S. If the event HAD fired, you could\n  temporarily disable the event by rewiring the event handler to Nil before writing to it programatically, then restoring the event handler again (yuk, but possible. You often have to do this when using mgm with treeviews.)\n  provide a way of setting the model data which does not trigger a notification. Make the private data public. Again, yuk.\n  … anyway thankfully you don’t need to do either of these things since Editbox OnChange does not fire when the edit1.text is changed programatically\nHope this helps.\n-Andy Bulka\nPosted by Anon on Jan 21st, 2009 Here is a nice article on MVP pattern and the differences to MVC.\nResources Old link on andypatterns.com\n","categories":"","description":"Model-Gui-Mediator Pattern - the original version of [MVCA Architectural Pattern](/patterns/mvca-pattern) The MGM pattern is a variation of MVC (model view controller) or MVP (Model View Presenter) but takes into account the use of modern off the shelf GUI controls.\n","excerpt":"Model-Gui-Mediator Pattern - the original version of [MVCA …","ref":"/patterns/mgm-pattern/","tags":["Design Patterns","GUI","Controllers"],"title":"MGM Pattern"},{"body":"Introduction This article describes the “MVC-App Architectural Pattern” which you can use to design your software applications, when you need to support a GUI. It is not a framework, it is a small set of principles which let you build sane, modular GUIs in any language, using any off the shelf UI components.\n For the original, deprecated, MGM pattern which initially inspired this “MVC-App Pattern” pattern, see MGM pattern\n TodoMVC-OO This is the classic Javascript TodoMVC app implemented without a framework 😄, simply using plain Object Oriented programming + a traditional MVC design pattern.\nDistinct, mediating Controller classes are the key to this implementation.\nRunning demo here.\n MVCA Architectural Pattern This project fully implements the TodoMVC specification. It is implemented without a framework, using plain Object Oriented programming + the MVCA architectural design pattern:\nWhilst the MVC (Model View Controller) pattern is commonly and glowingly referred to, implementations can vary widely. Most documentation on MVC, including the official wikipedia article is vague on definitions and details. This TodoMVC-OO project uses the MVCA pattern (formerly the MGM pattern) which is a clear and unambiguous interpretation of MVC, with the following key ideas:\n The View means a modern GUI framework, and therefore is usually already available to be used by the programmer. One or more Controllers mediate between the View and the rest of the Application, listening for GUI events. Nobody else knows about the View. The Model is traditional data, may contain some business logic, and may broadcast events when its attributes change. The Application owns the model(s), holds view state and contains some business logic methods. An Eventing system is needed, traditionally Observer pattern but the stronger decoupling and the proper event objects of the Publisher-Subscriber pattern is preferred.  Thus MVCA simply means “Model View Controller Application” - all four roles are necessary to any implementation.\n The above diagram was generated semi-automatically from Javascript source code residing in GitHub using GitUML. Click here for more diagram detail as a .svg and the ability to zoom.  View this actual diagram 181 on GitUML.  MVCA In Detail Let’s go through the four parts of the MVCA pattern, which is precisely adhered to by this TodoMVC-OO implementation. Actually there is a fifth important part - the eventing system - which glues it all together - let’s look at the Model first.\nModel The Model is traditional, may contain some business logic, and may broadcast events when its attributes change.\nBy traditional, I mean the Model does not know about anything else except perhaps other models. Its the core model of your data, the domain of the what the application is all about. In the case of the Todo application, it is a collection of Todo items, which can be marked completed.\nclass TodoItem {  constructor(title, id, completed) {  this._title = title == undefined ? \"\" : title;  this._completed = completed == undefined ? false : completed;  this.id = id == undefined ? util.uuid() : id; // no getter/setter needed  }   get title() {  return this._title;  }   set title(v) {  this._title = v;  this.dirty()  }   get completed() {  return this._completed;  }   set completed(v) {  this._completed = v;  this.dirty()  }   get as_dict() {  return {  id: this.id,  title: this.title,  completed: this.completed  }  }   delete() {  notify_all(\"deleted todoitem\", this)  }   dirty() {  notify_all(\"modified todoitem\", this, {during_load: false})  } } The Model is usually broken into many smaller interconnected models in an attempt to reflect the real world domain being implemented as software. The Model can be implemented as mere objects in memory or a full-fledged database model, or a ORM mapping between the two. In our case, we have a pure memory model, which gets persisted into local browser storage as JSON.\nYou will find that some ‘model’ concepts are more about how the information is presented in the GUI, thus I recommend these are kept as attributes of the Application class, and referred to as the view state or view model. The attribute filter is an example of such view state. The Application class can also hold collections of models which is what we do in this project:\nclass Application {  constructor(config) {  this.todos = [] // model collection  this.filter = 'all' // view model, options are: 'all', 'active', 'completed'  ...  } The model can be fat or thin - a fat model will have more business logic in the model. A thin model will most business or application logic in the Application class, treating the model as just data structures.\nFinally, the Model needs to participate in the internal eventing system. Whenever an attribute changes it should send out a notification event - this is why most attributes of our TodoItem class are accessed via getter and setter methods. For example setting title or completed will trigger an internal event to whoever may be listening. This internal eventing mechanism is how Controllers know to update the GUI with updated model information.\nView The View means a modern GUI framework, and as such is already available to be used by the programmer. In our case, our modern GUI framework is the browser DOM which you can build in HTML:\n\u003cinput id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\"\u003e then Controllers use the GUI native eventing system to listen for interesting events\nthis.gui.$toggle_all.on('change', handler) Controller The Controller is the most interesting aspect of MVC.\nIn many software designs, the Controller isn’t necessarily a single thing. A bunch of stray GUI event handler functions are in reality, part of the ‘controller role’. Code that copies data from the model into the GUI/DOM is also part of the Controller role. I feel the challenge of GUI architectures is to tame the role of Controller into some semblance of coherance and symmetric organisation. Which is why MVCA prescribes creating Controller classes.\nIn TodoMVC-OO we have a Controller class ControllerTodoItem and instantiate one per TodoItem model instance. That’s arguably a lot of controller instances, but this approach allows fine grained updating of the DOM. In contrast, the Jquery version of TodoMVC rebuilds the entire todo DOM on each refresh - something that might become inefficient for non-toy apps.\nIn TodoMVC-OO we have a Controller class ControllerHeader for looking after the header part of the GUI and ControllerFooter for looking after the footer area, which is where the filter buttons are and the count of uncompleted todo items is displayed. The number of Controllers you create is up to you: one Controller per GUI element for fine grained updates, a more relaxed approach of one Controller per related group of GUI elements (my preference) or arguably even one Controller for all GUI elements! I go into more academic detail on this topic in my MGM pattern paper.\nBy clearly defining what a mediating Controller is, and organising our app into different sensible controllers, we tame our design and prevent it from turning into spaghetti.\n  View events only talk to Controllers:\n View events (‘gui events’ e.g. via .on('click', ...)) go to one or more Controllers. Controllers update the View, usually in reponse to an ‘internal event’ notification.    The Controller talks to the rest of the system:\n Accesses App view state. Calls App business logic methods. Modifies the Model directly.    The Controller listens for ‘internal events’ broadcast from Model \u0026 App.\n  Whilst that may seem like a lot to understand, its basically saying Controllers talk to the GUI - nobody else does. Controllers then call into the rest of the system to get things done\nImportantly, we must resist putting business logic into the Controller, simply let the controller call the Application to do what needs to be done. The Controller should do the minimal possible work, mediating and translating between the View and the rest of the system (the App + Model).\nApplication The role of the Application is also important and often overlooked/undocumented. The Application owns the Model, and looks after persisting it. The Application can listen for internal Model events.\nWhilst it is fine to wire Controllers directly to model instances, you will also need the Application to hold “view state” e.g. like the state of the active “filter” in this Todo application. The Application is a centralised class, a kind of hub - to hold higher level business logic and more complex model manipulations. The Application class’s functionality can of course be composed of smaller pieces as software grows more complex but a class called Application should always still exist.\nEventing System Eventing is an important consideration in decoupling models from controllers, and to facilitate abstract communication between objects.\nTwo eventing systems should be distinguished:\n GUI native: The native eventing system of the GUI Framework e.g. DOM .on('click', ... Internal: Your choice of an application system wide eventing system e.g. Publish-Subscribe e.g. document.addEventListener(\"hello\", (event) =\u003e { ... })  Both eventing systems are used in the TodoMVC-OO implementation. As you can see in the diagram above, DOM eventing reaches the Controllers, but no further. The remaining eventing is internal.\nHere is a Literate Code Map of the event flow of TodoMVC-OO. Events are reified as coloured objects, each different event gets a different colour. TodoMVC-OO event flow.\n The above diagram was generated semi-automatically from Javascript source code residing in GitHub using GitUML. Click here for more diagram detail as a .svg and the ability to zoom.  View this actual diagram 134 on GitUML.  The eventing pattern depicted here is Publisher-Subscriber where real event objects are ‘broadcast’ into the ether/event bus/system/whatever - allowing any code in the system to subscribe and respond - the point is, the code emitting the event does not have references to receiver object/methods.\nThe Javascript built in Publisher-Subscriber eventing approach is more flexible and powerful than the Observer pattern since the Observer pattern requires observers to know about and subscribe to Subject objects, which is not always possible or convenient. More dicussion on the differences can be found in this article and on Stackoverflow. Thus we use Publisher-Subscriber eventing (event name → object method) rather than the traditional Observer pattern (object → object) approach.\nI used to be a fan of the traditional Observer pattern but in my later years find the Publisher-Subscriber pattern to be simpler and more powerful - plus Publisher-Subscriber is built into Javascript you simply document.addEventListener(\"hello\", (event) =\u003e { ... }) to listen and document.dispatchEvent(new CustomEvent(event_name, { detail: {from: from, data: data } })) to notify all.\nThe Javascript built in Publisher-Subscriber eventing system is used as the internal eventing system of this TodoMVC-OO implementation.\nApplication Bootstrapping To get things running, some bootstrapping code will create an instance of the Application which in turn creates all the Controllers and loads the Model. The bootstrapping in TodoMVC-OO is done in app.js which creates an instance of Application which is defined in application.js.\n(function (window) {  let config = {...}  new Application(config) })(window); Notice that a config object with a list of callback methods is passed into the Application.\nGiving the Application class knowledge of individual Controller classes and all the GUI view elements they need is arguably contaminating the Application class with too much GUI view and Controller knowledge.\nThe solution I use is to pass the Application a config object which contains a bunch of callbacks. Each callback function will magically create a Controller instance, wired to look after its GUI elements. Each callback function hides, within itself, references to the DOM - which we don’t want the Application to have. In this way, the bootstrapping code and the Controller code are the only parts of the architecture that know about the View specifics (which we want to restrict).\nThus whenever the Application needs to instantiate a Controller (e.g. each time a TodoItem is created) it calls a config callback function. Another example is during bootup - some permanent Controllers need to be created, like the Controller looking after the header area, so the Application calls this.callback_config.cb_header(this) which creates an instance of the ControllerHeader wired to $('.new-todo') and $('.toggle-all'). The Application only needs to know the callback function names and thus remains pure.\nNotice in the config object below that each callback refers to the view through JQuery syntax e.g. $('ul.todo-list') and passes these references into the contructor of the Controller:\nlet config = {  // Callback to create the todo item controllers - are added as needed   cb_todo: function (app, todo) {  new ControllerTodoItem(  app,  todo,  { $todolist: $('ul.todo-list') }  )  },   // Callbacks to create the permanent controllers   cb_header: function (app) {  new ControllerHeader(  app,  {  $input: $('.new-todo'),  $toggle_all: $('.toggle-all')  }  )  },  cb_footer: function (app) {  new ControllerFooter(  app,  {  $footer: $('footer'),  $footer_interactive_area: $('.footer')  })  } } Of course the Controller itself will have further references to View DOM elements, however these references should be based on searching within the outer DOM element passed to the Controller - thus achieving some degree of ‘component-isation’ and re-use. For example the same Controller could be used to look after different DOM elements with different element id’s.\nTodoMVC-OO Conclusion This project fully implements the TodoMVC specification and is implemented without a framework, using plain Object Oriented programming + MVCA architectural design pattern, as described above.\nRunning demo here.\nImprovements In this implementation, I notice that footer renders too early rather than right at the end of the initial render. Its just a subtle flash of the footer when the page is initially redrawn, but I’d like to correct this.\n Resources  Official TodoMVC project with other TodoMVC implementations (e.g. Vue, Angular, React etc.) TodoMVC-ECS - My “Entity Component System” implementation of TodoMVC MVCA another example of an app implemented using the MVCA architecture (Javascript, open source) Andy’s GUI Showdown The same application, implemented in various ways - which is better, cleaner, more understandable etc. (Javascript, open source)  OO MVCA ECS PLAIN VUE   MGM pattern (older version of MVCA, presented at a Patterns Conference)  Diagramming  GitUML diagramming used for this project Literate Code Mapping diagramming used for this project  Credit Created by Andy Bulka\nNote: This project is not not officially part of the TodoMVC project - as it is does not use a MVC framework library, nor does it meet the criterion of “having a community” around it. On the other hand, perhaps a pattern is equivalent enough to a framework - after all there is a plain Javascript TodoMVC implementation officially available using ad-hoc techniques. Plus, there has been a “community” around the Object Oriented MVC pattern for decades now - hasn’t there? 😉\n","categories":"","description":"MVC-App simply means \"Model View Controller Application\" - all four roles are necessary to any implementation.\n","excerpt":"MVC-App simply means \"Model View Controller Application\" - all four …","ref":"/patterns/mvca-pattern/","tags":["Design Patterns","GUI","MVC","Controllers","Javascript","Observer","Refactoring"],"title":"MVC-App Architectural Pattern"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/refactoring/","tags":"","title":"Refactoring"},{"body":"Introduction The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back again. A pair of methods on some class e.g. load/save are often the signature of a Transformation Interface.\nThe Pattern  Download as pdf.\n","categories":"","description":"An interface or layer, which offers services to transform an object into another format and back again.\n","excerpt":"An interface or layer, which offers services to transform an object …","ref":"/patterns/transformation-interface/","tags":["Design Patterns"],"title":"Transformation Interface Design Pattern"},{"body":"Building a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps — which I propose to outline here.\nSee full article on Medium here.\n","categories":"","description":"","excerpt":"Building a normal, deployable application for Mac or Windows, using …","ref":"/blog/2018/10/03/building-a-python-electron-app/","tags":["Dev Ops","GUI","Electron","Javascript","Python"],"title":"Building a Python-Electron App"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/dev-ops/","tags":"","title":"Dev Ops"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/electron/","tags":"","title":"Electron"},{"body":"How I used the Python AST capabilities to build the Python to Rpn converter.\nPython compilation pipeline My program works at the AST stage of the compilation pipeline:\nSpecifically my approach has been to use Python’s built in ability to parse itself into an AST Abstract Syntax Tree, then to traverse this tree using the visitor design pattern to generate the RPN.\n The Python AST parser is built into Python and thus requires that you be running Python to use it.\n Example For example, parsing the following Python code with ast.parse:\nimport ast import astunparse print(astunparse.dump(ast.parse('x = 1 + 2'))) will generate the following AST data structure representing x = 1 + 2\nModule(body=[Assign( targets=[Name( id='x', ctx=Store())], value=BinOp( left=Num(n=1), op=Add(), right=Num(n=2)))]) Reception to the talk The reception to the talk entitled “Leveraging the Python AST, Python’s hidden DOM” was good, but became fun and buoyant once the audience realised I had targeted an old HP calculator !\nwith this fancy Python technology - especially when I pulled out my HP calculator collection for all to see and touch. 😄\n-Andy Bulka\nResources  Python AST talk slides of the talk I gave to a local Python User Group in Melbourne, Australia, about how I used the Python AST capabilities to build the Python to Rpn converter. Python to Rpn converter which uses these AST conversion capabilities to convert Python code into HP calculator RPN code.  ","categories":"","description":"","excerpt":"How I used the Python AST capabilities to build the Python to Rpn …","ref":"/blog/2018/06/01/python-ast-parsing/","tags":["Python","Calculators"],"title":"Python AST Parsing"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/music/","tags":"","title":"Music"},{"body":"Midi patch converter and patch librarian for the Prophet 6 synthesizer.\nFeatures  listens for sysex messages from prophet 6 records them in a list, marked as ‘raw’ click a button (or perhaps its done automatically) and convert them into ‘audition’ style click on either raw or audition button to send patch back to the prophet 6 UI of the Prophet 6 knobs and buttons (as pictured) adjusts patches in real time  Status Unreleased, on hold.\nResources Project Repository: https://bitbucket.org/abulka/electron1/src/master/\n","categories":"","description":"","excerpt":"Midi patch converter and patch librarian for the Prophet 6 …","ref":"/projects/apps/prophet-6-librarian/","tags":["Software Product","Music"],"title":"Prophet 6 Librarian"},{"body":"Developing a Layout Algorithm for UML diagrams Intro Presented to the Melbourne Patterns Group, Wednesday 6th April 2011 6:30 PM\nThe Problem: Untangling UML Diagrams Terms  Nodes – these are the shapes/rectangles Edges – these are the lines connecting the shapes  Background  My UML tool is written in Python Existing layout libraries for e.g. python PyGraphviz has no windows port so I wrote my own Layout is reasonably hard to implement – academic papers are very complex and deal in a lot of math DIRTY SECRET OF ACADEMIA - Most Layout algorithms only deal with ‘points’ and don’t take into account real width and height  Thus for any real world use (unless dealing with network and particle visualisation where each node is the same size/shape), it seemed to me that one needs to run an overlap removal algorithm after the layout to remove shape overlaps.\nOverlap removal algorithm needs to minimise shape movement in order to respect the layout results\nWhat I developed  I used a ‘spring layout’ adapted from java and javascript I developed my own overlap removal algorithm Developed a GUI sandbox test app for development  Overlap Removal - Before and After   before\n    after applying layout\n  Unit Testing Extensive unit tests were created to keep on top of the layout algorithm results. A word document containing annotated screenshots for each test helped me enormously.\n  an overlap removal use case which became a unit test\n  Layout / persistence format was created for creating layout scenarios\n{'type':'node', 'id':'D25', 'x':6, 'y':7, 'width':159, 'height':106} {'type':'node', 'id':'D13', 'x':6, 'y':119, 'width':119, 'height':73} {'type':'node', 'id':'m1', 'x':170, 'y':9, 'width':139, 'height':92} Unit Testing Brittleness Avoided Loose tests using (e.g. I created a function called ensureYorder() etc) were created so that the tests were not too brittle. Slight variations in position are ignored.\nView this unit test file at the Pynsource GitHub repository tests/test_overlaps1.py. Here is an example unit test:\ndef _LoadScenario3(self):  self.g.LoadGraphFromStrings(TEST_GRAPH3)  def test3_5InsertedVerticallyTwoPushedDown(self):  self._LoadScenario3()   # move m1 to the left  node = self.g.FindNodeById(\"m1\")  node.left, node.top = (6, 4)   d97 = self.g.FindNodeById(\"D97\")  oldD97pos = (d97.left, d97.top)   # assert m1 has been inserted vertically - two pushed down  were_all_overlaps_removed = self.overlap_remover.RemoveOverlaps()  self.assertTrue(were_all_overlaps_removed)  self.assertEqual(2, self.overlap_remover.GetStats()[\"total_overlaps_found\"])   self.assertTrue(self._ensureYorder(\"m1\", \"D25\", \"D13\"))  self.assertTrue(self._ensureXorder(\"m1\", \"D97\", \"D98\"))  self.assertTrue(self._ensureXorder(\"D25\", \"D97\", \"D98\"))  self.assertTrue(self._ensureXorder(\"D13\", \"D97\", \"D98\"))  self.assertEqual(oldD97pos, (d97.left, d97.top)) # ensure D97 hasn't been pushed Running the tests:\n  An example test run\n  Having a huge bank of unit tests helped in refactoring, too. Imagine testing all the necessary scenarios by hand!\nThe final Results were pretty good!\n  A UML diagram after overlap removal\n  Design Patterns Used Memento  Memento was used to remember graph layout positions and then compare mementos to see if anything had ‘changed’ and thus drop out of the Spring layout algorithm early Memento was used to save/restore layouts in my test GUI – assigned to keys 0..9  Blackboard Blackboard pattern used to run layout several times and figure out which was the best, cleanest result using multiple criteria. Each run is a ‘snapshot’\nSnapshot 1 [6] LL 0 NN pre rm overlaps 5 LN 0 scale 1.6 bounds 23 (500, 473) \u003c--- Snapshot 2 [4] LL 0 NN pre rm overlaps 5 LN 1 scale 1.4 bounds 30 (570, 537) Snapshot 3 [5] LL 0 NN pre rm overlaps 6 LN 2 scale 2.0 bounds 17 (444, 393) Snapshot 4 [2] LL 0 NN pre rm overlaps 4 LN 2 scale 1.4 bounds 34 (648, 537) Snapshot 5 [3] LL 0 NN pre rm overlaps 5 LN 4 scale 2.0 bounds 21 (427, 508) Snapshot 6 [1] LL 0 NN pre rm overlaps 10 LN 5 scale 2.0 bounds 18 (485, 379) Python goodness helped in this ‘AI’ smartness\ndef sortfunc(d):  # this does the thinking!  return (d['LL'], d['LN'], d['bounds_area_simple'], -d['scale'], d['NN_pre_OR']) Future  “Line over node” overlap was abandoned as it started to get really complex with a lot of trigonometry and perhaps this area needs a more academic approach Non straight lines and line routing is probably the better direction Adding an understanding of UML semantics is another direction to research, so that e.g. base classes are above derived classes etc.  Overlap Removal Server In 2020 I needed to expose the overlap removal code as an API for javascript to use.\nHere is that small research sub-project https://github.com/abulka/pynsource/tree/master/Research/overlap_removal_server\nResources Code and Links  Overlap removal code is Python, open source Part of my python UML tool PyNSource: Reverse engineer python source code into UML - display UML as Ascii art or PlantUML diagrams in a proper diagramming visual workspace.  Slides on Scribd UML Graph Layout - Andy Talk - March 2011\nSlides as HTML  The problem of laying out UML Spring Layout Mapping layout to Real World OGL MVC Overlap Removal Unit tests and unit test diagrams Memento Design Pattern Blackboard Design Pattern \u0026 Injecting sorting function Future..   Slides as Pdf download View as pdf\n Images Sample Images   before\n    after applying layout\n  ","categories":"","description":"Developing a Layout Algorithm for UML diagrams\n","excerpt":"Developing a Layout Algorithm for UML diagrams\n","ref":"/blog/2011/04/06/uml-layout/","tags":["UML","Diagramming"],"title":"UML Layout"},{"body":"Easy Dependency Injection and Mocking in Ruby\nHere is a simple technique where you can inject mock methods into a class that you are unit testing.\nGiven you have a class ClassA\nclass ClassA  def hi  \"hi\"  end end Using .class_eval You can replace the “hi” method from your unit test, without editing the source code of ClassA at all. You can inject mock methods - whatever.\ndef test_2  ClassA.class_eval do # injecting into ClassA class  def hi  \"hello\"  end  end  a = ClassA.new  assert_equal \"hello\", a.hi end Using .instance_eval The trouble with class_eval is that it alters the class permanently, which is not so good for repeated unit testing where you may be injecting different things in different tests, or not injecting anything at all in some tests etc. I couldn’t figure out how to restore a class in setup/teardown so….instance_eval is probably better as it only affects an instance. Viz:\ndef test_2  a = ClassA.new  a.instance_eval do # injecting into ClassA instance  def hi  \"hello\"  end  end  assert_equal \"hello\", a.hi end The above injection (replacement of the hi method with a different hi method) does not affect the class, but the instance ONLY.\nSource code\nComments Posted by RB on Feb 17th, 2011\nYour example and use-case looks good.\nHowever, it might be nice to have a Ruby testing framework that completely resets your environment after each unit test. Then you could safely use class_eval and have the comfort of only thinking about one unit at a time.\nRails unit testing doesn’t do environment resetting (afaik) (on the code level) - but it does do it on the database level. After each unit-test, the database transaction is rolled-back, so each unit-test is not dependent or influenced by other unit tests.\nThere will also be other unit-testing situations where you will have to use class_eval. For example, you may be testing a method that builds many objects of a class.\nOr, arguably, if using instance_eval, you would have to assume too much about how the code you are testing is written. In testing, all you want to do it test the interface: the high-level view from the outside. You shouldn’t be able to know if the tested code is making new instances of classes containing the method you want to inject or fake-out. Eg a method in an object could make a new instance of its own class, without you knowing!\n-RB\nPosted by Jason on Feb 20th, 2011\nI wonder what the best mocking tool is for Ruby and how it would fit into the above dependency injection scheme. Perhaps this technique is simple enough so you don’t need a mocking framework - just create the mocks as regular classes inside the unit test and away you go.\n","categories":"","description":"","excerpt":"Easy Dependency Injection and Mocking in Ruby\nHere is a simple …","ref":"/blog/2011/03/19/mocking-in-ruby/","tags":["Ruby"],"title":"Mocking in Ruby"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/ruby/","tags":"","title":"Ruby"},{"body":"Recursively Cloning Directories in Ruby using Hard Links\nHard links exist under windows 7 so you can clone huge directories or files without taking up any extra disk space. Both the original and the copy are equal and apps can’t tell the difference between them - because we are using true hard links (not shortcuts or symbolic links).\nBuilt in Windows Command The dos command for cloning a file is simply\nmklink /H original clone If you delete the original file, the clone is still there and indistinguishable from the original file. You can clone as many times as you like and no extra disk space is used.\nRuby code to achieve the same I’m not aware of a way of recursively hard linking directories (files as hard links, sub directories as real directories) in windows or linux using the standard commands, so here is a recursive directory cloning utility written in Ruby. It uses the FileUtils.ln method to do the file cloning. This works under both windows 7 and linux.\n# ln_r # Copy a directory recursively creating hardlinks for files and real dirs for directories # Andy Bulka, Reilly Beacom # version 1.5  require 'fileutils' require 'optparse'  def ln_r source, target, options = {:verbose =\u003e true, :report =\u003e true, :countsize =\u003e false, options[:deletetarget] =\u003e true}   verbose = options[:verbose]  puts \"ln_r copying and hard linking from #{source}to #{target}\" if verbose  puts \"...\" if verbose   raise \"source not a directory\" if not File.directory?(source)   # Add trailing slash  source = File.join(source, \"\")  target = File.join(target, \"\")   # Ensure target dir exists before we start and delete destination files  FileUtils.mkdir_p target  FileUtils.rm_r Dir.glob(File.join(target, '/*')) if options[:deletetarget]   total_file_sizes = 0  Dir.glob(File.join(source, '**/*')).each do | source_path |   target_path = source_path.gsub Regexp.new(\"^\" + source), target  if File.file? source_path   FileUtils.mkdir_p File.dirname(target_path)  FileUtils.ln source_path, target_path  total_file_sizes += File.size(source_path) if options[:countsize]  puts \"created hard link #{target_path}(source: #{source_path}\" if verbose   else  FileUtils.mkdir_p target_path  puts \"created directory \" + target_path if verbose  end  end  puts \"Done copying/linking.\" if verbose   def number_with_delimiter(number, delimiter=\",\")  number.to_s.gsub(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/, \"\\\\1#{delimiter}\")  end  puts \"Bytes saved by linking: #{number_with_delimiter(total_file_sizes/1024000)}Mb\" if options[:countsize]   if options[:report]  puts  puts \"---- RESULT: SOURCE DIRECTORY\"  puts Dir.glob(File.join(source, '/**/*'))  puts \"---- TARGET DIRECTORY\"  puts Dir.glob(File.join(target, '/**/*'))  puts \"---- RESULT END\"  puts  end  end    # This hash will hold all of the options # parsed from the command-line by # OptionParser. options = {}  optparse = OptionParser.new do|opts|  # Set a banner, displayed at the top  # of the help screen.  opts.banner = \"Usage: ln_r.rb [options] source_dir target_dir\"   # Define the options, and what they do  options[:verbose] = false  opts.on( '-v', '--verbose', 'Output more information' ) do  options[:verbose] = true  end   options[:test] = false  opts.on( '-t', '--test', 'Run test copy on test data dirs - Andy only' ) do  options[:test] = true  end   options[:report] = false  opts.on( '-r', '--report', 'Display directory of source and target dirs after finish' ) do  options[:report] = true  end   options[:countsize] = false  opts.on( '-c', '--countsize', 'Display bytes saved by using hard linking' ) do  options[:countsize] = true  end   options[:deletetarget] = true  opts.on( '-d', '--dontdeletetarget', 'Dont rm -r * target directory first' ) do  options[:deletetarget] = false  end   #options[:logfile] = nil  #opts.on( '-l', '--logfile FILE', 'Write log to FILE' ) do|file|  # options[:logfile] = file  #end   # This displays the help screen, all programs are  # assumed to have this option.  opts.on( '-h', '--help', 'Display this screen' ) do  puts opts  exit  end end  # Parse the command-line. Remember there are two forms # of the parse method. The 'parse' method simply parses # ARGV, while the 'parse!' method parses ARGV and removes # any options found there, as well as any parameters for # the options. What's left is the list of files to resize. optparse.parse!  puts \"Being verbose\" if options[:verbose] #puts \"Logging to file #{options[:logfile]}\" if options[:logfile]  if options[:test]  ln_r \"LinkTests1/dirA\", \"LinkTests1/dirB\", options  ln_r \"LinkTests2/dirA\", \"LinkTests2/dirB/MyCopy/Fred\", options  exit end  if ARGV.length \u003c 2  puts optparse.help  exit end  ln_r ARGV[0], ARGV[1], options You can invoke it using:\nruby ln_r.rb [options] dir1 dir2 ... -v, --verbose Output more information -t, --test Run test copy on test data dirs - Andy only -r, --report Display directory of source and target dirs after finish -c, --countsize Display bytes saved by using hard linking -d, --dontdeletetarget Dont rm -r * target directory first -h, --help Display this screen Source code\nLinux built in command Update Feb 2013\nIts true that you can achieve the above in linux with\ncp -lr from to\nwhere -r means recursive copy and -l mean use linking. What about Windows COPY Under windows, the COPY isn’t so smart and so the above ruby script may be of help. Alternatively you can use a port of the linux cp command under windows - and it seems to work OK. See Port of the most important GNU utilities to Windows Comments Posted by Reilly on Dec 20th, 2011\nThe unix/linux/posix command is:\ncp -al dir1 dir2 \"copy [cp] with archive [a] (recursive) and link [l]\" Posted by admin on Dec 20th, 2011\nI wonder if Win 7 / NTFS has similar flags on the DOS copy command?\n","categories":"","description":"","excerpt":"Recursively Cloning Directories in Ruby using Hard Links\nHard links …","ref":"/blog/2011/03/01/cloning-directories-in-ruby/","tags":["Ruby"],"title":"Cloning Directories in Ruby"},{"body":"Let’s compare Python list comprehensions vs. the way Ruby achieves the same thing thing.\nIntent: Loop through a list of numbers and pick out the ones greater than 5, and multiply them by 100. Return them as a list.\nPython #!/usr/bin/env python  # Long explicit way: result = [] for n in range(1,8):  if n \u003e 5:  result.append(n*100) print result # result [600, 700]  # Concise way: print [n*100 for n in [1,2,3,4,5,6,7] if n \u003e 5] # result [600, 700] Ruby #!/usr/bin/env ruby  # Long explicit way: result = [] (1...8).each do |n|  if n \u003e 5  result \u003c\u003c n*100  end end p result # result [600, 700]  # Concise way: p [1,2,3,4,5,6,7].select{|n| n \u003e 5}.map{|n| n*100} # result [600, 700] Thoughts It seems to me that the puzzle (such that it is) consists of two distinct stages.\nThe first stage is to select items from the list and the second stage is to apply a transformation onto each selected element.\n I used to think that the python syntax was superior, but once you get around the idea of the two stages, the ruby syntax makes perfect sense too.\n Also, I guess the “select + map idiom” is so common that the special python syntax wins in that it isn’t telling you how anything is being done – the “list comprehension” just reads better.\nThe ruby version is a little more cryptic to the newcomer I guess and is telling you how everything is being done.\nThe ruby version on the other hand is more general, and would allow other varieties of select/transform/manipulate to get plugged in, and you can have as many as you like e.g.\np (1..10).select{|n| n \u003e 5}.map{|n| n+1}.delete_if{|n| n % 2 == 0} ","categories":"","description":"","excerpt":"Let’s compare Python list comprehensions vs. the way Ruby achieves the …","ref":"/blog/2010/11/18/ruby-vs-python-list-comprehensions/","tags":["Ruby","Python"],"title":"Ruby vs Python list comprehensions"},{"body":"Let’s look at how to refactor an existing architecture to the PureMVC architecture. Your application requires that you display ‘model’ data in some sort of UI ‘view’.\nIntroduction MVC Architectural Pattern I have long been fascinated by the MVC (Model View Controller) architectural pattern, first conceived in the 1960’s. What it promises, to those who can fathom its mysteries, is an orderly way of organising your application architecture. You define a de-coupled domain/business model that is oblivious to any GUI that might be displaying it. A mediating controller class usually looks after the dirty details of moving data between the model and GUI. You can even have multiple GUI representations of your single model e.g. a pie chart view and a bar chart view simultaneously displaying the same information out of the model.\nThere are many variants of MVC, and people use different terminology to mean the same thing, and conversely people use the same terminology to mean different things e.g. the view could be the GUI or it could be the mediating class looking after the GUI, which means it could actually end up meaning the controller…\nModel Gui Mediator Some History.\nI once wrote up a pattern called MGM (Model Gui Mediator) which describes a version of MVC that I thought made sense in today’s modern programming age. Today, GUI views were usually comprised of sophisticated controls/widgets rather than laboriously handcrafted graphic code that needed custom controller code to handle the intricate details of interacting with the view/GUI. Most of that low level controller interaction is now built in to the off the shelf widgets/controls.\nThe controller is now just a mediator between model and view – hence the “M” in MGM (Model-Gui-Mediator). You might prefer to think of the mediator as the controller, so the pattern could well have been called MGC (Model-Gui-Controller). Many modern variants of MVC e.g. MVP (Model View Presenter) and PAC (Presentation Abstraction Controller) and others probably fit into the basic idea of MGM.\nThe behaviour of the MGM architecture is as follows:\nMGM pattern sequence diagram.\nM=Model (Data class) G=Gui (Form with an edit control on it) M=Mediator (Controller class)\nWhat we have illustrated above are two use cases:\n  In the first the user types some text into an edit field on a form, which causes the model to change – the model broadcasts the change and the GUI is updated (watch out for infinite loops here of course, which can be avoided by the gui update not triggering another change event).\n  The second use case is the model changing for some reason (e.g. being loaded from a file or some other part of the system altering the data) and the model broadcasting the change – again the Controller is observing and intercepts the broadcast and updates the GUI.\n  What is interesting about MGM is that it shows how simple the MVC pattern really can be, when understood in terms of today’s modern GUI components. It also serves as a way of contrasting what PureMVC is offering. Read on.\nPureMVC Along comes PureMVC.\nI’ve since (2008-2009) become quite interested in the PureMVC framework because it adds a few things that were missing from MGM.\nPureMVC Conceptual Architecture\nFirstly PureMVC explicitly adds command classes – rather than just burying behaviour in controllers/mediators, we have an official way of organising behaviour. Sure, in MVC and MGM, any controller is free to delegate and invoke command classes to perform behaviour in a more organised way - but in PureMVC the details of this are a little more spelled out.\nSecondly PureMVC adds service location, so that you end up with a nice de-coupled design – events are raised and anyone can register interest in an event/message. Thus the whole architecture becomes a lot more pluggable, flexible and neat.\nThirdly I believe PureMVC addresses scalability – for example it tells you exactly how to add multiple mediators to the system. Multiple commands and data proxies are also supported. You simply register all these classes and specify what noification messages are of interest to each of them.\nRules of PureMVC The model notifies, but doesn’t listen and ultimately knows nothing about anything else in the system. Mediators notify and listen to messages. Commands are invoked (cmd.execute()) automatically by certain messages and they send out messages if they want to.\nThe facade is the communication hub.\nMediators look after gui elements, and this forms the view. Commands forms the controller. Proxies wrap model elements and this forms the model. Note that in the above diagram, there is a one to many relationship between the View and the Mediators, and between the Controller and the Commands, and between the Model and the Proxies.\nRefactoring to PureMVC To show you just how useful and simple incorporating PureMVC can be, I have designed a step by step tutorial on how you introduce a PureMVC command driven, message notification driven architecture to your existing wxpython application.\nWe will start with a simple application that doesn’t even have a model. We will first add a mediator, then a command class and then a proper model.\nThe application is a simple form which displays a textfield. When you hit ENTER, it converts anything you type into uppercase and displays it in the textfield. There is no “model” and no PureMVC architecture.\nThree screenshots of our simple wxPython application.\nWe will use this as our starting point and refactor to PureMVC.\n1. Starting Point Here is the code for our simple wxpython application illustrated above. It has no proper model and does not use PureMVC. This is our starting point.\nStarting point – a simple wxpython app - a single form with a textfield control.\nimport wx  class MyForm(wx.Panel):   def __init__(self, parent):  wx.Panel.__init__(self,parent,id=3)  self.inputFieldTxt = wx.TextCtrl(self, -1, size=(170,-1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)  class AppFrame(wx.Frame):  myForm = None   def __init__(self):  wx.Frame.__init__(self,parent=None, id=-1, title=\"Refactoring to PureMVC\",size=(200,100))  self.myForm = MyForm(self)   self.myForm.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.myForm.inputFieldTxt)   def onSubmit(self, evt):  mydata = self.myForm.inputFieldTxt.GetValue()  print \"got\", mydata  self.myForm.inputFieldTxt.SetValue(mydata.upper())   class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True  if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop()  2. Add a mediator Import PureMVC and add a mediator.\nLet’s add a mediator and create a PureMVC “view”. Mediators in PureMVC are classes which look after a gui – e.g. a wxpython form. Mediators can be built that look after larger or smaller chunks of your gui – depending on your situation. In our case we will build a mediator to look after the one form and its single textfield.\nStep 2 – the Mediator now intercepts the ENTER key event\nand performs the uppercasing behaviour in its onSubmit() handler.\nSteps:\n  Add the puremvc import statements\n  Add a Mediator class\n  Move the binding and onSubmit method out of the AppFrame and into the Mediator class\n  Have the AppFrame create a PureMVC facade and register a mediator instance with the facade\n  import wx  import puremvc.interfaces #ADD import puremvc.patterns.mediator #ADD  class MyForm(wx.Panel):   def __init__(self, parent):  wx.Panel.__init__(self,parent,id=3)  self.inputFieldTxt = wx.TextCtrl(self, -1, size=(170,-1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)  class MyFormMediator(puremvc.patterns.mediator.Mediator, puremvc.interfaces.IMediator): # ADD THIS CLASS  NAME = 'MyFormMediator'   def __init__(self, viewComponent):  super(MyFormMediator, self).__init__(MyFormMediator.NAME, viewComponent)   self.viewComponent.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.viewComponent.inputFieldTxt)   def listNotificationInterests(self):  return []   def handleNotification(self, notification):  pass   def onSubmit(self, evt):  mydata = self.viewComponent.inputFieldTxt.GetValue()  print \"got (mediator)\", mydata  self.viewComponent.inputFieldTxt.SetValue(mydata.upper())  class AppFrame(wx.Frame):  myForm = None   def __init__(self):  wx.Frame.__init__(self,parent=None, id=-1, title=\"Refactoring to PureMVC\",size=(200,100))  self.myForm = MyForm(self)   self.mvcfacade = puremvc.patterns.facade.Facade.getInstance() #ADD  self.mvcfacade.registerMediator(MyFormMediator(self.myForm )) #ADD  # self.myForm.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.myForm.inputFieldTxt) #DELETE   # def onSubmit(self, evt): #DELETE THIS METHOD  # mydata = self.myForm.inputFieldTxt.GetValue()  # print \"got\", mydata  # self.myForm.inputFieldTxt.SetValue(mydata.upper())  class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True  if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop() So now, instead of our AppFrame class binding to the ENTER key event and handling it via an onSubmit method, the mediator now does this – binding to the ENTER event in the constructor of the mediator.\nAll the AppFrame does now is create a PureMVC facade and register a mediator instance with the facade. Notice that we pass the GUI object, in this case the form, to the mediator as a parameter to the mediator’s constructor – the GUI object is referred to by the mediator as the viewComponent.\nThe application now behaves exactly as before, except we now get the following diagnostic message:\nwhich proves the mediator is active. Of course this step doesn’t really buy us any functionality yet, but at least we are on the road…\n 3. Command class Move the business logic into a Command class.\nLet’s now move the behaviour (changing text to uppercase) out of the mediator and into a proper command class. This makes the mediator dumber – which is good, as all we want the mediator to do is look after the GUI, not house application logic.\nStep 3 – the uppercasing behaviour is moved to the command class.\nSteps:\n  Import the puremvc command import\n  Create a command class DataSubmittedCommand and implement execute\n  Move the logic for updating the GUI display with uppercase text - out of the mediator and into the command object’s execute method. The mediator now simply raises a DATA_SUBMITTED notification\n  Define our own facade class called AppFacadeand\n  Define the DATA_SUBMITTED message\n  Override getInstance() to implement the singleton design pattern ( just return a new AppFacade)\n  Override initializeController() registering the DataSubmittedCommand class, associating it with the DATA_SUBMITTED message. In other words, whenever the DATA_SUBMITTED message is raised, DataSubmittedCommand.execute() is called.\n    Use our new concrete Facade rather than the default Facade in the AppFrame class startup code.\n  import wx  import puremvc.interfaces import puremvc.patterns.mediator import puremvc.patterns.command #ADD  class MyForm(wx.Panel):   def __init__(self, parent):  wx.Panel.__init__(self,parent,id=3)  self.inputFieldTxt = wx.TextCtrl(self, -1, size=(170,-1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)  class MyFormMediator(puremvc.patterns.mediator.Mediator, puremvc.interfaces.IMediator):  NAME = 'MyFormMediator'   def __init__(self, viewComponent):  super(MyFormMediator, self).__init__(MyFormMediator.NAME, viewComponent)   self.viewComponent.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.viewComponent.inputFieldTxt)   def listNotificationInterests(self):  return []   def handleNotification(self, notification):  pass   def onSubmit(self, evt):  mydata = self.viewComponent.inputFieldTxt.GetValue()  print\"got (mediator)\", mydata  # self.viewComponent.inputFieldTxt.SetValue(mydata.upper()) # DELETE THIS LINE  self.sendNotification(AppFacade.DATA_SUBMITTED, mydata, self.viewComponent) #ADD THIS LINE  class DataSubmittedCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand): #ADD CLASS  def execute(self, notification):  print \"execute (command)\", notification.getBody()  mydata = notification.getBody()  viewComponent = notification.getType()  viewComponent.inputFieldTxt.SetValue(mydata.upper())  class AppFacade(puremvc.patterns.facade.Facade): #ADD CLASS  DATA_SUBMITTED = \"DATA_SUBMITTED\"   @staticmethod  def getInstance():  return AppFacade()   def initializeController(self):  super(AppFacade, self).initializeController()  super(AppFacade, self).registerCommand(AppFacade.DATA_SUBMITTED, DataSubmittedCommand)  class AppFrame(wx.Frame):  myForm = None  mvcfacade = None #ADD   def __init__(self):  wx.Frame.__init__(self,parent=None, id=-1, title=\"Refactoring to PureMVC\",size=(200,100))  self.myForm = MyForm(self)   # self.mvcfacade = puremvc.patterns.facade.Facade.getInstance() # DELETE THIS LINE  self.mvcfacade = AppFacade.getInstance() #ADD THIS LINE  self.mvcfacade.registerMediator(MyFormMediator(self.myForm))  class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True  if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop() Notice that we had to create our own concrete Facade class instead of merely creating an instance of the default Facade class that PureMVC provides. This is because we now want to start defining our own messages (e.g. DATA_SUBMITTED).\nAlso notice (and this is the crux of this refactoring step) that the mediator no longer performs the business logic of converting the text to uppercase. Now instead it simply raises a notification DATA_SUBMITTED which the command class then picks up and acts upon.\nAgain, as with any good refactoring step, the behaviour of the application is exactly the same as before except for our diagnostic message which now emits:\n 4. GUI access logic Move the ability to access the GUI out of the Command class.\nHey - isn’t the command class doing too much now? Notice, in the previous refactoring step, that the command class is not only converting the text to upercase (our simple business logic), but is also getting a bit too big for its boots – it is also stuffing the result back into the gui itself – altogether bypassing the meditor. We are actually encouraging this because we pass both the gui textfield data and a reference to the textfield as part of the notification message. This gives the command class direct access to the gui. The command class should really simply raise a notification and let the mediator do what it was designed to do, and stuff the uppercase text into the appropriate part of the GUI. Let’s now do this.\nLet’s now have the command raise a notification message after it has done its work, and let the mediator look after putting the result back into the gui.\nSteps:\n  Create a new message type DATA_CHANGED in the facade - don’t register it against a command since it is simply a message that will be listened for by the existing meditor. In PureMVC, message notifications can be associated with the triggering of commands or simply be listened for by mediators.\n  Add the message DATA_CHANGED to the list of messages the mediator is interested in viz.\ndef listNotificationInterests(self):  return [ AppFacade.DATA_CHANGED ]   Inside the mediator’s handleNotification method, check for the message matching DATA_CHANGED and move the logic that updates the gui in here.\n  We stop passing the meditor’s view component as part of the message to the command – the command class doesn’t need that reference to the gui anymore.\n  Ironically the code that updates the GUI started in wxapp, then moved to the meditor, then into the command class, then end up now back in the meditor again! What sort of refactoring is this!?\nWell the point is that we have separated two aspects of that code - the uppercase logic is now correctly in the command class and the updating of the GUI correctly in the mediator class. The roles are being performed by the correct classes. The meditor is the only one that knows about the intricacies of the GUI. And its all notification message driven and nicely de-coupled – the command class is triggered in response to an abstract notification DATA_SUBMITTED and sends the result back to the mediator using another abstract notification DATA_CHANGED. PureMVC is working as intended (though we don’t have a proper model yet).\nimport wx  import puremvc.interfaces import puremvc.patterns.mediator import puremvc.patterns.command  class MyForm(wx.Panel):   def __init__(self, parent):  wx.Panel.__init__(self,parent,id=3)  self.inputFieldTxt = wx.TextCtrl(self, -1, size=(170,-1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)  class MyFormMediator(puremvc.patterns.mediator.Mediator, puremvc.interfaces.IMediator):  NAME = 'MyFormMediator'   def __init__(self, viewComponent):  super(MyFormMediator, self).__init__(MyFormMediator.NAME, viewComponent)   self.viewComponent.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.viewComponent.inputFieldTxt)   def listNotificationInterests(self):  return [ AppFacade.DATA_CHANGED ] #ADD   def handleNotification(self, notification):  if notification.getName() == AppFacade.DATA_CHANGED: #ADD  print \"handleNotification (mediator)\", notification.getBody() #ADD  mydata = notification.getBody() #ADD  self.viewComponent.inputFieldTxt.SetValue(mydata) #ADD   def onSubmit(self, evt):  mydata = self.viewComponent.inputFieldTxt.GetValue()  print \"got (mediator)\", mydata  self.sendNotification(AppFacade.DATA_SUBMITTED, mydata, self.viewComponent)  class DataSubmittedCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand):  def execute(self, notification):  print \"execute (command)\", notification.getBody()  mydata = notification.getBody()  # viewComponent = notification.getType() # DELETE THIS LINE  # viewComponent.inputFieldTxt.SetValue(mydata.upper()) # DELETE THIS LINE  self.sendNotification(AppFacade.DATA_CHANGED, mydata.upper()) #ADD   class AppFacade(puremvc.patterns.facade.Facade):   DATA_SUBMITTED = \"DATA_SUBMITTED\"  DATA_CHANGED = \"DATA_CHANGED\" #ADD   @staticmethod  def getInstance():  return AppFacade()   def initializeController(self):  super(AppFacade, self).initializeController()   super(AppFacade, self).registerCommand(AppFacade.DATA_SUBMITTED, DataSubmittedCommand)  class AppFrame(wx.Frame):  myForm = None  mvcfacade = None   def __init__(self):  wx.Frame.__init__(self,parent=None, id=-1, title=\"Refactoring to PureMVC\",size=(200,100))  self.myForm = MyForm(self)   self.mvcfacade = AppFacade.getInstance()  self.mvcfacade.registerMediator(MyFormMediator(self.myForm ))  class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True  if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop() Our diagnostic now shows how the flow of execution moves from the GUI to the mediator, to the command, and then back to the mediator again.\n 5. Add a Model You’ve been waiting for this step, I know. Let’s add a proper model.\nAdding a model to our architecture.\nIn the PureMVC framework’s way of looking at things, the Model should be wrapped by a “Model Proxy” class. Just like the mediator wraps and looks after the GUI, the proxy wraps and looks after the model. In this refactoring step, we are going to add the Proxy class and use it as the model.\nFrom the command class point of view, instead of putting the result of the business logic straight back into the GUI, the command class now writes the uppercase string to the model proxy. The model proxy then sends out a notification that the model data has changed - which the mediator picks up and acts on by updating the form inputfield control/widget. Basically we have a complete PureMVC architecture functioning now (see sequence diagram below).\nSteps:\n  Import the proxy namespace\n  Define a class DataModelProxy which will hold the data (the string we are entering in and upper-casing). The proxy class sends a notification whenever the data changes, enabling e.g. the mediator to update the gui.\n  Create and register the the Proxy class in the startup phase\n  Change the command so that it looks up the model proxy and updates it with the uppercase string.\n  Mediator is told about the data that changes by the model proxy raising a DATA_CHANGED message. In response, the meditor takes the data and puts it in the GUI.\n  When the mediator has been notified by the model - how does the mediator get access to the model proxy data?\nWell it can be given a reference to the data proxy so that it can get the data itself, or the notification message can contain the actual data (remember that notification messages have two additional parameters after the message name – getBody() and getType() and it is up to you what you put there. Finally, the Mediator is within its rights to look up the data proxy itself if it wants using the self.facade.retrieveProxy(...) lookup technique.\nimport wx  import puremvc.interfaces import puremvc.patterns.mediator import puremvc.patterns.command import puremvc.patterns.proxy #ADD  class MyForm(wx.Panel):   def __init__(self, parent):  wx.Panel.__init__(self,parent,id=3)  self.inputFieldTxt = wx.TextCtrl(self, -1, size=(170,-1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)  class MyFormMediator(puremvc.patterns.mediator.Mediator, puremvc.interfaces.IMediator):  NAME = 'MyFormMediator'   def __init__(self, viewComponent):  super(MyFormMediator, self).__init__(MyFormMediator.NAME, viewComponent)   self.viewComponent.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.viewComponent.inputFieldTxt)   def listNotificationInterests(self):  return [ AppFacade.DATA_CHANGED ]   def handleNotification(self, notification):  if notification.getName() == AppFacade.DATA_CHANGED:  print \"handleNotification (mediator)\", notification.getBody()  mydata = notification.getBody()  self.viewComponent.inputFieldTxt.SetValue(mydata)   def onSubmit(self, evt):  mydata = self.viewComponent.inputFieldTxt.GetValue()  print \"got (mediator)\", mydata  self.sendNotification(AppFacade.DATA_SUBMITTED, mydata, self.viewComponent)  class DataSubmittedCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand):  def execute(self, notification):  print \"execute (command)\", notification.getBody()  mydata = notification.getBody()  # self.sendNotification(AppFacade.DATA_CHANGED, mydata.upper()) # DELETE LINE  self.datamodelProxy = self.facade.retrieveProxy(DataModelProxy.NAME) #ADD  self.datamodelProxy.setData(mydata.upper()) #ADD   class DataModelProxy(puremvc.patterns.proxy.Proxy): #ADD   NAME = \"DataModelProxy\"   def __init__(self):  super(DataModelProxy, self).__init__(DataModelProxy.NAME, [])  self.data = \"\"   def setData(self, data):  self.data = data  print \"setData (model)\", data  self.sendNotification(AppFacade.DATA_CHANGED, self.data)  class AppFacade(puremvc.patterns.facade.Facade):   DATA_SUBMITTED = \"DATA_SUBMITTED\"  DATA_CHANGED = \"DATA_CHANGED\"   @staticmethod  def getInstance():  return AppFacade()   def initializeController(self):  super(AppFacade, self).initializeController()   super(AppFacade, self).registerCommand(AppFacade.DATA_SUBMITTED, DataSubmittedCommand)   class AppFrame(wx.Frame):  myForm = None  mvcfacade = None   def __init__(self):  wx.Frame.__init__(self,parent=None, id=-1, title=\"Refactoring to PureMVC\",size=(200,100))  self.myForm = MyForm(self)   self.mvcfacade = AppFacade.getInstance()  self.mvcfacade.registerMediator(MyFormMediator(self.myForm ))  self.mvcfacade.registerProxy(DataModelProxy()) #ADD  class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True  if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop()  Taking Stock Intermission – Taking Stock.\nAt this stage the PureMVC architecture is fully operational.\nHere is the class diagram:\nClass diagram of our application thus far.\nHere is the sequence diagram:\nSequence diagram of what happens after the user types in some text\nand hits ENTER in the GUI.\nNote that the proxy, mediator and command classes actually have a very convenient sendNotification method on themselves (rather than having a reference to the facade’s sendNotification method as illustrated in the above sequence diagram). In actuality, these self.sendNotification methods ultimately get routed to the facade anyway, so the sequence diagram above is essentially correct.\n “Aha” moment – several roles have been distilled out of two hacky lines of code\n Its interesting that we have distilled three roles out of the original, two simple lines of code:\nmydata = self.myForm.inputFieldTxt.GetValue() self.myForm.inputFieldTxt.SetValue(mydata.upper()) The above code gets some user input text, converts it to uppercase and stuffs it back into the GUI. After our PureMVC refactoring steps, those roles are now spread out across various classes and a major architectural revamp. The roles are:\n  Getting the data in and out of the GUI (mediator)\n  Converting the text to uppercase (command)\n  And we have added in an additional role which the original code didn’t do\n Holding and storing an independent representation of the text being displayed (model proxy)  Sure, we’ve added complexity – boy have we ever. But now we have something amazingly scalable. We won’t be scaling this application up in this tutorial, however there are a couple more refactoring steps to do in order to tidy up a few things.\n 6. Model Proxy Add a real Model behind the Model Proxy and Initialise the Model.\nLet’s now add a proper model that the model proxy wraps. In our simple example so far, this step seems redundant as it may seem easier to keep the string stored in the model proxy. Why not make the model proxy be the model?\nIn more complex projects, model proxies can become properly useful – possibly representing a number of model objects under the one model proxy, or even returning result sets due to the underlying data model being a database.\nAnother reason to separate the ModelProxy from the Model is that the ModelProxy class is free to “play ball” with the PureMVC framework e.g. sending out various notification messages whenever data gets changed etc. whereas a Model class is typically oblivious to such things (and probably should remain so). In our example, the DataModelProxy sends out a DATA_CHANGED notification – both in the constructor, and also whenever setData() is called.\nAdding a real model behind the model proxy.\nSteps:\n  Add a proper model class Data and have the DataModelProxy wrap it.\n  Initialise the model with an initial string - and watch the default text appear in the GUI when the application starts up!\n  import wx  import puremvc.interfaces import puremvc.patterns.mediator import puremvc.patterns.command import puremvc.patterns.proxy  class MyForm(wx.Panel):   def __init__(self, parent):  wx.Panel.__init__(self,parent,id=3)  self.inputFieldTxt = wx.TextCtrl(self, -1, size=(170,-1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)  class MyFormMediator(puremvc.patterns.mediator.Mediator, puremvc.interfaces.IMediator):  NAME = 'MyFormMediator'   def __init__(self, viewComponent):  super(MyFormMediator, self).__init__(MyFormMediator.NAME, viewComponent)   self.viewComponent.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.viewComponent.inputFieldTxt)   def listNotificationInterests(self):  return [ AppFacade.DATA_CHANGED ]   def handleNotification(self, notification):  if notification.getName() == AppFacade.DATA_CHANGED:  print \"handleNotification (mediator)\", notification.getBody()  mydata = notification.getBody()  self.viewComponent.inputFieldTxt.SetValue(mydata)   def onSubmit(self, evt):  mydata = self.viewComponent.inputFieldTxt.GetValue()  print \"got (mediator)\", mydata  self.sendNotification(AppFacade.DATA_SUBMITTED, mydata, self.viewComponent)  class DataSubmittedCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand):  def execute(self, notification):  print \"execute (command)\", notification.getBody()  mydata = notification.getBody()  self.datamodelProxy = self.facade.retrieveProxy(DataModelProxy.NAME)  self.datamodelProxy.setData(mydata.upper())  class DataModelProxy(puremvc.patterns.proxy.Proxy):   NAME = \"DataModelProxy\"   def __init__(self):  super(DataModelProxy, self).__init__(DataModelProxy.NAME, [])  #self.data = \"\" # DELETE THIS LINE  self.realdata = Data() #ADD  self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data) #ADD   def setData(self, data):  #self.data = data # DELETE THIS LINE  self.realdata.data = data #ADD  print \"setData (model)\", data  #self.sendNotification(AppFacade.DATA_CHANGED, self.data) # DELETE THIS LINE  self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data) #ADD  class Data: #ADD CLASS  def __init__(self):  self.data = \"Hello - hit enter\"  class AppFacade(puremvc.patterns.facade.Facade):   DATA_SUBMITTED = \"DATA_SUBMITTED\"  DATA_CHANGED = \"DATA_CHANGED\"   @staticmethod  def getInstance():  return AppFacade()   def initializeController(self):  super(AppFacade, self).initializeController()   super(AppFacade, self).registerCommand(AppFacade.DATA_SUBMITTED, DataSubmittedCommand)   class AppFrame(wx.Frame):  myForm = None  mvcfacade = None   def __init__(self):  wx.Frame.__init__(self,parent=None, id=-1, title=\"Refactoring to PureMVC\",size=(200,100))  self.myForm = MyForm(self)   self.mvcfacade = AppFacade.getInstance()  self.mvcfacade.registerMediator(MyFormMediator(self.myForm ))  self.mvcfacade.registerProxy(DataModelProxy())  class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True  if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop() The Application Initialisation Sequence Getting intitial Model data into the GUI.\nA nice effect here is that the string “Hello - hit enter” in the Data class magically appears in the GUI when the application starts up. How cool – some of this PureMVC architecture is starting to pay off. How does this happen? Well, notice that the DataModelProxy sends out a DATA_CHANGED notification in its constructor (when it is also creating the instance of the real model Data class). The mediator intercepts this notification and displays the string in the GUI form.\nTwo screenshots of our PureMVC wxPython application, showing how the model data magically appears in the GUI form on application startup.\n 7. Startup code Move the startup code into a startup command class\nPersonally I’m not convinced this step is really necessary - however this step follows the convention on how PureMVC applications are put together.\nThe new startup command class.\nMoving most of the startup code into its own command class may have the benefit of organising your code a little more, at the cost of complexity – I mean, we already have a nice place for constructing classes etc in the constructor of the AppFrame class. Even if we move some startup code into its own startup command class, we still need to create the form and the facade in AppFrame, so why not keep all the startup code in the one place? On the other hand, by moving what we can into the startup command, we may be helping decouple the AppFrame startup code from the knowledge of all the other clases involved in your framework e.g. mediators, commands etc. Certainly in a Flex application where namespaces are tightly controlled, or even a more serious python application where namespaces are more of an issue, having a startup comand class is a good thing.\n  Move the startup code into a startup command class\n  Change our initialisation to invoke the startup command via a notification message\n  import wx  import puremvc.interfaces import puremvc.patterns.mediator import puremvc.patterns.command import puremvc.patterns.proxy  class MyForm(wx.Panel):   def __init__(self, parent):  wx.Panel.__init__(self,parent,id=3)  self.inputFieldTxt = wx.TextCtrl(self, -1, size=(170,-1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)  class MyFormMediator(puremvc.patterns.mediator.Mediator, puremvc.interfaces.IMediator):  NAME = 'MyFormMediator'   def __init__(self, viewComponent):  super(MyFormMediator, self).__init__(MyFormMediator.NAME, viewComponent)   self.viewComponent.Bind(wx.EVT_TEXT_ENTER, self.onSubmit, self.viewComponent.inputFieldTxt)   def listNotificationInterests(self):  return [ AppFacade.DATA_CHANGED ]   def handleNotification(self, notification):  if notification.getName() == AppFacade.DATA_CHANGED:  print \"handleNotification (mediator)\", notification.getBody()  mydata = notification.getBody()  self.viewComponent.inputFieldTxt.SetValue(mydata)   def onSubmit(self, evt):  mydata = self.viewComponent.inputFieldTxt.GetValue()  print \"got (mediator)\", mydata  self.sendNotification(AppFacade.DATA_SUBMITTED, mydata, self.viewComponent)  class DataSubmittedCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand):  def execute(self, notification):  print \"execute (command)\", notification.getBody()  mydata = notification.getBody()  self.datamodelProxy = self.facade.retrieveProxy(DataModelProxy.NAME)  self.datamodelProxy.setData(mydata.upper())  class StartupCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand): #ADD CLASS  def execute(self, notification):  print \"startup execute (command)\", notification.getBody(), notification.getType()  wxapp = notification.getBody()   self.facade.registerMediator(MyFormMediator(wxapp.myForm))  self.facade.registerProxy(DataModelProxy())  class DataModelProxy(puremvc.patterns.proxy.Proxy):   NAME = \"DataModelProxy\"   def __init__(self):  super(DataModelProxy, self).__init__(DataModelProxy.NAME, [])  self.realdata = Data()  self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data)   def setData(self, data):  self.realdata.data = data  print \"setData (model)\", data  self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data)  class Data:  def __init__(self): self.data=\"Hello - hit enter\"  class AppFacade(puremvc.patterns.facade.Facade):   STARTUP = \"STARTUP\" #ADD  DATA_SUBMITTED = \"DATA_SUBMITTED\"  DATA_CHANGED = \"DATA_CHANGED\"   @staticmethod  def getInstance():  return AppFacade()   def initializeController(self):  super(AppFacade, self).initializeController()   super(AppFacade, self).registerCommand(AppFacade.STARTUP, StartupCommand) #ADD  super(AppFacade, self).registerCommand(AppFacade.DATA_SUBMITTED, DataSubmittedCommand)   def startup(self, app): #ADD METHOD  self.sendNotification( AppFacade.STARTUP, app )  class AppFrame(wx.Frame):  myForm = None  mvcfacade = None   def __init__(self):  wx.Frame.__init__(self,parent=None, id=-1, title=\"Refactoring to PureMVC\",size=(200,100))  self.myForm = MyForm(self)   self.mvcfacade = AppFacade.getInstance()  # self.mvcfacade.registerMediator(MyFormMediator(self.myForm )) # DELETE  # self.mvcfacade.registerProxy(DataModelProxy()) # DELETE  self.mvcfacade.startup(self) #ADD  class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True  if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop() Conclusion Here is the final UML.\nFinal UML of our example\nYou may notice that there are hardly any dependencies between classes. This is because classes communicate with each other via the PureMVC message notification system. This takes the form of a string message broadcast to the “world” e.g. e.g. facade.sendNotification(“DATA_CHANGED”, notificationMsg) - the sender doesn’t really care who handles it. Or it can take the form of looking up model instances, again by string references e.g. facade.retreiveProxy(“datamodelproxy1”). We end up with a very decoupled design. Nice.\nToo much Complexity? This series of refactorings has shown how you can really complicate your application by utilising the PureMVC framework. :-)\nSeriously, on the positive side, you now have a scalable architecture where you can add more notification messages, more mediators, more commands – and everything will fit together. I think that a framework has value not just because of what it does, but rather because it guides you in how to structure your application – how to name your classes and where to put them, and how they play together.\nIf your application is simple it may not be worthwhile incorporating PureMVC, however hopefully this tutorial has shown you that it is not that hard to start with the PureMVC approach. I may have inspired you to use PureMVC with even your simple apps!\nFinally, this tutorial has shown that you can hack something up in wxPython and then later, switch to PureMVC when you need to, in a step by step way.\nSource code for all the steps is available here.\nIf you prefer a java example walkthrough, click here.\n-Andy Bulka\nMarch 2009\nP.S. This blog posting was presented as a talk to the Melbourne Patterns Group on the 1st April, 2009.\nComments Posted by Arun George on Feb 15th, 2012 Great article on pureMVC and its applicalbility through a simple example. This is cool. A very simple example which explains the complexity :) .\nPosted by Byron Harris on May 25th, 2012 Thanks for providing this example. It helps me in applying the concepts in the PureMVC documentation to Python and wxPython.\nA few minor points about the example code:\n  In the DataSubmittedCommand.execute(), it’s not necessary to add attribute datamodelProxy since Command classes are meant to be stateless. Therefore you can just make datamodelProxy a method variable.\n  In StartupCommand.execute(), the variable named wxapp is inappropriate named. It’s actually an AppFrame instance that is passed.\n  Posted by T.Javed on Sep 25th, 2012 Thank You so much!\nI had read all the pureMVC documentation but was finding it hard to grasp it until I came across this nice little tutorial. It helped me a lot to clearly understand the pureMVC concept and implementation.\ncheers!\nPosted by Demolishun on Oct 20th, 2012 Putting logic in the controller does not make sense to me:\nhttp://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model\nhttp://stackoverflow.com/questions/235233/asp-net-mvc-should-business-logic-exist-in-controllers\nI am starting down the path to using pureMVC in my projects, but your example is confusing. It seems to me that the controller is supposed to be light weight and act as glue. What is the reasoning for putting the business logic in the controller and not the model?\nWhen I began to understand MVC it clicked in my head that the model would be independent and could be swapped out just like the view. I am also a little concerned about the AppFrame knowing about the Facade. This makes it harder to swap out the view. Or am I looking at this the wrong way?\n Java Example Refactoring to PureMVC - Java\nHere is a Java version of the tutorial I originally wrote in wxPython. It leaves out most of the commentary and concentrates on the code, so please read the original tutorial for more detail about the meaning of the refactoring steps.\nI have used the same class names and the logic is identical (except for the parameters to the notification message DATA_SUBMITTED, which I have swapped around due to the fact that in the Java PureMVC framework the getBody() parameter is of type object whereas in dynamic Python the type of this paramter is more flexible – more explanation is found below).\n1. Starting Point Step 1. Create a Basic Java GUI application form\nCreate a Java GUI application. Either hand code it or e.g. use Netbeans to kick start you. Then drop a\njavax.swing.JTextField jTextField1\nto the form. Don’t bother adding any behaviour yet, lets get cracking with the refactoring.\n2. Add a mediator Step 2. Import PureMVC and add a mediator\nHere is the mediator.\n/* * MyFormMediator.java */ package org.andy;  import org.puremvc.java.patterns.mediator.Mediator;  import org.puremvc.java.interfaces.INotification; import javapuremvcminimal01.JavaPureMVCMinimal01Form;  import java.awt.event.ActionEvent; import java.awt.event.ActionListener;  public class MyFormMediator extends Mediator implements ActionListener {   public static final String NAME = \"MyFormMediator\";   public MyFormMediator(JavaPureMVCMinimal01Form viewComponent)  {  super(NAME, null);   setViewComponent(viewComponent);  viewComponent.inputFieldTxt.addActionListener(this);  }   public void actionPerformed(ActionEvent evt) {  JavaPureMVCMinimal01Form form = (JavaPureMVCMinimal01Form) viewComponent;   form.inputFieldTxt.setText(form.inputFieldTxt.getText().toUpperCase());  } } Here is the application startup code, which was generated automatically by Netbeans 6.5 and the startup method was modified to create the PureMVC facade and mediator.\n/* * JavaPureMVCMinimal01App.java */  package javapuremvcminimal01;  import org.jdesktop.application.Application; import org.jdesktop.application.SingleFrameApplication;  import org.puremvc.java.patterns.facade.Facade; import org.andy.MyFormMediator;  /** * The main class of the application. * Based on a Netbeans 6.5 template. */ public class JavaPureMVCMinimal01App extends SingleFrameApplication {  public JavaPureMVCMinimal01Form myForm;   /** * At startup create and show the main frame of the application. */  @Override protected void startup() {  myForm = new JavaPureMVCMinimal01Form(this);  Facade mvcfacade = Facade.getInstance();  mvcfacade.registerMediator(new MyFormMediator(myForm));  show(myForm);  }  …  … } Since we need access to the textField in the swing form generated by netbeans, we declare a public variable for ourselves. Netbeans seems to make all the gui elements private – so we are fighting that.\n/* * JavaPureMVCMinimal01Form.java * (by default Netbeans names this JavaPureMVCMinimal01View but I renamed it). */  package javapuremvcminimal01;  import javax.swing.JFrame;  public class JavaPureMVCMinimal01Form extends FrameView {   public javax.swing.JTextField inputFieldTxt; // ADD   public JavaPureMVCMinimal01Form(SingleFrameApplication app) {  super(app);   initComponents();  inputFieldTxt = jTextField1; // ADD   …  …  } 3. Command class Step 3. Move the business logic into a Command class\nLet’s now move the behaviour (changing text to uppercase) out of the mediator and into a proper command class.\n/* * DataSubmittedCommand.java */  package org.andy;  import org.puremvc.java.interfaces.ICommand; import org.puremvc.java.interfaces.INotification; import org.puremvc.java.patterns.command.SimpleCommand;  import javapuremvcminimal01.JavaPureMVCMinimal01Form;  public class DataSubmittedCommand extends SimpleCommand implements ICommand {   public void execute(INotification notification)  {  String mydata = (String) notification.getType();  JavaPureMVCMinimal01Form viewComponent = (JavaPureMVCMinimal01Form) notification.getBody();  viewComponent.inputFieldTxt.setText(mydata.toUpperCase());  } } When the execute method gets called the first thing the execute code should do is decode the notification message for juicy information. Its fairly arbitrary how you use the notification class fields .getBody() and getType(). In the java implementation the only limitation is that getBody() holds an object and getType() a string. Use your own convention on how to use these two parameters, which can be different for each unique notifcation message - just make sure your sendNotification sends the right things to match how you are decoding things.\nIn the example so far, in the notification message DATA_SUBMITTED I use the getBody() field to pass a reference to the viewcomponent, i.e. the form. This is only a temporary situation, we will later change this so that the command simply raises a message and let the mediator deal with the viewcomponent (which is the mediators job). I use the getType() parameter of the notification message to hold the text of the edit control at the time when the use hit ENTER.\nNow the mediator has changed a little. It no longer does the work of uppercase, it delegates this entirely to the command class simply by raising a DATA_SUBMITTED message:\n/* * MyFormMediator.java */ package org.andy;  import org.puremvc.java.patterns.mediator.Mediator;  import org.puremvc.java.interfaces.INotification; import javapuremvcminimal01.JavaPureMVCMinimal01Form;  import java.awt.event.ActionEvent; import java.awt.event.ActionListener;  public class MyFormMediator extends Mediator implements ActionListener {   public static final String NAME = \"MyFormMediator\";   public MyFormMediator(JavaPureMVCMinimal01Form viewComponent)  {  super(NAME, null);   setViewComponent(viewComponent);  viewComponent.inputFieldTxt.addActionListener(this);  }   public void actionPerformed(ActionEvent evt) {  JavaPureMVCMinimal01Form form = (JavaPureMVCMinimal01Form) viewComponent;   // form.inputFieldTxt.setText(form.inputFieldTxt.getText().toUpperCase()); // DELETE THIS LINE  this.sendNotification(AppFacade.DATA_SUBMITTED, viewComponent, form.inputFieldTxt.getText());  }  } Note that another way to send a notification message (instead of sendNotification) is:\nimport org.puremvc.java.patterns.observer.Notification;  this.facade.notifyObservers(new Notification(AppFacade.DATA_SUBMITTED,  viewComponent, form.inputFieldTxt.getText())); however this is a bit PureMVC old school and not quite as clean as what we have used.\nWe also have needed to create our own concrete Facade class so that we can define our own message types.\n/* * AppFacade.java */  package org.andy;  import org.puremvc.java.patterns.facade.Facade;  public class AppFacade extends Facade {   public static final String DATA_SUBMITTED = \"DATA_SUBMITTED\";   private static AppFacade instance = null;   public static AppFacade getInst()  {  if (instance == null) {  instance = new AppFacade();  }  return (AppFacade) instance;  }   @Override  protected void initializeController()  {  super.initializeController();   registerCommand(DATA_SUBMITTED, DataSubmittedCommand.class);  } } And of course we instantiate our own concrete facade instead of the base class facade:\n/* * JavaPureMVCMinimal01App.java */  …  …   @Override protected void startup() {  myForm = new JavaPureMVCMinimal01Form(this);   Facade mvcfacade = Facade.getInstance();  Facade mvcfacade = AppFacade.getInst();   mvcfacade.registerMediator(new MyFormMediator(myForm));  show(myForm);  } 4. GUI Access Logic Step 4. Move the ability to access the GUI out of the Command class\nLet’s now have the command raise a notification message after it has done its work, and let the mediator look after putting the result back into the gui.\n/* * MyFormMediator.java */ package org.andy;  import org.puremvc.java.patterns.mediator.Mediator;  import org.puremvc.java.interfaces.INotification; import javapuremvcminimal01.JavaPureMVCMinimal01Form;  import java.awt.event.ActionEvent; import java.awt.event.ActionListener;  public class MyFormMediator extends Mediator implements ActionListener {   public static final String NAME = \"MyFormMediator\";   public MyFormMediator(JavaPureMVCMinimal01Form viewComponent)  {  super(NAME, null);   setViewComponent(viewComponent);  viewComponent.inputFieldTxt.addActionListener(this);  }   public void actionPerformed(ActionEvent evt) {  JavaPureMVCMinimal01Form form = (JavaPureMVCMinimal01Form) viewComponent;   // form.inputFieldTxt.setText(form.inputFieldTxt.getText().toUpperCase()); DELETE  this.sendNotification(AppFacade.DATA_SUBMITTED, viewComponent, form.inputFieldTxt.getText());  }   @Override  public String[] listNotificationInterests()  {  return new String[] {AppFacade.DATA_CHANGED};  }   @Override  public void handleNotification(INotification notification)  {  if(notification.getName().equals(AppFacade.DATA_CHANGED))  {  System.out.println(\"handleNotification (mediator) \" + notification.getType());   String mydata = (String) notification.getType();  JavaPureMVCMinimal01Form form = (JavaPureMVCMinimal01Form) viewComponent;  form.inputFieldTxt.setText(mydata);  }  } }  /* * DataSubmittedCommand.java */  package org.andy;  import org.puremvc.java.interfaces.ICommand; import org.puremvc.java.interfaces.INotification; import org.puremvc.java.patterns.command.SimpleCommand;  // import javapuremvcminimal01.JavaPureMVCMinimal01Form; DELETE  public class DataSubmittedCommand extends SimpleCommand implements ICommand {   public void execute(INotification notification)  {  String mydata = (String) notification.getType();  // JavaPureMVCMinimal01Form viewComponent = (JavaPureMVCMinimal01Form) notification.getBody(); DELETE  // viewComponent.inputFieldTxt.setText(mydata.toUpperCase()); DELETE  this.sendNotification(AppFacade.DATA_CHANGED, null, mydata.toUpperCase());  } } Notice that the mediator is putting the result of the command behaviour (the uppercasing of user entered text) into the gui – the command is not touching the GUI anymore, which explains why the command no longer needs to import the GUI form class JavaPureMVCMinimal01Form.\nThe command class DataSubmittedCommand simply raises a notification, passing the changed text as part of the notifcation message (we are using the getType() parameter to hold the uppercased string – though we could have passed it around in the getBody() parameter).\nFinally we need to add the new notification message type to the facade:\n/* * AppFacade.java */ package org.andy;  import org.puremvc.java.patterns.facade.Facade;  public class AppFacade extends Facade {   public static final String DATA_SUBMITTED = \"DATA_SUBMITTED\";  public static final String DATA_CHANGED = \"DATA_CHANGED\";  …  … } 5. Add a Model Step 5. Add a Model\nLet’s add a proper model. For now we leave out the real model behind the proxy and use the proxy class as both proxy and model.\n/* * DataModelProxy.java */ package org.andy;  import org.puremvc.java.patterns.proxy.Proxy;  public class DataModelProxy extends Proxy {   public static final String NAME = \"DataModelProxy\";   private String data;   public DataModelProxy()  {  super(NAME, null);  this.data = \"\";  }   public void setData(String data) {  this.data = data;  System.out.println(\"setData (model) \" + data);  this.sendNotification(AppFacade.DATA_CHANGED, null, this.data);  } } We alter the command class to poke the uppercase string into the model. We then let the model notify the world that the model data has altered.\n/* * DataSubmittedCommand.java */  package org.andy;  import org.puremvc.java.interfaces.ICommand; import org.puremvc.java.interfaces.INotification; import org.puremvc.java.patterns.command.SimpleCommand;   public class DataSubmittedCommand extends SimpleCommand implements ICommand {   public void execute(INotification notification)  {  String mydata = (String) notification.getType();  // this.sendNotification(AppFacade.DATA_CHANGED, null, mydata.toUpperCase()); DELETE  DataModelProxy datamodelProxy = (DataModelProxy) facade.retrieveProxy(DataModelProxy.NAME);  datamodelProxy.setData(mydata.toUpperCase());  } } Finally we need to instantiate and register the DataModelProxy instance in the application’s startup code:\n/* * JavaPureMVCMinimal01App.java */  package javapuremvcminimal01;  import org.jdesktop.application.Application; import org.jdesktop.application.SingleFrameApplication; import org.puremvc.java.patterns.facade.Facade; import org.andy.MyFormMediator;  public class JavaPureMVCMinimal01App extends SingleFrameApplication {  public JavaPureMVCMinimal01Form myForm;   /** * At startup create and show the main frame of the application. */  @Override protected void startup() {  myForm = new JavaPureMVCMinimal01Form(this);  Facade mvcfacade = AppFacade.getInst();  mvcfacade.registerMediator(new MyFormMediator(myForm));  mvcfacade.registerProxy(new DataModelProxy());  show(myForm);  }  …  … } 6. Model Proxy Step 6. Add a real Model behind the Model Proxy and Initialise the Model\nLet’s now add a proper model that the model proxy wraps.\n/* * Data.java */ package org.andy;  public class Data {   public String data;   public Data() {  this.data = \"Hello - hit enter\";  } }  /* * DataModelProxy.java */ package org.andy;  import org.puremvc.java.patterns.proxy.Proxy;  public class DataModelProxy extends Proxy {   public static final String NAME = \"DataModelProxy\";   // private String data; DELETE  private Data realdata;   public DataModelProxy()  {  super(NAME, null);  // this.data = \"\"; DELETE  this.realdata = new Data();  this.sendNotification(AppFacade.DATA_CHANGED, null, this.realdata.data);  }   public void setData(String data) {  // this.data = data; DELETE  this.realdata.data = data;  System.out.println(\"setData (model) \" + data);  // this.sendNotification(AppFacade.DATA_CHANGED, null, this.data); DELETE  // this.sendNotification(AppFacade.DATA_CHANGED, null, this.realdata.data); DELETE  } } I have make the model string data public to keep the example simple. Feel free to add setters and getters.\n7. Startup code Step 7. Move the startup code into a startup command class\nLet’s now create a startup command and move as much of the startup logic into there.\n/* * StartupCommand.java */ package org.andy;  import org.puremvc.java.interfaces.ICommand;  import org.puremvc.java.interfaces.INotification; import org.puremvc.java.patterns.command.SimpleCommand;  import javapuremvcminimal01.JavaPureMVCMinimal01App;  public class StartupCommand extends SimpleCommand implements ICommand {   public void execute(INotification notification)  {  System.out.println(\"startup execute (command) \" + notification.getBody());   JavaPureMVCMinimal01App app = (JavaPureMVCMinimal01App) notification.getBody();  facade.registerMediator(new MyFormMediator(app.myForm));  facade.registerProxy(new DataModelProxy());  } } We need register the startup command with the facade and define a STARTUP message which will be used to trigger it:\n/* * AppFacade.java */ package org.andy;  import org.puremvc.java.patterns.facade.Facade; import javapuremvcminimal01.JavaPureMVCMinimal01App;  public class AppFacade extends Facade {   public static final String STARTUP = \"STARTUP\";  public static final String DATA_SUBMITTED = \"DATA_SUBMITTED\";  public static final String DATA_CHANGED = \"DATA_CHANGED\";   private static AppFacade instance = null;   public static AppFacade getInst()  {  if (instance == null) {  instance = new AppFacade();  }  return (AppFacade) instance;  }   @Override  protected void initializeController()  {  super.initializeController();   registerCommand(STARTUP, StartupCommand.class);  registerCommand(DATA_SUBMITTED, DataSubmittedCommand.class);  }   public void startup(JavaPureMVCMinimal01App app)  {  this.sendNotification(STARTUP, app, null);  } } And we need to alter the application startup code to do less. Notice that we lose the need for some imports, thus proving that a reason for having the startup command is to decouple and loosen dependencies.\n/* * JavaPureMVCMinimal01App.java */  package javapuremvcminimal01;  import org.jdesktop.application.Application; import org.jdesktop.application.SingleFrameApplication; // import org.puremvc.java.patterns.facade.Facade; import org.andy.AppFacade; // import org.andy.MyFormMediator; // import org.andy.DataModelProxy;  public class JavaPureMVCMinimal01App extends SingleFrameApplication {  public JavaPureMVCMinimal01Form myForm;   /** * At startup create and show the main frame of the application. */  @Override protected void startup() {  myForm = new JavaPureMVCMinimal01Form(this);  Facade AppFacade mvcfacade = AppFacade.getInst();  // mvcfacade.registerMediator(new MyFormMediator(myForm));  // mvcfacade.registerProxy(new DataModelProxy());  mvcfacade.startup(this);  show(myForm);  }  …  … } Since we are calling a brand new startup() method on our concrete facade, and this method is not declared in the Facade base class, we need to change the declaration we have been using from Facade to AppFacade. The author of PureMVC recommends this technique of bootstrapping however whether the startup() method officially makes it into the base class in future versions of PureMVC remains to be seen. We don’t have to hold our breath for this, as you can see, we simply define our own startup() method on our own concrete facade class.\n8. Packaging Step 8. Java specific – Organise the classes into packages\nYou could potentially move the classes into packages that reflect the roles they are playing. How about:\n  Data and DataModelProxy → Model package\n  DataSubmittedCommand and StartupCommand → Controller package\n  MyFormMediator and JavaPureMVCMinimal01Form → View package\n  and we might as well…\n JavaPureMVCMinimal01App and AppFacade → App package  Here are a couple of screenshots of the GUI in operation:\ncompile: run: startup execute (command) javapuremvcminimal01.JavaPureMVCMinimal01App@1e67ac handleNotification (mediator) Hello - hit enter User hits ENTER\nsetData (model) HELLO - HIT ENTER handleNotification (mediator) HELLO - HIT ENTER Conclusion (Java) We have seen how we can introduce PureMVC into an existing Netbeans application, step by step. I haven’t hooked up the about box or the menus into the PureMVC system because these things were created by default by Netbeans and I was focussed simply on duplicating the Python minimalist example.\nThe Python refactoring steps above contain more explanation than this Java example, so that may be useful to study too.\nResources  The Java source code for this example. The Python source code for this example.  ","categories":"","description":"","excerpt":"Let’s look at how to refactor an existing architecture to the PureMVC …","ref":"/blog/2009/04/01/refactoring-to-puremvc/","tags":["Design Patterns","GUI","MVC","Controllers","Python","wxPython","Observer","Refactoring"],"title":"Refactoring to PureMVC"},{"body":"PureMVC - Architectural Pattern incl. a minimal wxPython example.\nUnderstanding PureMVC can be hard, even though it is a relatively simple framework. That’s why a minimal example can help. Here is one I created for wxPython and Python users. This will run fine on windows, mac and linux. Install the PureMVC python port and wxPython (which is already present on Mac 10.5) and you should be able to run it.\nIncidentally there is a helpful minimal example for Actionscript users too. To actually run that example in Flex you need to create a Flex project, import the source, move the startup function found in main.as into the mxml, and trigger it via a onloadcomplete event in the mxml. Leave the startup code exactly the way it is - passing in the stage as a parameter to the startup code is fine, even in Flex.\nA tip on understanding PureMVC A potential pitfall to understanding PureMVC is that you merrily visit the puremvc.org website and start to read about the wonderful architecture of the framework - the facade, the controller and its commands, the view with its mediators and the proxies with their references to your model. You read about what notifies what, who points where - then you look in awe at the wonderful framework diagram:\nand wonder where to get started! The trouble is, you don’t need to understand the intricate details of how the framework itself works in order to use it (though you should eventually read all the PureMVC documentation and even read the PureMVC source code - its a suprisingly small amount of code).\nIn fact all you need to create in order to use the framework is a concrete facade class in order to define your notification messages, a mediator class for any gui that you have, a proxy class for you model class and finally one ore more command classes depending on what behaviour you want to have.\nOverview of the Python Minimal Example This demo illustrates the simplest way (that I could think of) to build a PureMVC application in python using wxPython as the GUI. A string in the model is displayed in the GUI in a textfield. Anything you type gets converted to uppercase and stored back in the model, courtesy of a command class triggered when you hit the ENTER key in the GUI.\nWe are modelling and visualising a single string of a model class Data. If you want to imagine a sequence diagram… On startup, the model’s data is pushed to the GUI. When the user hits ENTER in the GUI, the mediator picks up on this wx event and broadcasts the pureMVC message DATA_SUBMITTED. A command class thus gets triggered which converts the text to uppercase (this is the business logic) and stuffs the info into the model. The model’s setter broadcasts a DATA_CHANGED message, which the mediator intercepts, updating the GUI.\nThus anything you type gets converted to uppercase and stored in the model.\nCode The single python file can be downloaded from here.\nimport wx import puremvc.interfaces import puremvc.patterns.facade import puremvc.patterns.command import puremvc.patterns.mediator import puremvc.patterns.proxy View MyForm is the GUI, built in wxpython. MyFormMediator is the mediator which knows about and specifically looks after MyForm, intercepting wx events from the GUI and broadcasting pureMVC notification messages. The mediator also listens for pureMVC notification messages and stuffs data back into the GUI. The “View” in pureMVC is the entire system comprised of class View (part of the pureMVC framework) which holds references to one or more mediators, each of which looks after a GUI form or part of a GUI.\nclass MyForm(wx.Panel):  def __init__(self, parent):  wx.Panel.__init__(self, parent, id=3)  self.inputFieldTxt = wx.TextCtrl(  self, -1, size=(170, -1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)   class MyFormMediator(puremvc.patterns.mediator.Mediator, puremvc.interfaces.IMediator):  NAME = 'MyFormMediator'   def __init__(self, viewComponent):  super(MyFormMediator, self).__init__(MyFormMediator.NAME, viewComponent)  self.viewComponent.Bind(wx.EVT_TEXT_ENTER, self.onSubmit,  self.viewComponent.inputFieldTxt)   def listNotificationInterests(self):  return [AppFacade.DATA_CHANGED]   def handleNotification(self, notification):  if notification.getName() == AppFacade.DATA_CHANGED:  print \"handleNotification (mediator) got\", notification.getBody()  mydata = notification.getBody()  self.viewComponent.inputFieldTxt.SetValue(mydata)   def onSubmit(self, evt):  mydata = self.viewComponent.inputFieldTxt.GetValue()  self.sendNotification(AppFacade.DATA_SUBMITTED, mydata) Controller StartupCommand and DataSubmittedCommand are the command classes, triggered by notification messages AppFacade.STARTUP and AppFacade.DATA_SUBMITTED respectively. The “Controller” in pureMVC is the entire system comprised of class Controller (part of the pureMVC framework) which holds references to one or more commands.\nclass StartupCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand):  def execute(self, notification):  print \"startup execute (command)\"  wxapp = notification.getBody()  self.facade.registerMediator(MyFormMediator(wxapp.myForm))  self.facade.registerProxy(DataModelProxy())   class DataSubmittedCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand):  def execute(self, notification):  print \"submit execute (command)\", notification.getBody()  mydata = notification.getBody()  self.datamodelProxy = self.facade.retrieveProxy(DataModelProxy.NAME)  self.datamodelProxy.setData(mydata.upper()) Model DataModelProxy is the proxy for class Data. The “Model” in pureMVC is the entire system comprised of class Model (part of the pureMVC framework) which holds references to one or more proxies (e.g. DataModelProxy) each of which looks after a model (e.g. Data). Note that a model class could be more complex and the associated proxy could look after looping and pulling out larger chunks of information.\nclass DataModelProxy(puremvc.patterns.proxy.Proxy):  NAME = \"DataModelProxy\"   def __init__(self):  super(DataModelProxy, self).__init__(DataModelProxy.NAME, [])  self.realdata = Data()  self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data)   def setData(self, data):  self.realdata.data = data  print \"setData (model) to\", data  self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data)   class Data:  def __init__(self):  self.data = \"Hello - hit enter\" Facade The facade is a singleton and is where you define all messages types (all just strings) and where you associate command classes with particular messages. There can be messages NOT associated with commands, which are used for mediators to listen to (e.g. model indirectly talking to mediators).\nclass AppFacade(puremvc.patterns.facade.Facade):  STARTUP = \"STARTUP\"  DATA_SUBMITTED = \"DATA_SUBMITTED\"  DATA_CHANGED = \"DATA_CHANGED\"   @staticmethod  def getInstance():  return AppFacade()   def initializeController(self):  super(AppFacade, self).initializeController()   super(AppFacade, self).registerCommand(AppFacade.STARTUP, StartupCommand)  super(AppFacade, self).registerCommand(AppFacade.DATA_SUBMITTED, DataSubmittedCommand)   def startup(self, app):  self.sendNotification(AppFacade.STARTUP, app);  class AppFrame(wx.Frame):  myForm = None  mvcfacade = None   def __init__(self):  wx.Frame.__init__(self,parent=None, id=-1, title=\"PureMVC Minimalist Demo\",size=(200,100))  self.myForm = MyForm(parent=self)  self.mvcfacade = AppFacade.getInstance()  self.mvcfacade.startup(self)  class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True  if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop() Notes Pardon the pun but PureMVC often uses note to refer to the notification message parameter, which I found confusing. For example when a meditor receives a notification. I use notification as the parameter name.\nNotification messages have a .getName(), .getBody() and .getType(). Except for the name, you can pass any info you like in the second two parameters, its up to you. Typical parameters are references to forms, apps, data that has changed, reference to objects, other string messages of your own devising. You could use more than one parameter if say, you wanted to broadcast both the data that changed and an actual reference to the object whose data had changed.\nAlternative implementation - even simpler! Here is an even simpler implementation, essentially the same, however I have removed the startup command. You can initialise the bits and pieces of the application, creating the mediator and model proxy etc. in regular code rather than going through all the fancy startup command stuff (see the bold code). This helps reduce complexity and increases your chances of understanding what is going on with the PureMVC architectural pattern. In practice, in a complex project, a startup command may very well be a good idea.\nYou can download this example here.\nimport wx import puremvc.interfaces import puremvc.patterns.facade import puremvc.patterns.command import puremvc.patterns.mediator import puremvc.patterns.proxy   class MyForm(wx.Panel):   def __init__(self, parent):  wx.Panel.__init__(self, parent, id=3)  self.inputFieldTxt = wx.TextCtrl(  self, -1, size=(170, -1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)   class MyFormMediator(puremvc.patterns.mediator.Mediator, puremvc.interfaces.IMediator):  NAME = 'MyFormMediator'   def __init__(self, viewComponent):  super(MyFormMediator, self).__init__(MyFormMediator.NAME, viewComponent)  self.viewComponent.Bind(wx.EVT_TEXT_ENTER, self.onSubmit,  self.viewComponent.inputFieldTxt)   def listNotificationInterests(self):  return [AppFacade.DATA_CHANGED]   def handleNotification(self, notification):  if notification.getName() == AppFacade.DATA_CHANGED:  print \"handleNotification (mediator) got\", notification.getBody()  mydata = notification.getBody()  self.viewComponent.inputFieldTxt.SetValue(mydata)   def onSubmit(self, evt):  mydata = self.viewComponent.inputFieldTxt.GetValue()  self.sendNotification(AppFacade.DATA_SUBMITTED, mydata)   class DataSubmittedCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand):  def execute(self, notification):  print \"submit execute (command)\", notification.getBody()  mydata = notification.getBody()  self.datamodelProxy = self.facade.retrieveProxy(DataModelProxy.NAME)  self.datamodelProxy.setData(mydata.upper())   class DataModelProxy(puremvc.patterns.proxy.Proxy):  NAME = \"DataModelProxy\"   def __init__(self):  super(DataModelProxy, self).__init__(DataModelProxy.NAME, [])  self.realdata = Data()  self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data)   def setData(self, data):  self.realdata.data = data  print \"setData (model) to\", data  self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data)   class Data:  def __init__(self):  self.data = \"Hello - hit enter\"   class AppFacade(puremvc.patterns.facade.Facade):  DATA_SUBMITTED = \"DATA_SUBMITTED\"  DATA_CHANGED = \"DATA_CHANGED\"   @staticmethod  def getInstance():  return AppFacade()   def initializeController(self):  super(AppFacade, self).initializeController()  super(AppFacade, self).registerCommand(  AppFacade.DATA_SUBMITTED, DataSubmittedCommand)   class AppFrame(wx.Frame):  myForm = None  mvcfacade = None   def __init__(self):  wx.Frame.__init__(self, parent=None, id=-1,  title=\"PureMVC Minimalist Demo\", size=(200, 100))  self.myForm = MyForm(parent=self)  self.mvcfacade = AppFacade.getInstance()  self.mvcfacade.registerMediator(MyFormMediator(self.myForm))  self.mvcfacade.registerProxy(DataModelProxy())   class WxApp(wx.App):  appFrame = None   def OnInit(self):  self.appFrame = AppFrame()  self.appFrame.Show()  return True   if __name__ == '__main__':  wxApp = WxApp(redirect=False)  wxApp.MainLoop() Conclusion I hope this minimalist example helps you understand PureMVC. Of course read the pdf documentation on PureMVC by Cliff. For a step by step guide to buildng a PureMVC based application in wxPython - or any other language for that matter, see my blog entry Refactoring to PureMVC.\n-Andy\nComments: Posted by Toby de Havilland on Mar 4th, 2009\nExcellent example Andy, great stuff.\nPosted by diamondtearz on Dec 10th, 2009\nWow! Thanks for putting this out there. I’ve recently jumped on the Python boat and have used PureMVC in Actionscript. I was looking for a good example to get me going and this fits the bill perfectly.\nPosted by Fabio on Jan 18th, 2014\nDear Andy,\nI hope you’re still around after all this time. Sorry but I found your wonderful blog just now! Your example is very nice, but, unfortunately, I don’t get it to work. There is a very strange Traceback here that I cannot really get rid of. I’m running python 2.7.3 on Windows (8…)\nI cannot really understand why this strange error. self.realdata is absolutely well defined!\nC:\\NewPython27\\Scripts\\python.exe C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py startup execute (command) Traceback (most recent call last): File \"C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py\", line 156, in wxApp = WxApp(redirect=False) File \"C:\\NewPython27\\lib\\site-packages\\wx\\_core.py\", line 7978, in __init__ self._BootstrapApp() File \"C:\\NewPython27\\lib\\site-packages\\wx\\_core.py\", line 7552, in _BootstrapApp return _core_.PyApp__BootstrapApp(*args, **kwargs) File \"C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py\", line 151, in OnInit self.appFrame = AppFrame() File \"C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py\", line 145, in __init__ self.mvcfacade.startup(self) File \"C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py\", line 135, in startup self.sendNotification(AppFacade.STARTUP, app); File \"C:\\NewPython27\\lib\\site-packages\\puremvc\\patterns\\facade.py\", line 265, in sendNotification notificationName, body, noteType File \"C:\\NewPython27\\lib\\site-packages\\puremvc\\patterns\\facade.py\", line 284, in notifyObservers self.view.notifyObservers(notification) File \"C:\\NewPython27\\lib\\site-packages\\puremvc\\core.py\", line 306, in notifyObservers obsvr.notifyObserver(notification) File \"C:\\NewPython27\\lib\\site-packages\\puremvc\\patterns\\observer.py\", line 88, in notifyObserver self.getNotifyMethod()(notification) File \"C:\\NewPython27\\lib\\site-packages\\puremvc\\core.py\", line 91, in executeCommand commandInstance.execute(note) File \"C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py\", line 93, in execute self.facade.registerProxy(DataModelProxy()) File \"C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py\", line 106, in __init__ super(DataModelProxy, self).__init__(DataModelProxy.NAME, []) File \"C:\\NewPython27\\lib\\site-packages\\puremvc\\patterns\\proxy.py\", line 46, in __init__ self.setData(data) File \"C:/Users/Fabio/Documents/python/puremvcminimalwx0.py/fromSite.py\", line 111, in setData self.realdata.data = data AttributeError: 'DataModelProxy' object has no attribute 'realdata' ","categories":"","description":"","excerpt":"PureMVC - Architectural Pattern incl. a minimal wxPython example. …","ref":"/blog/2009/03/01/puremvc/","tags":["Design Patterns","GUI","MVC","Controllers","Python","wxPython","Observer"],"title":"PureMVC"},{"body":"Towards a central repository of Design Patterns\nAn authoritative central repository of Design Patterns does not exist. There is a book called The Pattern Almanac 2000 by Linda Rising however this is no more than an index of patterns - nothing of substance except a one line descrtipion. And furthermore, it leaves out hundreds if not thousands of patterns - scattered across books, websites and people’s code.  2020 Update: Central repositories on the internet are now commonplace. For IDE plugins, programming language library packages (npm for Javascript, pypi for Python etc.), apps, software components for linux etc. Its more difficult to create such systems for design patterns because patterns are more nebulous - requiring textual descriptions rather concrete code. As such the best source of patterns is Awesome Design Patterns which links to all sorts of other web pages and resources incl. lists of patterns used in particular domains e.g. es6 design patterns, language specific patterns, cloud architecture patterns, Big Data patterns etc.\n Prerequisites for a repository Any new effort needs to have broad support and a way of contributing without having to go through vetting. This way people can contribute their own patterns and the project can utilise the community. Better to have too many patterns than not enough. Perhaps a “moderated” category could be added for higher quality entries.\n A specific “template” for inserting patterns would be a must. A UML diagram (png) - also a must. Code sample (any language / psuedo code) - highly desirable.  You could have a page of thumbnails of uml diagrams - very enticing way to browse the repository. Drop down tags for type of pattern - architectural, design, coding idiom. Tags for related patterns - not sure how the references would work, perhaps like a wiki, so each pattern should have a unique id (no spaces). e.g. Observer or MVC or NullObject etc.  On the copyrighted design pattern material in books Getting all the patterns from published design patterns books would be a boon - even if we could at least get the basic UML and idea of each pattern - and leave the copyrighted content alone. Existing patterns books are a huge source of material if we could mine them. It could perhaps be pitched to authors as a way of stimulating book sales since people who want to learn more could buy the book via the usual link to Amazon etc.\nOther ideas It might be good to see the existing class libraries of the programming languages (e.g. Java, .NET, Python, Delphi and PHP) mined for patterns - and there is a real opportunity there to form pattern languages of how these patterns fit together within the one language platform. The repository should include architectural patterns, design patterns and language and coding patterns (sometimes known as idioms) - forming a wonderful continuum of detail. Of course the essential ideas in the deep implementation detail would probably be found at the high level and vice vera, such is the nature of reality. :-)\nLinks In the absence of a central repository, here are some links to lists of design patterns and books.\n  Awesome Design Patterns\n  Amazon.com: The Pattern Almanac 2000: Linda Rising: Books\n  A list of GOF patterns including part-whole and view-handler\n  A Theoretically-based Process for Organizing Design Patterns\n  Hillside.net - Online Pattern Catalog\n  There was a new project starting up in 2009 - not sure what came of it. Perhaps more information can be found by contacting Paris Avgeriou and Uwe Van Heesch\n  ","categories":"","description":"","excerpt":"Towards a central repository of Design Patterns\nAn authoritative …","ref":"/blog/2009/02/12/central-patterns-repository/","tags":["Design Patterns","Thoughts"],"title":"Central Patterns Repository"},{"body":"Let’s take a look at the UML and design pattern support in Netbeans and investigate Netbean’s cool ability to build “custom” design patterns - visually.\nIntroduction UML and Design Pattern Support in Netbeans 6.5\nNetbeans is an opensource IDE from Sun and importantly Netbeans offers a wonderful GUI form designer plus UML facilities, which Eclipse doesn’t come bundled with out of the box.\n Unfortunately the UML support described in this article has been removed from later versions of Netbeans. This article should be considered a historical article where we can learn from how this fascinating UML tool once worked. See also my blog post on ModelMaker (another discontinued tool) for a similarly groundbreaking UML tool.\n  Update: It seems there is some activity on reviving this tool in 2020\n The UML diagrammer The UML diagramming is quite good. You drag out objects from a palette or use the “hover palette” next to a class to drag out links to either existing or new classes. This gui metaphor is nice to use and saves you constantly returning to a palette on the side of the screen in order to add objects and connections.\nUse the “hover palette” next to a class to drag out links to either existing or new classes.\nOf course you need a nice palette of UML objects too:\nNetbean’s UML palette\nThe UML “Model” Any UML you do in Netbeans requires you to create a special “UML project”. This contains a model of your classes and methods etc. as objects. The UML view is driven off the model.\n You can generate code OUT into another project You can reverse engineer code IN from another project  UML markers in the code help code sync e.g.\nMarkers in generated code - careful not to delete them\nunless you know what you are doing!\nwhich actually comprise comments with a unique guid e.g.\n// // #\\[regen=yes,id=DCE.548B84AB-2DF4-1944-BA69-85F33CA61C99\\] // Code generation UML generates classes, interfaces, enums, methods and attributes No substantive code is generated Attributes can be one to many etc. When you click on a association line, select properties and select multiplicity, you get a choice of implementation e.g.\nA choice of one to many implementations\nA lot of language make do with one list and one hash type and build it into thelanguage (e.g. python, ruby, groovy, javascript). Hey but this is Java and you can’t make it too easy! Of course there are special needs for different collection types, so this is a pretty cool way of picking the implementationn that you want.\nNote that you must specify the association as “navigable” to get an “arrow” on your line and to get any code generated for that association.\nAttribute code generation seems a bit buggy and often doesn’t compile E.g. Here is a class X having a one to many association with class Z\nimport java.util.ArrayList; // ok private Z mZ; // surely Z should be ArrayList   public ArrayList getZ () {  return mZ;  }  public void setZ (ArrayList val) {  this.mZ = val;  } And in the above code you don’t get your X.Add(z) method you instead get some strange setter which accepts an entire arraylist - as if anyone does that.\nFreemarker templates Code generation using Freemarker templates.\nYou can build code generation templates to generate more substantial code. Netbeans uses this templating system throughout itself e.g. the default java class stub you get when you create a new java class is a freemarker template.\nTo generate code using freemarker via UML you need to mark your UML classes with stereotypes and associate those stereotypes with a template. Unfortunately the whole code generation aspect is currently poorly documented and there is no API published except a code class interface that one is meant to decipher. The one tutorial uses a 441 line freemarker template to generate a couple of lines of code !! And the Sun developers in this area claim there are no resources to provide any more documentation. View the forum discussion here.\nDesign Pattern Support All GOF patterns supplied as templates which you can graft into your workspace:\nInvoking the design pattern wizard.\nYou can specify existing classes as fulfilling roles, or have the wizard create new classes for those roles:\nMapping design pattern roles to existing or new classes.\nAgain, only the basic structure of the pattern is created – you get no actual substantive code. For example with the Singleton pattern you get the getInstance() method generated but there is no code inside! Here is the class before and after:\nBefore and after applying the Singleton design pattern.\nAnd the code that was generated:\npublic class WhiteHouse {   private static WhiteHouse uniqueInstance; // correct   private int singletonData;   public WhiteHouse () { // should have been made private  } // to prevent multiple instantiations   public static WhiteHouse instance () { // correct declaratation  return null; // but sorely needs functional code here...instead of returning null !  }   public void singletonOperation () {  }   public int getSingletonData () {  return 0; // huh? Shouldn't this return this.singletonData ?  } } It seems that when generating sub methods, if the method returns a value, there is some default code generation which returns null or 0 or something that will allow the generated code to compile. However this might confuse newcomers who perhaps see this generate code as properly functinal in some way. Let me repeat, there is no code generation of body code from design patterns except for the default return values that you normally get with UML code generation.\nYes you can generate code from UML but that requires that you write FreeMarker templates and associate these templates with stereotypes (just set the stereotype property of a uml class or method). The design patterns don’t apply these stereotypes, nor do they provide any freemarker code generation templates.\nWithout code generation the design patterns are of limited value. Code generation is extremely difficult, relying on Freemarker template technology and next to no documentation. I am hoping that “marking” design pattern related classes with stereotypes will solve the code generation problem - but nobody seems to have actually done it\nThe code generation that exists is buggy anyway esp. with multiplicity of attributes.\nCustom Design Patterns One really nice thing is being able to create your own design patterns. No coding or compilation is needed, just draw the diagram and save. From the Tools/Other menus select the UML design centre:\nInvoking the UML Design Centre from a menu\nHere you can view the existing patterns in the patterns “design centre”. It is very easy to create a folder and add your own patterns. The UML Design Centre, where you can add your own patterns.\nTo create your own pattern simply draw a diagram of your pattern classes using a few special diagram objects - the collaboration and role objects:\nThe UML palette relating to design patterns.\nYou can only use the UML palette relating to design patterns whilst in the UML design centre, despite it being visible during normal UML operations. This is a little confusing, especially as I’d love to be able to document my patterns once they have been applied, using the collaboration object - dragging a named role line to each class involved in the pattern…\nWhen building a design pattern, instead of adding a class you add a “class role” object from this special design pattern palette. The role objects are placeholders for a new or existing classes (or use cases or interfaces etc.), which you can fill in using combo drop downs etc. when the pattern is finally applied via the design pattern wizard.\nYou link all the roles together with a collaboration object and you are done. The collaboration object lets you name your pattern and becomes the anchor for all the roles. Its a pity you don’t get collaboration object in regular diagramming in order to document your patterns once they have been applied. You can instead use notes with multiple links (though this doesn’t let you label the links) or make do with tagging your UML classes with stereotypes, indicating the roles e.g. Adapter, Adaptee, Client etc.\nHere is a pattern I created:\nAn example custom design pattern!\nThe example is a bit contrived, but you get the idea. Once you build your pattern you can immediately go back to your normal workspace and apply it:\nApplying my new pattern to my workspace.\nAnnoyances  In UML new classes are always created in the package in which the diagram resides, so you may need to move them to the correct package Right click shows disabled items in popup menu then right click again at slightly different pixel position and items are enabled again Can’t copy and paste methods and attributes Weird keyboard combinations e.g. CTRL-ALT-SHIFT-N for pan Newly generated code java files don’t always appear in the project so you have to close and reopen the target project or wait till some emergency timer refresh kicks in. Synch to and fro is a pain and error prone. Whilst code rarely gets clobbered you can get unexpected multiple declarations of variables, loss of associations in your UML diagrams when re-reverse engineering (esp if generated by design pattern workflow) Code generation concepts “Add Merge Markers to Existing Source Elements” and “Generate Markers for Source File Merging” too complex, IMO. Apply a design pattern twice and you get two generalisation relationships between classes and other silly bugs Be careful when using design pattern “automation”. The particular pattern implementation may not suit you situation. For example “Adapter” is a object adapter not a class adapter. You need to understand patterns anyway to use these tools.  Final Thoughts I found Netbeans to be generally very cool, fast and stable. The UML tool is generally nice to use. Its really a pity that the UML code generation is a bit buggy and that UML custom code generation is undocumented and uber complex. The Design Patterns support and customization in Netbeans is outstanding (not at the level of IBM Rational though). Again its a pity there is no design patterns code generation support, and that this part of Sun’s roadmap seems to be a dead end. They even say on their UML plugin home page that if you want more - use the Visual Paradigm plugin for Netbeans. I live in hope that this opensource tool can be improved though. Maybe I should start looking at the code base myself… :-)\n Seems there is some activity on reviving this tool in 2020\n ","categories":"","description":"","excerpt":"Let’s take a look at the UML and design pattern support in Netbeans …","ref":"/blog/2009/02/11/netbeans-uml/","tags":["Design Patterns","UML"],"title":"Netbeans Uml"},{"body":"Ways of Visualising Software Designs\nThis blog article explores the novel ways of developing software more visually and in visualising software generally - that is without coding. It also explores ways of visualising software designs and of watching software execute. Visual Programming and Executable UML are the closest terms that describe this area.\n Some of these projects have failed and others continue to thrive (e.g. Scratch). As of 2020 the new big thing in this area is low code and no-code.\n Introduction Creating software in a visual way would arguably lift the level of abstraction in how we create software. Is it even possible?\nModel Driven Design Whether its MDA (model driven architecture) with UML or Case tools from the past - this has clearly been a dream for a long time. Martin Fowler considers the viability of MSA in an interesting blog entry - also providing links to other peoples’ opinions in this area. For example there are some that argue UML (even the latest 2.0 version) is not computationally complete, or that programming visually is not all that its cracked up to be and and may not be as efficient as textual coding techniques. Here is yet another critique of UML as a modelling tool good enough to generate code. These sorts of critiques certainly don’t stop the vendors - there are a lot of MDA tools e.g. [here is a list](#Links to MDA tools).\nCase Tools I’m an optimist and part of me wants to see some sort of MDA / Executable UML approach work. However it may not look like existing solutions - we need to look outside the box and find a blend of metaphors that are trully innovative. That’s why this page exists - lets explore what programming visually looks like.\nOO as Biological Cells I once came up with the idea of OO programming being like a “world of cells”.\nThe most complex systems on earth, including the human body, are composed of biological cells amongst other things. Shouldn’t we be looking to biology for metaphors for programming?\nHere is a thought experiment for you. Imagine running software as a collection of biological cells, each cell representing an instance of a class. Each object / cell lives in a community of objects, sending messages to other objects, storing data and providing behaviour exposed as methods. It might look something like this:\nOO software as biological cells?\nLike in UML, the top half of the cells are storage (primitive data including pointers to other cells) and the bottom half represents the available public methods of the object.\nThe red lighting symbolnext to a method name represents a method being invoked.\nImagine being able to pan around and view different aspects of this running software model. The technique used by the information organiser the brain might be one cool way to browsing, navigate and perhaps organise such “computational space”.\nExecutable UML There are only a couple of high end tools that get into the territory of being able to draw UML diagrams and generate code - which is executable. The idea is that it saves implementation time and round trip engineering where you suck the implementation back into a UML model and to and fro and to and fro with all the synchronisation nightmares that entails. UML is not expressive enough to cover all that code needs to do, so some of these tools come with a language that you have to use anyway.\nThere are a couple of books in this area. One is called Model Driven Architecture with Executable UML which is linked to the Keneddy Carter tool (see below) and the other is called Executable UML: A Foundation for Model-Driven Architecture which illustrates its examples using the BridgePoint tool.\nThe software tools I have found are\n BridgePoint tool suite from Project Technology. iUML Modeller and Simulator from Kennedy Carter Rhapsody by IBM (formerly by ILogix Telelogic)  The great thing about some of these tools is that you can in some cases actually watch your UML execute -they call it “executable UML-based application development”.\nI’m about to run the latest trials of these products. I’d be interested to see how they handle sequence diagrams, since sequence diagrams are not syntactically expressive enough to precisely model for loops and if statements to a practical, executable level. In UML you can use OCL (object constraint language) and a few UML indicators to indicate looping etc. but to cover all the coding possibilities you need more.\nSimpler Approaches Executable UML is currently not for the faint of heart - its pretty complicated stuff but I hope that will change. For a simplified programming environment check out Scratch\nScratch - programming for students\nWith Scratch you can drag and drop your coding fragments, no typing. Its truly amazing and whicls tit caters to kids, I really wish they would expose an object oriented, serious version. In the current version you can define objects and broadcast and respond to messages, so its no slouch in the OO stakes, however you need to be able to define classes and instantiate them - at the moment you cannot instantiate arbitrary ‘sprites’ easily.\nApple’s automator is a visual programming system for intra-application workflow. It comes bundled with all Mac’s, though in order to automate MS Office you need to buy the business version not the home edition.\nApple’s Automator - for workflow\nThe Wiring Paradigm Another interesting system is Synopsis which lets you wire together your entire program without writing code. You can drag and drop if statements and plus everything together. You can group components and subsume them into a sub component - which reduces clutter and helps organise your work.\nThe Synopsis application development environment - no text coding!\nTrying it out I found it fascinating, though it sorely needs the more sophisticated thumbnail bread trail that SynthMaker (see below) has. The wires are auto routed (thankfully) but things get pretty messy quickly. I found that there was not enough information visible on the components themselves to figure out what was going on - you keep having to hover over components or double clicking on them to investigate the deeper logic. Finally it gets quite tiresome doing if-then logic using wires. I suspect that a touch of the Scratch metaphor (see above) would be better for those sorts of tasks, within a larger system of wiring. A mixed metaphor approach? Anyway, a brave effort.\nAnother similar effort along the same lines (plug together syntax with wiring) is ViPEr: a visual programming environment for Python, which “allows non-programmers to interactively build networks describing novel combinations of computational methods, and yielding new visualizations of their data without actually writing code”. It seems to be part of something called MGLTools now - here is a screenshot:\nViPEr - visual programming for visualisation research.\nThe music software industry (synthesizer plugins, audo processing, music making) is light years ahead when it comes to visual interfaces. And in terms of programming visually, SynthMaker is state of the art, especially with regards to making the wiring more friendly and usable.\nSynthEdit- synthesizer maker\nSynthMaker allows you to program without writing code, linking together components. Interstingly you can drill inside components - worlds within worlds, and a “breadcrumb” screenshot panel at the top of the interface helps to give you a sense of where you have been and where you are now. Clicking on a screenshot takes you back to the component/world. This product is not just theoretical or academic - people make real synthesisers with this tool and even sell them commercially.\nBuild your own Visual Language An interesting effort to build a compiler “compiler” for visual languages is CoCoViLa. Here you can draw shapes on a wrokspace to define the elements of your visual language. You define ports for how these elements connect to each other using wires. You can add java code to define what actually gets done when your shapes are connected to each other. For example you could define an “ADD” shape with two inputs and one output and then feed a pair of numbers into it to get an output. Connecting the output into the input of another shape would similarly chain on extra computation steps. The beauty here is that you can define your own shapes and logic. This is a phd project but hopefully will grow into something bigger and better, like an open source MetaCase. Here is an example of one of the “domain languages” that comes as an example:\nCoCoViLa - define your own shapes and how they join together.\nDebuggers as visualisers Of course debuggers are the most obvious tools we have today for watching software execute. We can watch variables and see the current execution point etc.\nThere is a java visualisation debugger that is amazing when watching multiple threads.\nThe python for windows debugger is pretty amazing too. You can drill inside namespaces, objects and classes ad-infinitum. Even methods are objects, which have properties. Its not animation but its an interesting hierarchical visualisation of computational space and name space. P.S. What sort of interesting “spaces” are there in software? The Jbuilder 2 Bible by Armstrong has some fantastic descriptions of how software and objects operate and interact.\nVisualisations using gui components In my old Multimedia Toolbook programming days, if I was prototyping an application and I needed a datastructure to hold a list of strings, and if that data was something I might want to watch change during program execution then I would use a visual GUI component to hold that data. This way I could always ‘see the data’ and watch it change. After development I simple made the GUI elements (that would make no sense to the user) invisible but still operational.\nNormally a programmer would choose a non visual datastructure, which would of course be many times more efficient than storing the data in a GUI component. It is also considered bad practice to couple your ‘model’ with GUI. However for prototyping, the advantages are instant and often beautiful visualisations, since you can also change the fonts, colors and placement of such GUI elements to produce pleasing visualisation layouts.\nNote: this technique of using gui components as data structures is just a thought provoking idea of how to achieve visualisation of program innards and program behaviour. I am not advocating that you build your serious programs in this way.\nStatic representaion of “wiring” I always liked the idea of Visual Age for Java technology. You draw links between components, both visual and non visual.\nVisual Age for Java - radical ideas, but now discontinued.\nUML lets you visualise classes etc. but doesn’t cover this sort of ‘real world’ representation of the wiring between GUI components on a form and objects in your model/application.\nVisual Age style programming\nI’m not sure why Visual Age was discontinued in favour of the more traditional Eclipse tool. Perhaps in use it was too cumbersome, or perhaps the particular implementation too complex? Or is the whole idea of visual programming too radical for popular acceptance?\nAnother slightly radical tool for representing hitherto ‘hidden’ and unvisualised information visually is the Delphi 6 data diagram and form diagrams. Both data diagrams and form designer have an extra tab, which lets you view your components schematically and see the wiring between them.\nDelphi - form diagram - shows the connections between visual components.\nDelphi - data diagram - shows the connections between database and visual components.\nNote that Delphi (and most IDE’s) has always let you “wire” components together by setting a property on a component, with appropriate hinting in drop down combos - you select an object from a combo box in order to make the wiring (ie. set the property) - the combobox for each property lists all the valid components on the enclosing form that the property could possibly point / be wired to. To make these wiring connections with visual lines rather than combo boxes I guess is just another metaphor.\nSoftware Visualisation There seems to be some serious work being done in this field. Check out Software Visualization in Prolog by Calum A. McK. Grant (as a Dissertation submitted for the degree of Doctor of Philosophy) which has astonishing pictures of software visualisation tools and visual programming systems e.g.\nThe quicksort algorithm written in ProGraph.\nAlso check out Vmax http://www.cl.cam.ac.uk/Research/Rainbow/vmax/sshot.html Vmax is a programmer’s text editor combined with a graphical browsing window for powerful visualization of source code and run-time behaviour e.g.\nAnother interesting tool I recently found was Jeliot 3 which plays an animation of your java source code executing. Its quite amazing, though there are limitations on what you can feed it (all classes must be in the same source file etc.). Here is a screenshot:\nJeliot 3: This was a screenshot I took during the animated playback of some java code\nCode Bubbles and Spatial Development Environments As of 2010 you’d think we had come a long way in terms of the visualising of software. And I think we have. I’ve just learned about Code Bubbles, a way of exploring code which displays relevant methods (of source code) in coloured bubbles, which you can glue together with other bubbles, to form islands of code that is related. Lines show what is expanded from what. Search functions let you fill bubbles with search results. Watching the video is the best way to get the idea. Old paper here.\nCode Bubbles Java IDE and Explorer\nYou can make memo notes, edit code, add icons (like the bug symbol). You can zoom out. Even more amazing, you can run debug sessions and create bubbles of methods as you execute code - so that you can see the trail of execution. A bubble can contain variables - or the state of the program at that point. All this is persisted in your bubbles diagram, for comparison purposes or later reference.\nLastly, you have a huge workspace to play with. Notice the bar along the top of the screen in the following screenshot:\nCode Bubbles Java IDE and Explorer\nThe bar along the top is a high level minimap running horizontally. Clicking on this minimap area scrolls the main workspace to show those bubbles. Ableton Live and many DAW (Digital Audio Workstation) apps have such horizontal minimaps. It also reminds me a little of SynthMaker (see above, near the start of this article) where you get thumbnail representations of a more complex workspace. What is interesting with Code Bubbles is that you can drag out the minimap area to mark a region, and label it.\nCode Bubbles seems to visualise what goes on in my mind when I code - I deal with a collection of related code and code fragments - or a path of execution through specific code fragments / methods. Code Bubbles respects what is going on in my mind. Instead of bookmarking, switching tabs, scrolling constantly - Code Bubbles chunks together all related code fragments into the one place. This is truly a breakthrough and I can’t wait to try out the beta.\nAnother related tool comes from Microsoft Research, its called Code Canvas which is\n an experimental research platform for building a spatial development environment. It lets us explore design alternatives when dealing with source code on an infinitely scalable two-dimensional surface.\n Basically you get a high level view of the files in a project and as you zoom in you start seeing class and method names, and you can keep zooming until you see actual code - which you can edit in situ. Relationships like inheritance and references (e.g. who is calling a particular method) are indicated with appropriate lines. Its a nice experiment. It doesn’t chunk the information like Code Bubbles does, but does provide infinite zooming - from super high level where you even see apps and packages right down to code level.\nCode Canvas, from Microsoft Research\nSummary Ideally I would like to see approaches like Executable UML simplified down and incorporate the simple coding ideas of Scratch, albiet taken to a serious object oriented level (Scratch is really for kids at the moment). Design Pattern support would also be woven in - e.g. Netbeans 6 has a visual way of creating design patterns - see my Feb 2009 blog post on this. The visual form designing capabilities of Visual Age (now defunct, unfortunately) and Delphi form diagrams would complete are new lego was of building software. Of course case tools have always been around and to some extent people have become a bit cynical about them over the decades as no breakthrough application has ever appeared. We should still keep trying though as I can see progress on many fronts and can see all the wonderful pieces of the puzzle - they just need to be unified into a single compelling open source product. My personal vision My own vision is of a UML tool which doesn’t adhere strictly to UML in its committe born detail but takes a few risks (e.g. the way Visual Studio UML tool does) in order to innovate. You type code into the UML tool itself, without opening a window - its all right there on the workspace. Enterprise Architect displays code inside UML diagrams, so you can get a taste of how this might look. The potential clutter of code and UML in the one diagram would be alleviated by collapsable regions so that with all methods collapsed, all you see is a regular UML diagram with just methods listed.\nAnd when I say type, I mean use Scratch type drag and drop to assemble code. You apply design patterns like in Netbeans and IBM Rational, and you can specify design pattern roles not only to the level of granularity of classes and methods but also to the level of code lines - that’s why its important to model and reify code lines into objects, so that they are more easily referred to by “active” design patterns (like in ModelMaker). The design patterns themselves would operate at the level of classes, as is normal. There would also be dozens of language idiom patterns to assist with coding - e.g. iterating through a list is a pattern. Lets treat language idiom patterns the same way as we do design patterns at a class level - all in the same interface. Both class design and language coding becomes the same thing - pattern based lego.\nYou should be able to easily group UML objects into components which are like symbols in Flash. You can then define the connection types and plug them together. If you can’t plug them together directly then you might be able to drop in various adapters to help. We might be using protocols similar to the way genes and enzymes talk to each other. Speaking of grouping, you should be able to group components and subsume them into sub modules, hiding away all the detail. Then you double click to drill into that module - leaving a SynthMaker style breadscrumb of screenshots to help tell you where you are and where you have come from, and help you get back (just click on a relevant screenshot).\nMethod calls would be made using messages. Messages are a more powerful metaphor for talking between objects - you can send messages to specific objects like a normal method call but also broadcasting messages broadly - there are are even books on messaging patterns (see patterns of enterprise architecture). Relationships would be modelled using an ORM style Relationship Manager so that you just specify what sort of relationships you want between two classes and its done. Furthermore, you can leverage SQL or LINQ style queries without having to write custom looping code etc.\nThere should be an integrated GUI builder that caters to various styles of application: web, form based with controls and menus, workspace based with draggable widgets and sprite based for game type approaches. A MVC framework would be built in so that you know where to put all your code and so that a proper separation between model and presentation is achieved. No more guessing - its all defined for you.\nHow can this sort of vision compete against the well funded and expensive MDA and Executable UML tools industry? I don’t know - my feeling is that MDA tools are stuck in a bit of a rut and aren’t taking advantage of more radical approaches that I have been talking about here. I have only scratched the surface and there is lots of detail to be worked out, I know. Its fun speculating about it anyway. I even have some screen designs if you wish to contact me about them!\nAppendix: Links to various MDA tools   http://www.software-pointers.com/en-mda-tools.html\n  http://www.modelbased.net/mda_tools.html\n  Dr Dobbs MDA tools list and commentary\n  Choosing MDA tools - IBM article\n  Comments Posted by J. Alkub on Jan 18th, 2009\nDebuggers are dynamic, automated ways of producing model-view-controller visualisations of your data, except they attach to ANY software application and reveal it, visually\n Posted by Mike Davis on Feb 9th, 2009\nHave you looked at ECO IV and V from CapableObjects? (www.capableobjects.com). Is is a UML modeler which uses an extension to OCL for triggered actions and state diagrams for object state models to generate syncronized C# and VB.NET (version V) only.\nIt really only builds the business layer and the data layer but integrates them quite seamlessly so that the developer can concentrate on the UI and Business Model alone…\nmike\n Posted by AndrewBoldman on Sep 22nd, 2009\nHi, good post. I have been wondering about this issue,so thanks for posting.\n Posted by John Smythe on Sep 22nd, 2009\nCheck out xdepend - visualises dependencies in java programs\nhttp://xdepend.com/\nXDepend lets you extract, visualize, seek and control the structure of your applications and frameworks. XDepend provides complementary and interactive views on the same information. A Tree-Map view helps you easily identify the big one from the small one. The dependency matrix, the graph view and the detailed view help you gain insight in your code base.\n Posted by K M Nur on Feb 11th, 2010\nI am doing my masters thesis on software visualization / software comprehension and so far considered, bluej, jeliot3, jgrasp, javavis, jive, ville. I am looking for more tools for software visualization. Please inform me if you have any more ideas.\nRegards,\nKMN\n Posted by Norm on Dec 29th, 2014\nI’ll try to put this to good use immediately.\n","categories":"","description":"","excerpt":"Ways of Visualising Software Designs\nThis blog article explores the …","ref":"/blog/2009/01/22/visualising-software/","tags":["Thoughts","Diagramming","UML"],"title":"Visualising Software"},{"body":"A tutorial on how to implement the State design pattern in Flex 3. We are going to have a traffic light move through several states (red, orange, green). Of course there are other states the traffic light might be in, as well as transitional states (green and orange at the same time), but lets keep things simple!\n Note Flex and Flash are discontinued technologies. You can still run .swf files locally on your computer using these instructions.\n There are four approaches discussed here. The first approach (version 1) uses flash for the graphics and flex for the logic. The second approach (version 2) uses two additional techniques within flex itself (no flash) to decouple graphics from logic. My thanks for Carl de Jager for his assistance in talking through these designs with me and helping to code them.\n State Pattern In Flex by Andy\nState Design Pattern I’m not going to go into the intricate details of state design pattern here, but at least here is the basic classic UML\nIn our case the states will offer a Display() method and an EmitSound() method. Each concrete state will impement these differently. The client code only knows about the ‘context’ class on the left - it is up to the context class to track which state it is in by holding a reference to a concrete state instance, and switching to a different concrete state instance when the state changes. Client method calls (in our case Display() and EmitSound()) to the context class (in our case called TrafficLightController) are routed to the concrete state instance that happens to be there at the time, resulting in different behaviour depending on the state. Thus we do away with messy if then else logic and as a bonus can plug in future extra states easily without recoding any if else statements.\nVersion 1 The embedded flash object (showing our demo) is unable to run in modern browsers so an animation is playing instead.\nImplementation Steps So what we do in version 1 is to create both a Flex project and a Flash project. We leverage Flash’s ability to create nice graphics and animations etc. and leave the logic for the superior Flex environment (actionscript 3, more modern architecture, IDE suited for serious OO programmers etc) to handle.\nOn the flash side of things we create\n Traffic light graphics (red, green and orange circles plus a background) Reify a circle graphic as a symbol named ’light’. Create 3 instances of this and change the color accordingly. Name the instances mc_red_light, mc_orange_light and mc_green_light Create a combined symbol named ‘TrafficLight’ containing the three lights and a background graphic.   So that we can refer to the flash symbol from Flex ensure that the TrafficLight symbol in the Library is marked as inheriting from our custom Flex class com.TrafficLightController class (which we will create below, and which itself inherits from mx.flash.UIMovieClip). In Flash, you can right click on the symbol name in the Library pane to open the Linkage Properties dialog box to see this settings.  We then need to include the flash trafficlight.swc as an asset in our flex project so that we can refer to it from our flex code. Now we switch over to Flex for the rest of the coding process.\nHere is the main flex code Fire up the main MXML form and enter the following:\nmain.mxml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cmx:Application xmlns:mx=\"http://www.adobe.com/2006/mxml\" layout=\"vertical\" xmlns:local=\"*\" creationComplete=\"init()\" width=\"186\" height=\"300\"\u003e \t\u003clocal:TrafficLight id=\"trafficLight\" width=\"59\" height=\"138\" /\u003e \t\t\u003cmx:HBox\u003e \t\u003cmx:VBox\u003e \t\u003cmx:Button label=\"show red light\" width=\"100%\" click=\"trafficLight.setState(TrafficLightStates.RED_STATE)\"/\u003e \t\u003cmx:Button label=\"show orange light\" width=\"100%\" click=\"trafficLight.setState(TrafficLightStates.ORANGE_STATE)\"/\u003e \t\u003cmx:Button label=\"show green light\" width=\"100%\" click=\"trafficLight.setState(TrafficLightStates.GREEN_STATE)\"/\u003e \t\u003c/mx:VBox\u003e \t\u003c/mx:HBox\u003e \t\t\u003cmx:Script\u003e \t\u003c![CDATA[ import com.TrafficLightStates; private function init():void { trafficLight.setState(TrafficLightStates.RED_STATE); } ]]\u003e \t\u003c/mx:Script\u003e \t\u003c/mx:Application\u003e Note that we refer to the flash object with the phrase\n\u003clocal:TrafficLight id=\"trafficLight\" width=\"59\" height=\"138\" /\u003e Controller code TrafficLightController.as\npackage com { \timport flash.display.MovieClip; \t\timport mx.flash.UIMovieClip; \t\tpublic class TrafficLightController extends UIMovieClip \t{ \tprivate var _states:Array = new Array(); \tprivate var _state:ITrafficLightState; \t\tpublic function TrafficLightController() \t{ \tsuper(); \t\t_states = new Array(); \t_states[TrafficLightStates.RED_STATE] = new RedState(this); \t_states[TrafficLightStates.ORANGE_STATE] = new OrangeState(this); \t_states[TrafficLightStates.GREEN_STATE] = new GreenState(this); \t} \t\t// ------------------------------------------------ \t// COMMANDS \t// ------------------------------------------------ \t\tpublic function setState(name:String):void \t{ \t_state = _states[name]; \tdisplay(); \t} \t\tpublic function display():void \t{ \tswitchOffAllLights(); \t_state.display(); \t} \t\tpublic function emitSound():void \t{ \t_state.emitSound(); \t} \t\tinternal function switchOffAllLights():void \t{ \tred_light.visible = false; \torange_light.visible = false; \tgreen_light.visible = false; \t} \t// ------------------------------------------------ \t// QUERIES \t// ------------------------------------------------ \t\tinternal function get red_light():MovieClip \t{ \treturn getChildByName(\"mc_red_light\") as MovieClip; \t} \t\tinternal function get orange_light():MovieClip \t{ \treturn getChildByName(\"mc_orange_light\") as MovieClip; \t} \t\tinternal function get green_light():MovieClip \t{ \treturn getChildByName(\"mc_green_light\") as MovieClip; \t} \t\t} } Traffic Light States TrafficLightStates.as\npackage com { \tpublic class TrafficLightStates  \t{ \tpublic static const RED_STATE:String = \"RED_STATE\"; \tpublic static const ORANGE_STATE:String = \"ORANGE_STATE\"; \tpublic static const GREEN_STATE:String = \"GREEN_STATE\"; \t} } ITrafficLightState interface Traffic Light States all follow this interface\nITrafficLightState.as\npackage com { \tpublic interface ITrafficLightState \t{ \tfunction display():void; \tfunction emitSound():void; \t\tfunction get context():TrafficLightController; \t} } Concrete states RedState.as\npackage com { \tpublic class RedState implements ITrafficLightState \t{ \tprivate var _context:TrafficLightController; \t\tpublic function RedState(context:TrafficLightController) \t{ \t_context = context; \t} \t\tpublic function get context():TrafficLightController \t{ \treturn _context; \t} \t\tpublic function display():void \t{ \tcontext.red_light.visible = true; \t} \t\tpublic function emitSound():void \t{ \t} \t} } GreenState.as\npackage com {  public class GreenState implements ITrafficLightState  {  private var _context:TrafficLightController;   public function GreenState(context:TrafficLightController)  {  _context = context;  }   public function get context():TrafficLightController  {  return _context;  }   public function display():void  {  context.green_light.visible = true;  }   public function emitSound():void  {  }  } } OrangeState.as\npackage com {  public class OrangeState implements ITrafficLightState  {  private var _context:TrafficLightController;   public function OrangeState(context:TrafficLightController)  {  _context = context;  }   public function get context():TrafficLightController  {  return _context;  }   public function display():void  {  context.orange_light.visible = true;  }   public function emitSound():void  {  }  } } How it works The flex code within the concrete state classes ends up setting the visibility of the individual flash graphic components. Remember the flash graphics are really dumb and have no logic in them. The flex code refers to the flash graphic symbols with the following technique\nreturn getChildByName(“mc_red_light”) as MovieClip;\nwhich dynamically looks up the graphic and hands it to the flex code which then sets the .visible property as needed. Ironically the code that drives the flash color changing lives in the TrafficLightController class, as a bunch of utility methods that the concrete state classes call upon. Note also that the EmitSound() method is not implemented in this project.\nUML Here is the UML of the solution. Click for larger image.\n\n\nNote how the user drives the flex MXML form which holds a reference to the flash object. See how the flash object inherits from the TrafficLightController class thereby we auto-magically graft on smart behaviour to the dumb flash symbol.\nThe TrafficLightControllerclass is the ‘context’ in our State design pattern and holds an instance of a state object. The states are singletons kept in an array, so that we don’t have to keep creating and deleting state instances (this is a common implementation trick when implementing state pattern).\nVersion 2 Just to be bold and learn flex more deeply, here are another three solutions to implementing the traffic light using design state pattern in flash and flex. I have created three different implementations within the one architecture. We use the following techniques:\n Accessing a flash component (as before) but now with skinning Pure Flex solution with the graphics as images assembled purely in MXML, code inside the mxml file Pure Flex solution, graphics in MXML, code in a separate proper flex class - using a technique known as ‘code behind’  Here is the resulting flash application - go on and click on the buttons! The embedded flash object (showing our demo) is unable to run in modern browsers so an animation is playing instead.\nImplementation Steps I won’t list all the code, however here is the MXML file for the all in one solution version\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cmx:Canvas xmlns:mx=\"http://www.adobe.com/2006/mxml\" implements=\"com.ITrafficLightView\" width=\"59\" height=\"138\" initialize=\"init()\"\u003e  \t\u003cmx:Image x=\"0\" y=\"0\" source=\"TrafficLightSkin_box\"/\u003e \t\u003cmx:Image id=\"red_light\" x=\"19\" y=\"36\" source=\"TrafficLightSkin_red_light\"/\u003e \t\u003cmx:Image id=\"orange_light\" x=\"19\" y=\"69\" source=\"TrafficLightSkin_orange_light\"/\u003e \t\u003cmx:Image id=\"green_light\" x=\"19\" y=\"103\" source=\"TrafficLightSkin_green_light\"/\u003e \t\t\u003cmx:Script\u003e \t\u003c![CDATA[ private var _controller:TrafficLightController; private function init():void { setController(new TrafficLightController(this)); } public function setController(val:TrafficLightController):void { _controller = val; } public function setState(val:String):void { _controller.setState(val); } public function emitSound():void { _controller.emitSound(); } public function display():void { _controller.display(); } public function getController():TrafficLightController { return null; } public function setRed():void { switchOffAllLights(); red_light.visible = true; } public function setOrange():void { switchOffAllLights(); orange_light.visible = true; } public function setGreen():void { switchOffAllLights(); green_light.visible = true; } // HELPERS internal function switchOffAllLights():void { red_light.visible = false; orange_light.visible = false; green_light.visible = false; } ]]\u003e \t\u003c/mx:Script\u003e \t\u003c/mx:Canvas\u003e UML Here is the UML of the solution. Click for larger image.\n\n\nWhy is the above UML so complex? Because we are trying to implement three different techniques in the one example, the UML gets complex. In all cases the state design pattern model logic is the same, which is good code reuse. We use adapters (another design pattern) to accommodate three different implementations within the one architecture, which itself is pretty cool.\nNote that the classes handling the graphics display (red/orange/green lights and associated buttons) are actually fairly lightweight, and indicated in dark yellow.\nThe complexity is really in the “adapter” classes above them which house the code to implement the ITrafficView interface (allowing for our 3 variant implementations in the one architecture approach) and which allows the graphic classes to remain dumb and small.\nThe benefit of this approach (besides learning about how to do the same thing in different ways within flex and thereby understanding flex better) is that we can change the graphic implementation at any time without changing our core business logic model, and our state design pattern (which resides in the model) also remains stable.\nResources Flex Project zip.\n","categories":"","description":"","excerpt":"A tutorial on how to implement the State design pattern in Flex 3. We …","ref":"/blog/2008/09/11/state-pattern-in-flex/","tags":["Design Patterns"],"title":"State Pattern in Flex"},{"body":"Extract Composite - Refactoring to a Pattern Refactoring existing code so that it improves and conforms to a design pattern can be a good thing. Your code will be easier to understand since it follows a known ‘pattern’. Of course you have to need the change - your code will probably be uncomfortable to read and be crying out for clarification.\nThis refactoring is about implementing a one to many relationship in your code more clearly by refactoring to the Composite design pattern.\nPresentation  UML - Before and After Here is the situation before and after the refactoring, in hand drawn UML.\nUML Before The problem with the “before” situation is:\n The child looping logic is duplicated twice - once in the FormTag class and again in the LinkTag class. And we all know that code duplication is evil and hard to maintain.  By refactoring, we remove the code duplication to a common base class.\nUML After The solution:\n We use the “extract composite” refactoring to put the common looping behaviour in the display() method of a common composite class. We make the existing classes subclasses of this new composite class.  Code - Before and After Here is a python example of the above refactoring. Note that the display() method is actually called toPlainTextString() in this example.\nCode Before # Before  class Node(object):  def __init__(self, name):  self.name = name  def toPlainTextString(self):  return self.name  class FormTag(Node):  def __init__(self):  self.allNodesVector = []  def toPlainTextString(self):  result = \"\"  for node in self.allNodesVector:  result += node.toPlainTextString()  return result  class LinkTag(Node):  def __init__(self):  self.linkData = []  def toPlainTextString(self):  result = \"\"  for node in self.linkData:  result += node.toPlainTextString()  return result  f = FormTag() f.allNodesVector.append(Node(\"a\")) f.allNodesVector.append(Node(\"b\")) f.allNodesVector.append(Node(\"c\"))  l = LinkTag() l.linkData += [Node(\"x\"), Node(\"y\"), Node(\"z\")]  print f.toPlainTextString() print l.toPlainTextString() Then we apply the following steps…  Create a Composite Class - compile Make each child container (a class in the hierarchy that contains duplicate child-handling code) a subclass of your composite - compile For each method with duplicated looping code  Move \u0026 rename the child reference field UP to the composite using “Pull Up Field” Move the method UP to the composite using “Pull Up Method” Pull up any relevant constructor code too. Check interfaces so that client code using the old composites still works.    Code After # After  class Node(object):  def __init__(self, name):  self.name = name  def toPlainTextString(self):  return self.name  class Composite(Node):  def __init__(self):  self.children = []  def toPlainTextString(self):  result = \"\"  for node in self.children:  result += node.toPlainTextString()  return result  class FormTag(Composite):  pass  class LinkTag(Composite):  pass  f = FormTag() f.children.append(Node(\"a\")) f.children.append(Node(\"b\")) f.children.append(Node(\"c\"))  l = LinkTag() l.children += [Node(\"x\"), Node(\"y\"), Node(\"z\")]  print f.toPlainTextString() print l.toPlainTextString() Does the refactoring break anything? A proper refactoring means you don’t break anything and everything behaves as before.\npython before.py abc xyz python after.py abc xyz Confirmed - we get the same output in both cases. :-)\n","categories":"","description":"","excerpt":"Extract Composite - Refactoring to a Pattern Refactoring existing code …","ref":"/blog/2008/03/05/extract-composite-refactoring/","tags":["Design Patterns","Python","UML","Refactoring"],"title":"Extract Composite Refactoring"},{"body":"Thoughts on Closures It seems like closures are all the rage in software development circles. Ruby and Groovy have them and then C# got them. Python had a form of them but are they really closures? What are closures anyway - do we need them?\nIn this presentation I argue that anything you can do with closures you can do without closures. Often not as elegantly, but often just as clearly. What do you think?\nPresentation  Comments Posted by Lakisha on Dec 29th, 2014 I appreciate you taking to time to contribute That’s very helpful.\nPosted by Celiane on Jan 10th, 2015 Ah just what I’m looking for! I could not find this operator documented on the Groovy site. Excellent topics too btw, makes my learning idiomatic Groovy way easier. Thanks.\n","categories":"","description":"","excerpt":"Thoughts on Closures It seems like closures are all the rage in …","ref":"/blog/2007/11/05/thoughts-on-closures/","tags":["Thoughts","Ruby","Python"],"title":"Thoughts on Closures"},{"body":"Teaching 23 patterns in 3 days I have been running a design patterns course for several years where I teach 23 design pattern patterns in 3 days. I cover all the GOF (Gang of Four) patterns plus more. Here are some tales from the front lines!\nHistory Having attended Melbourne Patterns Group meetings for quite a few years (what wonderful discussions we have there!), and having written up three design patterns of my own, I decided to teach a design patterns course and offer it commercially.\nThe course has been running for over four years now (now is 2007) with between six to twelve attendees. Often a company will send a couple of employees to the same course so there are groups of students who already know each other – which is often interesting as they sometimes have discussions in front of the whole group about how a particular pattern could be applied to the software they are both working on in their companies.\nHow I start the course I begin with a PowerPoint presentation where I run through the basics of what patterns are and where they came from. I stress their benefit in communicating and transferring wisdom between programmers. I place a low emphasis on “pattern culture” and refrain from telling tales about Christopher Alexander (the architect who started the patterns movement in architecture) – it is more of a practical course.\nI have found that it is critical to revise a bit of OO (Object Oriented Programming) at the beginning of the course, as most of the patterns rely on OO concepts. And it sort of warms everybody up and gets everybody on the same page in terms of concepts like interfaces, inheritance, composition, polymorphism etc. I also do a session on basic UML - as all the patterns I present are expressed in this notation.\nHistory of the Course Materials I provide a 300+ page course manual which I edit and improve before each course. During the course I make notes to myself relating to anything that is unclear, typos or any new ideas that come up during the course that I can incorporate back into the course manual.\nHistorically, writing a training course manual is a major part of getting a course going - it took me many months to write. I began with a handwritten brainstorming outline of all the GOF design patterns – here is an ancient extract from my original starting notes:\nI then massaged everything into a proper Microsoft Publisher document, adding content, tips and code examples. I later had to shift to using Microsoft Word 2007 because I needed a dynamic table of contents facility which for some reason Publisher doesn’t support. Here is an example of what the course manual looks like now:\nHow I present For each design pattern, I get each student to read the first page of the pattern from the course notes. This way each student ‘owns’ a pattern or two (we usually cycle around the students at least twice to get through the 23 patterns). It also engages the students a bit more keeping them awake (and possible terrified or excited). I follow that by a whiteboard presentation followed by my leaping onto a computer and building a code example from scratch. I used to select patterns at random, depending on my mood and on what I thought the students would relate to best next. For example some patterns flow on from other patterns e.g. you need to understand the strategy design pattern early, as a lot of other patterns use this technique. The feedback I got sometimes expressed the preference for a fixed order of presentation so that it matched the order of the printed course materials. So from then on I changed the way I did things. I settled on a teaching order based on the reasoning of Joshua Kerievsky in his A Learning Guide To Design Patterns – which meant rearranging the teaching manual etc. I got no more complaints then and quite possibly the course is more effective because of the way the patterns build upon each other.\nCode Examples I quite often start building the examples from a UML diagramming tool like BlueJ in order to create the classes – then I fill out the code. This way we keep our attention on the high level design pattern usage. My code examples are in Java, C# and occasionally in Python – in my training courses you never know what the preferred development language of the students is – so my examples are evenly mixed between C# and Java with the occasional Python example thrown in to add something new into to the mix.\nWhen building a code example – I like to do it from scratch – as I believe that pre-canned code examples are murky and mysterious – better to have everyone understand and see everything – and that means building examples from the beginning. I used to pride myself on “jamming” (like jazz improvisation) and used to code live in front of the class - but due to the stress and amount of code involved, especially in some of the more complex examples, I now copy and paste code from the student notes using a keyboard macro facility which types the code slowly – as if I am typing it. This alleviates the stress, allows me to commentate and doesn’t bore the audience with my typos. I always build examples that compile and run – either achieving some result or passing some set of unit tests. Sometimes I adapt the examples as needed with variable names and method names invented by the group, so that the code feels more personalized and meaningful, and sometimes also we jam with the code a little to experiment with variations, in order to learn more. At the end of the training course I provide all the code we develop to anyone who wants it - on USB stick or via email.\nPuzzles Sometimes I preceded the presentation of a pattern with a puzzle and ask student to sketch out a solution to a problem themselves which gives the students some personal time to think and design. And when I present the elegant solution using the relevant design pattern, the student appreciates it better because he or she has struggled with the problem themselves. Note that I don’t actually have students using laptops as this is a recipe for students becoming distracted – it’s all done on paper. If I ever get to expand (or rather get paid for a presenting) my 3 day course to 4 days, then there will be more time for these useful puzzle sessions.\nFrom a teaching point of view Teaching these courses requires a lot of energy as we move at a rate of seven patterns a day. You have to engage the room and make it entertaining - filled with insight and technical detail. I’m not sure about the students, but after the course finishes on the 3rd night I usually collapse into a deep coma sleep well into the next morning. It’s a lot for students to absorb too, though most good programmers handle the amount of information presented well and come away excited.\nAs programmers are a highly intelligent bunch, I constantly have to handle probing questions – which I try to answer as honestly as I can. I’ve tried to become more precise over the years – answering the exact question rather than converting it into yet another convenient question which helps in the learning process. During some earlier courses I felt I was answering questions like a politician, especially if I felt the questions were half-baked and that our time was better spent answering a more profound question. But I didn’t like the feeling of being a politician so I try to answer every question as it stands. There is also a delicate balance between being an authority and my not knowing. Whilst there are situations (especially in the wide and wonderful world of design patterns and OO design) where there is no clear answer to a question, too much uncertainty is not good for a training course where certainty is expected.\nI encourage a certain amount of group discussion. Its powerful letting students think and debate for themselves. I put clues and questions their way during the discussion in order to facilitate the learning outcomes. You have to not let it go on too long and stay on schedule.\nStudents have different personalities - there are active students who get right into it and then you get the quiet ones who just listen most of the time (until they have to read their pattern!). And funnily enough the cross-section of the groups always seem to form a similar pattern: usually two or three positive and really bright sparks, one or two slower students, always one slightly grumpy negative student, and the rest are just normal.\nFuture Directions Last time I wrote a “future directions” section (in an earlier version of this blog) I promised to present patterns in a known order - exactly matching the training manual – this I now do and it has been a worthwhile change. I also promised that I would add more code samples – and this is now the case – every pattern has at least one code example. In terms of the future, I would love to actually deliver more of these courses, and would like to try a 4 day course so that we get more time for puzzles etc. and spend more time exploring UML tools that support design pattern automation etc. Most employers don’t like to lose their programmer for so long - even three days is pretty long, so a shorter course – a 2 day course – is something I am also offering now. I’ve done one day course before too, but in the end my favorite course is the classic 3 day course where we get to cover all the basic 23 GOF design patterns.\n-Andy\nFor details on my course click here.\n","categories":"","description":"","excerpt":"Teaching 23 patterns in 3 days I have been running a design patterns …","ref":"/blog/2007/01/23/teaching-23-patterns/","tags":["Design Patterns","Thoughts"],"title":"Teaching 23 Patterns"},{"body":"Ever wanted to create a “direct manipulation” program where you select various tools and manipulate stuff on a workspace? These sorts of applications are quite difficult to build due to the many possible combinations of behavior that is needed. Every tool must know what to do with each type of object. How do we manage this sort of complexity?\n How do you represent shapes? How do you represent tools? How do tools and shapes interact? How do you enhance the editor with new shapes and tools?  Tooled Composite - Architectural Design Pattern The GOF (gang of four) author John Vlissides documented this pattern in this paper.\nTooled Composite Pattern UML\nPresentation Here is a presentation I gave at the Melbourne Patterns Group about using this pattern in the implementation of the software Rationale where I was Chief Software Architect. It ended up being a success, though we did learn a few things along the way (see below).\n What we learned Whilst implementing this pattern basically saved our bacon, in terms of getting the job done, having the pattern rely on visitor so much did add a layer of complexity that was tiresome to maintain. Here are some some things we learnt after living with this pattern for a few years:\n   Classic approach Possibly a more Practical approach     visitor design pattern use RTTI (or equivalent e.g. have each shape return a shapeType enum) for better comprehensibility.   3D table of possibilities, with events, shapes, tools on each axis. table too sparse and complex, so just code for the cases you want.   some blend of visitShape() / visitEdge() etc methods and mouse event methods, within each tool skip most of the visit methods and do the logic in the mouse handling methods. Generalise the mouse handling into one event (mouseAction) and use if statements to catch the situations of interest. You know what the current shape is by having a pointer to it (set up for you by the tool or something).   use tooled composite for all interactivity have pockets of interactivity where a component takes over and looks after the gui instead of doing everything the tooled composite way (more explanation below)    With regards to the last point, what we were doing was considering the idea of creating self contained components that had their own little world inside themselves, that was totally independent of the tool/visit system. This way we didn’t have to use this architectural pattern for absolutely everything, since that was getting really intricate and tedious. We considered for example building a box (shape with text in it with various sub editable parts like titles and radio buttons) editor using the regular .NET component system and use their well understood way of handling events, and editing etc. - rather than coding visitors and miniscule tool interactions. So the idea was that as we went into say, “edit mode”, we would switch away from the tooled composite pattern and into the world of .NET - just during the edit.\nFinal Verdict Make no mistake, we desperately needed the Tooled Composite Pattern approach to hold everything together, and to be the default system in play. The .NET component approach (described above) definitely wasn’t suited to a deep and complex drawing tool like Rationale, with zooming, mini maps, panning, layout algorithms etc. In fact we found in experiments / spikes of a fully .NET component approach that .NET events would fire all over the place causing too much screen refreshing. So in the end a we used Tooled Composite for mostly everything, and dropped into .NET components only when needed eg. the text editor that you get when you double click on a workspace box in order to edit the text inside it was a pure .NET text control. We never got to push this hybrid approach any further - we wanted to write a super fancy text editor component (with hover zones, places for specifying urls and bold headings etc.) ourselves purely in .NET - we just didn’t have the time - thus we mostly stayed completely within the classic Tooled Composite Pattern. And I’m not sure what we would have done without it!\n","categories":"","description":"","excerpt":"Ever wanted to create a “direct manipulation” program where you select …","ref":"/blog/2006/03/01/tooled-composite-pattern/","tags":["Design Patterns","GUI"],"title":"Tooled Composite Pattern"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/orm/","tags":"","title":"ORM"},{"body":"Relational databases and OO memory models use different paradigms. Mapping between one and the other is often necessary but usually ends up being fiddly unless an auto-mapping ORM tool is used.\nHow an ORM works Let’s face it - a lot of developers prefer to just code classes - that’s what OO is all about. Having then to persist those classes into tables creates all sorts of fiddly mapping code. If you don’t need to persist into tables - fine. But if you do need to persist into tables, one way to reduce your workload is to use a tool like SQLObject - you simply write your code in a certain way and the tables are automatically maintained.\n Each class becomes a table. Each attribute on a class is a column in a table.  The ORM tool automatically causes the setting of attributes on objects to have a wonderful side effect: the values are written to the database table. And conversely, pulling information out from your object triggers the appropriateSQL calls to retrieve the information from the table. You don’t have to deal with sql syntax yourself. However you can take advantage of the fact that you now have a sql backend, to make sql-like queries - thus you can save coding effort. You have all the power of SQL at your disposal now, you might as well use take advantage of it! You don’t have to use precise SQL syntax but you need to use something very much like it\nORM using SQLObject In SQLObject (a Python library) you would write things like:\nps = Person.select(\"\"\"address.postcode LIKE '3186'\"\"\", clauseTables=['address']) print list(ps) ORM (object relational mapping) tools usually let you choose what style of ‘back-end’ database to use with a configuration switch - e.g. develop on sql-lite and deploy on mysql - all without changing any of your code.\nPresentation  Object Relational Mapping Pattern - using Sql Object - slideshare\nExample Before using SQLObject This is an example of some Person, Cubicle and Order classes. Persons live in Cubicles and can place one or more orders. No database activity is involved here - its all just regular python code with pointers and lists.\n# BEFORE the use of a database  class Cubicle:  def __init__(self, location=\"unknown\"):  self.location = location  self.occupant = None   def SetOccupant(self, person):  # Evict any previous occupant  if self.occupant:  self.occupant.cubicle = None  self.occupant = person # New occupant wired in  person.cubicle = self # back pointer  class Person:  def __init__(self, firstname, lastname):  self.firstname = firstname  self.lastname = lastname  self.cubicle = None  self.address = None  self.orders = []  self.addresses = []   def AddOrder(self, order):  self.orders.append(order) # one to many  order.person = self # back pointer   def SetAddress(self, address):  self.addresses.append(address) # many to many  address.residents.append(self) # back pointer (note the 'append' cos many to many)  class Order:  def __init__(self, orderNumber, description):  self.orderNumber = orderNumber  self.description = description  class Address:  def __init__(self, street, suburb, postcode):  self.street = street  self.suburb = suburb  self.postcode = postcode  self.residents = []   # Test One to one  cubicle1 = Cubicle(\"North Wing D4\") tom = Person(firstname=\"Tom\", lastname=\"Jones\") cubicle1.SetOccupant(tom) assert cubicle1.occupant == tom  # Test One to many  o1 = Order(orderNumber=\"12345\", description=\"new ipaq\") o2 = Order(orderNumber=\"12346\", description=\"new ipod\") tom.AddOrder(o1) tom.AddOrder(o2) assert len(tom.orders) == 2 assert o1 in tom.orders assert o2 in tom.orders  # Test Many to many  angelina = Person(firstname=\"Angelina\", lastname=\"Jolie\") a1 = Address(\"Fox Studios\", \"California\", 3186) # tom and angelina both work here a2 = Address(\"Brads Place\", \"Manhattan\", 40004)  angelina.SetAddress(a1) angelina.SetAddress(a2) tom.SetAddress(a1) assert a1 in angelina.addresses assert angelina in a1.residents assert angelina in a2.residents assert tom in a1.residents assert tom not in a2.residents  ################## Now do some more complex manipulations #########  # Move angelina into the North Wing D4 cubicle and  # move Tom into a new cubicle  cubicle1.SetOccupant(angelina) assert cubicle1.occupant == angelina assert tom.cubicle == None  cubicle2 = Cubicle(\"West Wing D5\") cubicle2.SetOccupant(tom) assert tom.cubicle == cubicle2  print 'Done!' Output:\nDone! Code - After SQLObject Now for the fascinating transformation. We refactor the code to use SQLObject and we end up with the same logic, but as a bonus we have persistence in a sql database. And its not so hard either!\n# AFTER - the database version - notice we import sqlobject from sqlobject import * from sqlobject.sqlite import builder; SQLiteConnection = builder() conn = SQLiteConnection('person.db', debug=False)  class Cubicle(SQLObject):  _connection = conn  location = StringCol(length=20, default=\"unknown\")  occupant = ForeignKey('Person', default=None)   def SetOccupant(self, person):  # Evict any previous occupant  if self.occupant:  self.occupant.cubicle = None  self.occupant = person # New occupant wired in  person.cubicle = self # back pointer  class Person(SQLObject):  _connection = conn  firstname = StringCol(length=20)  lastname = StringCol(length=20)  cubicle = ForeignKey('Cubicle', default=None)  orders = MultipleJoin('GiftOrder')  addresses = RelatedJoin('Address')   def AddOrder(self, giftOrder):  #self.orders.append(giftOrder) # one to many # SQL OBJECT doesn't need this  giftOrder.person = self # back pointer ** becomes the primary info sqlobject goes on   def SetAddress(self, address):  #self.addresses.append(address) # many to many # SQL OBJECT doesn't need this  #address.residents.append(self) # back pointer (note the 'append' cos many to many) # SQL OBJECT doesn't need this  address.addPerson(self) # SQLobject created this \"addWHATEVER\" method for us  class GiftOrder(SQLObject):  _connection = conn  orderNumber = IntCol()  description = StringCol()  person = ForeignKey('Person', default=None)  class Address(SQLObject):  _connection = conn  street = StringCol(length=20)  suburb = StringCol(length=20)  postcode = StringCol(length=20)  residents = RelatedJoin('Person')  #def _init(self):  # SQLObject._init(self, *args, **kw)  # self.postcodesDict = {'2323':'Brighton','22222':'Werribee'}   Cubicle.dropTable(True) Cubicle.createTable() Person.dropTable(True) Person.createTable() GiftOrder.dropTable(True) GiftOrder.createTable() Address.dropTable(True) Address.createTable()   # Test One to one  cubicle1 = Cubicle(location=\"North Wing D4\") tom = Person(firstname=\"Tom\", lastname=\"Jones\") cubicle1.SetOccupant(tom) assert cubicle1.occupant == tom  # Test One to many  o1 = GiftOrder(orderNumber=12345, description=\"new ipaq\") o2 = GiftOrder(orderNumber=12346, description=\"new ipod\") tom.AddOrder(o1) tom.AddOrder(o2) assert len(tom.orders) == 2 assert o1 in tom.orders assert o2 in tom.orders  # Test Many to many  angelina = Person(firstname=\"Angelina\", lastname=\"Jolie\") a1 = Address(street=\"Fox Studios\", suburb=\"California\", postcode=\"3186\") # tom and angelina both work here a2 = Address(street=\"Brads Place\", suburb=\"Manhattan\", postcode=\"40004\")  angelina.SetAddress(a1) angelina.SetAddress(a2) tom.SetAddress(a1) assert a1 in angelina.addresses assert angelina in a1.residents assert angelina in a2.residents assert tom in a1.residents assert tom not in a2.residents  ################## Now do some more complex manipulations #########  # Move angelina into the North Wing D4 cubicle and # move Tom into a new cubicle  cubicle1.SetOccupant(angelina) assert cubicle1.occupant == angelina assert tom.cubicle == None    cubicle2 = Cubicle(location=\"West Wing D5\") cubicle2.SetOccupant(tom) assert tom.cubicle == cubicle2  # Now SQLOBJECT lets us do other magic things, that leverage relational db technology p = Person.get(1) print p  #ps = Person.select(Person.q.firstName==\"John\") #print list(ps)  #ps = Person.select(\"\"\"address.id = person.id AND # address.postcode LIKE '40004%'\"\"\", # clauseTables=['address']) ps = Person.select(\"\"\"address.postcode LIKE '3186'\"\"\",  clauseTables=['address']) print list(ps)  print 'all people' ps = Person.select() print list(ps)  print 'Done!' Output:\nWhat sort of tables are created? You can browse the resulting database tables (in this case sqllite tables) using the SQLite Database Browser. Here are some screenshots of the tables we have created:\nthis is the table structure:\nAll the above tables and content were created by the Python code!\nAlternatives You may also be interested in Sqlalchemy for Python which is very powerful and flexible, perhaps getting a bit complex. Django of course has a built in ORM and is much easier to use, though you can only use it in Django web apps.\nThen there are ORM frameworks for Java like hibernate and many, many others. Just google for ORM. And if you are into .NET then the “low hanging fruit” solution of LINQ is worth looking at.\n The point of this article has been to get you to see the essence of what an ORM does, with the minimal amount of code.\n ","categories":"","description":"","excerpt":"Relational databases and OO memory models use different paradigms. …","ref":"/blog/2005/07/01/orm-pattern/","tags":["Design Patterns","SQL","ORM","Python"],"title":"ORM Pattern"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/java/","tags":"","title":"Java"},{"body":"This is an exploration of how to swap implementations of objects within our software architectures using patterns like the Interface, Factory, Strategy, Proxy, Adapter, and finally to the full blown Bridge Design Pattern.  This article was formerly known as The “Road to the Bridge” and as “Strategy to Bridge”\n The problem We want to be flexible in our architecture. We want to be able to swap implementations of objects/classes easily e.g. between using class A or class B. We want to:\n Build to anticipate and celebrate change. Program to interfaces, not implementations..  Some broad solutions Let’s examine the range of solutions - showing the story of how to bind to two different implementations of the same interface - simple ways and more complex ways. Specifically how we can choose between:\n compile-time binding (one or the other is chosen by compiled code) factory based binding (one or the other is returned by a factory) dynamic binding using an intermediary object  where #3 is achieved using Strategy, Adapter and Proxy, which ultimately leads us to using the Bridge Pattern.\n This journey strikes me as a powerful way of looking at a deep and common problem (building to embrace change), and that also unites multiple patterns under the one theme. Given programmers love the ideal of ‘programming to interfaces’ and being able to swap in different implementations, this story will show how to do it at many different levels and in fact how many of the classic GOF design patterns are all about helping us to achieve it.\n Interface pattern Interface, compile time choice Alternative implementations of an interface. Instantiate one or the other implementation of that interface. The code that uses the object is unaware of which object it is using. “Program to an interface”\nWorker o = new A() // Worker o = new B() o.DoSomething() Here the choice is at compile time, by commenting out one or the other instantiation.\nInterface, dynamic run time choice Same solution except choose particular implementation dynamically at runtime using a flag.\nif flag  Worker o = new A() else  Worker o = new B() o.DoSomething() // we don't know if its an A or a B. Everything works ok. Factory Create A or B at runtime by asking another class to create the concrete object for us. Pass in the flag to the factory or let the factory decide for itself which implementation we want.\nFactory class is the only class to refer to concrete products. The client refers to the interface/abstract class only.\nWe are still talking directly to the concrete object (either an A or a B).\nThere are a number of factory method variants:\nSimple Super Dumb Factory Encapsulates the “dynamic run time choice” solution discussed in the beginning of this talk. Benefit is that the conditional logic containing the if statement is hidden and possibly centralized in a factory class.\nFactory class is the only class that refers directly to concrete products. Client refers only to interface/abstract class.\nThe choice is made via conditional code.\nFactory f = new SimpleFactory() Worker o = f.CreateWorker() o.DoSomething() // we don't know if its an A or a B. Everything works ok. Registry Based Factory Maintains a registry of mappings between strings (or any type of key e.g. objects, class references, numbers etc.) and class references. Benefit: more generalized, no if statements. Factory class is the only class that refers directly to concrete products. Client refers only to interface/abstract class.\nThe choice is made via registry key.\nkey = 'worker a' // in setup code somewhere Factory f = new RegistryFactory() Worker o = f.CreateWorker(key) o.DoSomething() // we don't know if its an A or a B. Everything works ok. GOF Factory Method Assumes the client already has an instance of some class which needs either a A or B version of a worker class. Each alternative instance of the existing class overrides a create method differently, each instantiating a different concrete product - typically one matching their own functionality. Benefit: no class reference language facilities required. Factory class is the only class that refers directly to concrete products. Client refers only to interface/abstract class.\nThe choice is made via polymorphic override.\nNote that the choice as to which Work Manager (MgrA or MgrB) to instantiate in the first place is going to be an issue, but is not the point of this example. The point is that once you have a particular brand of work manager, then you will get a related brand of of worker via the suitably overriden CreateWorker factory method.\nWorkManager f = new MgrA() // done somewhere in setup Worker o = f.CreateWorker(key) o.DoSomething() // we don't know if its an A or a B. Everything works ok. There will be parallel hierarchies, e.g. the WorkManager and the Worker hierarchies closely match, with A and B versions of their subclasses. Start to think of a family of classes.\nMy further thoughts, including a more detailed example of Factory Method here.\nAbstract Factory Abstract factory similar to factory method, in that there is something being overridden.\nAbstract factory is the same as factory method, except there is more than one Creation method. E.g. CreateWorker, CreateAdministrator, CreatePoliceman - such that the class containing the factory methods might as well become a sole purpose class for dispensing these related classes.\nThe abstract factory is a mere mechanism for delivering A versions of B versions. E.g. Client wants A version of products\nClient programs against interfaces thus can switch between A or B. Specifically, the client only talks to  IAbstractProductFactory IProduct1 IProduct2 IProduct3  IAbstractProductFactory f = new ProductFactoryVersionA() // choice is made at compile time, via factory method (run time) via strategy (runtime) IProduct1 p1 = f.CreateProduct1() IProduct2 p2 = f.CreateProduct2() IProduct3 p3 = f.CreateProduct3() All products p1, p2, p3 are in the above example A versions, and compatible with each other.\nMy further thoughts on Abstract Factory here.\nIndirection Patterns Getting to implementation A or B via intermediary.\nRather than instantiate A or B and refer to them directly (albiet via a flexible interface variable), another approach is to refer to the same object all the time and hide the switching behind that object.\nNow, because what is behind the intermediate object is hidden (and rightly so), you no longer need to program to the Strategy interface.\nIf you want to still program to an interface (good idea) then program to the Intermediary interface. If you want to run free and wild, program to the intermediary object api.\nVariants are as follows:\nProxy Pattern v1 A methodless indirection using “demeter” referencing.\nResponsibility of the client to know the API of the strategy. So still programming to the strategy interface. You have to since the intermediary has no methods, or rather, has no methods specifically related to accessing the A \u0026 B classes.\no = new Intermediary() o.SetStrategy(new A()) // done in setup somewhere, or via a factory or via dependency injection framework o.impl.DoSomething() Strategy Pattern Proper Strategy.\no = new Intermediary() o.SetStrategy(new A()) // done in setup somewhere, or via a factory or via dependency injection framework o.DoSomething() later you can switch the strategy without the client code caring.\no.SetStrategy(new B()) o.DoSomething() // different behaviour or different implementation occurs Strategy with a touch of the Adapter pattern If your implementation has a slightly different API than the one your client code wants to use, then you can adapt it at the same time as you are strategizing…\nProxy v2 - going all the way If your only have the same methods in your intermediary object as you have in your implementation, then you can have the intermediary inherit from the abstract implementation interface. This turns the pattern into proxy, and lets you optionally, program to the Strategy interface again.\nThe proxy, whilst inheriting from Strategy, can also implement extra methods, though this is diverging a little from the intent of Proxy.\nAn alternative to inheritance, the proxy can implement the interface of the Strategy class, and get some similar polymorphic substitutability benefits.\nBridge Pattern This is still a variant on accessing different behaviour via an intermediary.\nBridge is just strategy with a oversized lhs context.\nSame as strategy except there is\n Massive subclassing going on on the lhs (the ‘context’ side). The nature of the lhs methods are more compositional, adaptive and far reaching (not just a simply strategy delegation)  Massive subclassing There is massive subclassing going on in the lhs. context.\nThe reason is that you are wanting lots of methods and lots of functionality, lots of classes. E.g. you want to have a GUI or DB subsystem, not just a single strategy.\nlhs and rhs methods What is the nature of the lhs and rhs methods?\nTypically rhs (implementation/driver) calls are more primitive, and one lhs method will call the rhs. many times. e.g. see the DoTalk() method, above.\nThe lhs methods can be diverse, comprising\n lhs method simply calls rhs method. Method names can change or be the same. Simple delegation with no extra work. lhs methods more complex and adapt and do extra lines of code as needed Lots of logic in the lhs methods and may have associated helper classes. But in the end they call stuff on the intermediary api.  Insulated from change.  Allows lhs and rhs to vary independently.\nClient is insulated from changes. Should not talk talk to implementation, even if it is the abstract implementation interface because the abs impl. may change. If the abstract implementation interface does change then this affects only the Intermediary but not the client code. Client code should thus only talk to intermediary.\nSimilarly, if you change the Intermediary API, then only the client is affected - the r.h.s. (the abstract implementation interface and concrete implementations) are not affected.\nIn this sense the lhs and rhs can vary independently. Ok - so there are repercussions when things vary - but they are limited, as discussed above.\nFinal thought on Bridge You could simplify Bridge and have the client code talk directly to the rhs. abstract implementation interface. You would be reverting to where we started on this “road to Bridge”. Nothing wrong with that - but you would lose the ‘insulation against change’ that Bridge gets you. And with Bridge the lhs can have lots of complex logic and the rhs implementations need only implement the more primitive operations. That is a big win.\nSolutions overview Summary of the ways of coupling your components\n  Technique  Meta-Pattern  Pattern  Description     To implementation A or B directly  Program to Interface  Interface  Interface, compile time choice  Alternative implementations of an interface. Instantiate one or the other implementation of that interface. The code that uses the object is unaware of which object it is using. \"Program to an interface\"    Interface, conditional code  Same solution as above, except choose particular implementation dynamically at runtime using a flag.    Factory  Factory Method  conditional code     registry     polymorphic factory method     Abstract Factory  abstract factory - polymorphic     conditional code     class registry     To implementation A or B via intermediary  Indirection  Dot notation drilling  methodless proxy using demeter referencing     Strategy  strategy - may be extra methods not related to the strategising     Proxy  proxy, all methods mapped (demeter is happy). inherit          Adapter  adapted proxy-like strategy. different method names sometimes     Bridge  rhs - methods usually more primitive. Only talk to abs. impl.  lhs - all adapted \u0026 thus changeable. can build hierarchies \n     Final thoughts The presentation of the patterns form a story of simple to complex. And its a story of two broadly different techniques,  Getting to the implementation A or B directly Getting to the implementation A or B via an intermediary object  Adapter vs. Bridge Adapter is closer to Bridge in that the adaptation on the lhs. (the context) can be not just a renaming and mapping of methods, but extra logic and whatever it takes to make the adapation work. So the lhs. is closer to the free wheeling compositional lhs of Bridge Pattern. By compositional I mean that a single lhs. method can comprise of complex code and multiple calls to the rhs. methods. In Bridge the lhs methods can even call on other methods in the same lhs, whereas in Adapter this is not really the intent.\nIOC (inverison of control) IOC (inverison of control) also fits in here somewhere.\nDependency injection. Inject a context object or wire up dependent objects. Allows you to program normally. Allows different implementations to be injected in.\nMicrokernels Microkernels also fit in here.\nAmongst other things, a Microkernel style architecture allows alternative plugins (services) to fulfil the implementation.  Maybe think of it as service A or B. Or plugin A or B.  There seem to be three types of MicroKernel:\n  Service location, like COM where you either ask for a service and get an interface which you use, or you call a service and the late binding binds to an appropriate service at the last minute. Style of programming: slightly different - must ask for an interface before using it.\n  Message broadcasting kernel, where messages are broadcast to all plugins and the chain of responsibility pattern is used, and a plugin/service which can make sense of the message acts on it (either consuming it or passing it on for someone else to have a go at). Style of programming: different - you must create messages send them into the kernel, either synchronously or asynchronously.\n  Dependency Injection Microkernel, where all object attributes refering to other objects (dependencies) are injected for you by a framework. Rather than setting up these references yourself manually, as normal programming style dictates, you leave it to magic - which allows other implementations to be swapped in. You must of course program to interfaces not to concrete classes, in order for this trick to work. Style of programming: normal, you just call methods on objects that you have references to. The fact that the references have been wired up by a framework (which consults a plugin directory \u0026 setup file telling us which plugins are active) is hidden from us.\n  Maybe one or more of the above three descriptions of a Microkernel is not actually a microkernel - I am just learning about this stuff. But I have seen references that suggest my analysis is correct. E.g. The Castle IOC framework for .NET calls itself a microkernel. Variables as indirection A variable of type interface is really a another ‘secret’ form of indirection.\nI have made a broad distinction between accessing implementations A or B either directly or via an intermediary. Thinking about it some more, when you do access A or B directly, you do so via an an intermediary variable declared of type abstract/interface. This is when you are being good and ‘programming to interfaces’.\nThus you could argue that even even when you are accessing an object (implementation A or B) directly, you are in fact still acting through an intermediary - the interface variable!\n","categories":"","description":"","excerpt":"This is an exploration of how to swap implementations of objects …","ref":"/blog/2005/03/05/swapping-implementations/","tags":["Design Patterns","Java","Refactoring"],"title":"Swapping Implementations"},{"body":"Blackboard Architectural Pattern The Blackboard Architectural Pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialised sub-systems assemble their knowledge to build a possibly partial or approximate solution.\nSee the paper by D. Deugo, M. Weiss and E. Kendall.\nAndy’s Presentation  Blackboard Pattern Slides by Andy\nExample Code This is a pattern that is difficult to do an example for because you would normally have to set up a large infrastructure of classes etc. I refused to be put off and presented a simple blackboard pattern implementation in python, during my talk to the Melbourne Patterns Group. Please forgive its limitations but it should at least give you an idea of what this pattern is about.\nNote that you can flick a switch in the code below and have a small GUI pop up in Swing via jython.\n\"\"\" Blackboard system by Andy Bulka Prepared for the Melbourne Patterns group - August 2004 \"\"\" import random True = 1 False = 0  print \"Welcome to my blackboard system\"  class Blackboard:  def __init__(self):  self.experts = []  self.commonState = {}   def AddExpert(self, expert):  self.experts.append(expert)  class Controller:  def __init__(self, blackboard):  self.blackboard = blackboard  # init blackboard  self.blackboard.commonState['answer'] = 0  self.blackboard.commonState['answerCorrectness'] = 0   def Loop(self):  while self.blackboard.commonState['answerCorrectness'] \u003c 90:  candidates = []  for expert in self.blackboard.experts:  eagerness = expert.CanContribute()  if eagerness:  candidates.append((eagerness,expert)) # append a tuple   candidates.sort() # move winning tuple to the end of the list  winningExpert = candidates[-1][1] # -1 means the last item in list.  winningExpert.execAction()   return self.blackboard.commonState['answer']   def Loop_OLD(self):  while self.blackboard.commonState['answerCorrectness'] \u003c 90:  for expert in self.blackboard.experts:  if expert.CanContribute():  expert.execAction()  return self.blackboard.commonState['answer']   class AbstractExpert:  def __init__(self, blackboard, outtext):  self.blackboard = blackboard  self.outtext = outtext   def CanContribute(self):  raise 'not implemented'   def execAction(self):  raise 'not implemented'  class SmartAss(AbstractExpert):   def CanContribute(self):  return random.randint(1,20)   def execAction(self):  self.blackboard.commonState['answer'] += random.randint(1,20)  print '.',  self.outtext.text += '.'  class WiseMan(AbstractExpert):   def CanContribute(self):  if self.blackboard.commonState['answer'] \u003e 200:  return random.randint(1,20)  else:  return False   def execAction(self):  self.blackboard.commonState['answer'] += 1  self.blackboard.commonState['answerCorrectness'] += 5  print '*',  self.outtext.text += '*'  WANT_JAVA_GUI = False  if WANT_JAVA_GUI:  from javax.swing import JFrame, JLabel, JButton, JTextField   class JHutton(JButton):  pass   class GUI:  def __init__(self):  f = JFrame()  f.show()  f.size = 200,200  f.title = \"Blackboard Jungle\"   f.contentPane.add(JLabel(\"Expert1\"))   self.txt1 = JTextField(30)  f.contentPane.add(self.txt1)   f.contentPane.add(JLabel(\"Expert2\"))   self.txt2 = JTextField(30)  f.contentPane.add(self.txt2)   button = JHutton(\"Think\")  f.contentPane.add(button)  button.actionPerformed = self.onClick   from java.awt import FlowLayout  f.contentPane.layout = FlowLayout()   f.pack()  f.visible = 1  self.f = f   blackboard = Blackboard()  blackboard.AddExpert( SmartAss(blackboard, self.txt1) )  blackboard.AddExpert( WiseMan(blackboard, self.txt2) )  self.c = Controller(blackboard)   def onClick(self, event):  result = self.c.Loop()  print  print result  print 'done'   gui = GUI() else:  # Pure text  class DummyTextWidget:  def __init__(self):  self.text = ''   import sys  blackboard = Blackboard()  blackboard.AddExpert( SmartAss(blackboard, DummyTextWidget()))  blackboard.AddExpert( WiseMan(blackboard, DummyTextWidget()))  c = Controller(blackboard)  result = c.Loop()  print  print result  print 'done' Output\nWelcome to my blackboard system . . . . . . . . . . . . . . . . . . . * . * * * * * . * . * . * . . * * * . * . . * * . . * . . * . * 371 done Example - UML Layout Another real world example of this pattern being used in is my open source Python UML tool where I used this pattern to evaluate numerous attempts at laying out a UML diagram, scoring the result and then choosing the best layout.\nHere is the source code of that Python module on GitHub.\n","categories":"","description":"","excerpt":"Blackboard Architectural Pattern The Blackboard Architectural Pattern …","ref":"/blog/2004/08/05/blackboard-pattern/","tags":["Design Patterns","Python","UML"],"title":"Blackboard Pattern"},{"body":"Null Object Design Pattern Sometimes I make the joke that design patterns are all about getting rid of if-else statements from your code. The null object pattern is an example of a pattern that does just that - check out the code at the bottom for details.\nWhat is it? A Null Object provides a surrogate for another object that shares the same interface, but does nothing.\n This pattern was originally written up by Bobby Wolf, in Pattern Languages of Program Design 3.\n UML Null Object Pattern\nHave I used it? Yes, I have used this pattern a few times in my work. You have to be a little bit careful about managing the swapping of null obect for the real thing. If bits of your code are pointing to the null object then you can’t easily swap in the real thing. Better to put the null object / real object behind a proxy so that nobody knows what you are doing!\nDocumentation  Scroll down through the course pages above - or use the page next/previous buttons.\nNull Object Design Pattern chapter from Andy Bulka’s Design Patterns course book.\nExample Code Here is a Python example. The class named API is a real class with real functionality in it (note the name of this class could be anything, and not have anything to do with API’s).\nWe decide that we want to optionally log calls to our API class using a Logger class. So we modify our API class to call out to the Logger class.\nWithout Null Object from time import asctime, localtime  class AbstractObject: pass # pretend python has abstract classes  class RealLogging:  def Log(self, msg):  print 'Logged at', asctime(localtime()), msg  # Proxy / wrapper around either null or real logger.   class Logger:  def __init__(self):  self.logger = RealLogging()  def Log(self, msg):  if self.logger:  self.logger.Log(msg)  def On(self):  self.logger = RealLogging()  def Off(self):  self.logger = None Logger = Logger()  # Usage:   class API:  def doA(self):  if Logger.logger:  Logger.Log('Am calling A')  print 'A done.'  def doB(self):  if Logger.logger:  Logger.Log('Am calling B')  print 'B done.'  o = API() o.doA() o.doB()  Logger.Off() o.doA() o.doB() With Null Object # Null Object Pattern   class AbstractLogging:  def Log(self, msg): pass  from time import asctime, localtime  class RealLogging(AbstractObject):  def Log(self, msg):  print 'Logged at', asctime(localtime()), msg  class NullLogging(AbstractObject):  def Log(self, msg):  return  # Proxy / wrapper around either null or real logger.   class Logger:  def __init__(self):  self.On()  def Log(self, msg):  self.logger.Log(msg)  def On(self):  self.logger = RealLogging()  def Off(self):  self.logger = NullLogging() Logger = Logger()  # Usage:   class API:  def doA(self):  Logger.Log('Am calling A')  print 'A done.'  def doB(self):  Logger.Log('Am calling B')  print 'B done.'  o = API() o.doA() o.doB()  Logger.Off() o.doA() o.doB() Output Without logging:\nA done. B done. With logging:\nLogged at Fri Jan 23 17:28:01 2009 Am calling A A done. Logged at Fri Jan 23 17:28:01 2009 Am calling B B done. Notice that in the null object implementation, there are no “if statements” in the client code (API class), which means we turn on logging by injecting in a different instance of Logger rather than checking a flag. Arguably this is more flexible and cleaner. You even have more options to swap (or inject) different kind of Logger classes with this pattern.\nThe Null Object pattern is about switching in a Logger class that does nothing.\n","categories":"","description":"","excerpt":"Null Object Design Pattern Sometimes I make the joke that design …","ref":"/blog/2002/10/04/null-object-pattern/","tags":["Design Patterns","UML","Python"],"title":"Null Object Pattern"},{"body":"What is it like to use design pattern in real life programming?\nDo the sometimes academic patterns translate into the real world?\nThe answer is yes. I will back this up with three examples of where I have used patterns in real world projects.\n Scroll down through the slides above\n-Andy Bulka\n","categories":"","description":"","excerpt":"What is it like to use design pattern in real life programming?\nDo the …","ref":"/blog/2002/09/04/using-design-patterns-in-real-projects/","tags":["Design Patterns","Thoughts"],"title":"Using Design Patterns in Real Projects"},{"body":"Introduction As design patterns become more mainstream, various IDE’s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you. This paper explores the state of pattern automation software, discusses the pros and cons of various approaches and then goes on to discusses the broader issues raised by the attempt to automate something which some argue, in principle, perhaps should not be automated at all..\nHistory of these papers and talks My pattern automation paper Early tools and the philosophy of pattern automation (below) was followed a few years later with a talk entitled: Design Pattern Tools as of 2006 (below) which reviewed the current crop of UML tools circa 2006. For a specific review of Netbeans 6 design pattern support - see Netbeans UML blog post, created after I gave that talk to the Melbourne Patterns Group in Feb 2009.\nDesign Pattern Automation \u0026 UML Tool Support Various UML Tools support design pattern usage. You typically drag and drop patterns onto your workspace and they appear as UML classes. Its a bit more complicated than this, and raises all sorts of interesting issues. Read the pdf (part 1) and then read the powerpoint and watch the video (part 2).\nEarly tools and the philosophy of pattern automation  This paper is a revision of one that appeared at KoalaPLoP 2002 – the Third Asia-Pacific Conference on Pattern Languages of Programmes. Conferences in Research and Practice in Information Technology,Vol. 13. J. Noble, Ed. Reproduction for academic, not-for profit purposes permitted provided this text is included.\n  Download as pdf.\nDesign Pattern Tools as of 2006 Here are the slides from a talk entitled “Design Pattern support in UML tools - part II” which I gave in October 2006 to the Melbourne Patterns Group, Australia.\n View the above powerpoint on slideshare or download the powerpoint directly:\nAddendum As part of my Design Pattern Automation - Part 2 talk, I recorded some of that session. Here is a youtube video of how to apply design patterns using IBM’s Rational tool. Apologies about the sound quality - just look at the pictures!\nDemonstration of Patterns in IBM’s Rational tool. http://www.youtube.com/watch?v=IjKClDX2dUU\n","categories":"","description":"Tooling and Design Patterns in IDEs.  As design patterns become more mainstream, various IDE's (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns.\n","excerpt":"Tooling and Design Patterns in IDEs.  As design patterns become more …","ref":"/patterns/design-pattern-automation/","tags":["Design Patterns","Thoughts"],"title":"Design Pattern Automation"},{"body":"How can IDE visualisation features be further enhaced by UML and Design Patterns to assist developers. It discusses using the revolutionary UML tool ModelMaker (now discontinued) in conjuntion with Delphi.\nModelMaker allowed you to apply patterns onto your code using a UI\n This is a talk I gave at the time that I was into Delphi programming. Presented to the Australian Delphi User Group in December 1999.\n Engineers use models  Engineers produce plans before building bridges Electrical engineers have a language of electrical symbols Architects have blueprints  What do software engineers / programmer for a modelling tool?\nDo programmers necessarily need a strict visual language like other engineers?\nAnswer: Most programmers use visual IDE (integrated development environments) to visualize and organize their work. For most programmers, this ‘informal’ modelling is sufficient for their needs.\nDatabase tables have a natural visual reprentation of a grid/table e.g.\nthough when you want to visualise the often complex relationships between multiple tables, you may want to use something like the Delphi 5 Data Diagram:\nWe also have visual modelling in the form of hierarchical representation of classes (or elements of a data module, in Delphi 5). This form of representation is extrememly useful, however, these hierarchical views do not show how objects are connected to each other.\nWhere does UML come in? A modern IDE (Integrated Development Environments) like Delphi encourage a logical two-tier design where the data sits in the database and both the display \u0026 business logic sits in the presentation classes/components. Really, most programmers are filling in the blanks (e.g. event code) and setting properties - the application code hangs off the IDE / Delphi / VCL / component framework.\nWhen someone asks you “where is your application code?” you typically answer in my GUI.\nIf your application gets\n large or starts to create other extra classes  then you have no means of visualising your application code/classes. Not only are they embedded behind GUI components, but they are effectively invisible to broad visualisation and organisation.\nModelling to the rescue Modelling software allows you to visualise your application code/classes, using UML as the visual symbol language. E.g. Objects and pointers to other objects are represented by boxes and lines..\nWhen using a UML modeller, in addition to being able to visualize your extra application classes, you can also\n  Visualize your existing Delphi components (including forms)\n  Take a punt and model your data as real objects instead of DB tables - that way you can give them behaviour. They become real OO objects that model the real world domain your application is about. Your application would then be based on a proper object model.\n  Keep application / business logic out of the GUI, and in a separate tier - called the model. An OO model not only can model the real world domain your application is about, but can also be the engine powerhouse of your app.\n  Visualising a form in UML A UML model can also model \u0026 incorporate GUI forms. A simple Delphi application with a form and a button on that form can be represented in the following ways:\nThus this form containing a button\nwhich is equivalent to the following Delphi code\ntype TForm1 = class (TForm) Hello: TButton; procedure HelloClick(Sender: TObject); end; can be represented by the following UML diagram\nNote that a form aggregates or contains a button, and this is represented by a arrow pointer. If the button’s lifetime is tied to the lifetime of the form, then the arrow should have a black diamond instead of a clear one (if you are a stickler for correct UML).\nModelmaker ModelMaker’s UI integrated code, UML and design patterns\nModelMaker benefits ModelMaker (now unfortunately discontinued) represented a brand new way to develop classes and component packages for Borland Delphi (1/2/3/4/5). ModelMaker is a two-way class tree oriented productivity and UML-style CASE tool specifically designed for generating native Delphi code (in fact it was made using Delphi and ModelMaker). Delphi’s Object Pascal language is fully supported by ModelMaker. From the start ModelMaker was designed to be a smart and highly productive tool. It has been used to create classes for both real-time / technical and database type applications. Versions 4 and 5 have full reverse enginering capabilities.\nModelMaker supports drawing UML style class diagrams and from that perspective it looks much like a traditional CASE tool. The key to ModelMaker’s magic, speed and power however is the active modelling engine which stores and maintains all relationships between classes and their members. Renaming a class or changing its ancestor will immediately propagate to the automatically generated source code. Tasks like overriding methods, adding events, properties and access methods are reduced to selecting and clicking.\nThe main difference between ModelMaker and other CASE tools is that design is strictly related to and natively expressed in Delphi code. This way there is a seamless transition from design to implementation currently not found in any other CASE tool. This approach makes sure your designs remain down to earth. The main difference between ModelMaker and other Delphi code generators are it’s high level overview and restructuring capabilities letting you deal with complex designs.\nIn ModelMaker you’ll find a synergy of ideas from the cutting edge of object-oriented and component-based technology. It was inspired by the work of methodologists like Ivar Jacobson (OOSE), Ralph Johnson (design patterns) and Karl Lieberherr (adaptive software).\nA unique feature, currently not found in any development environment for Delphi, is the support for design patterns. A number of patterns are implemented as ‘ready to use’ active agents. A ModelMaker Pattern will not only insert Delphi style code fragments to implement a specific pattern, but it also stays ‘alive’ to update this code to reflect any changes made to the design.\nAs a result, ModelMaker lets you:\n Speed up development Think more about designing instead of typing code. Design without compromising and refine and experiment with designs until they feel just right. Create and maintain magnitudes larger models in magnitudes less time. Document you designs in UML style diagrams.  Modelmaker Tutorial  Creating classes Adding methods and properties/fields to classes Creating constructors and Destructors - MM adds the ‘call inherited’ code Units and code generation, two way synch.  A sample of Andy’s Modelmaker live demo tutorials.\nCreating a Simple Pointer property How to create 2 new classes and have one point to the other. Also notice how a Delphi property is automatically created to represent the pointer. Of course you can add the property by clicking on the “Add property” toolbar button, but as demonstrated, it is sure sometimes conventient to be able to drag and draw a pointer - additionally, it makes it clear that the property represents a relationship between two classes, rather than the property merely holding a value or some sort.\nApplying the Wrapper design pattern Notice we create a third class and add 4 methods to it. We want to then access these methods indirectly, via the TDefault1 class. So we duplicate the methods in the TDefault1 class, delegating / redirecting these calls to the appropriate class, where the real methods live. This technique is known as ‘wrapper pattern’. Note that the pattern will keep the method names up to date e.g. if you rename the wrapped class TDefault3 method ‘Member1’ into ‘Member1A’ then ModelMaker will automatically also rename TDefault1 class’s method ‘Member1’ into ‘Member1A’.\nOther uses of this pattern include simulating multiple inheritance (e.g. by having a class delegate out functionality to another class, you create the illusion of complex functionality coming from multiple classes).\nInitialising (Create) and owning (Destroy) objects Another use of the wrapper pattern is creating composite objects out of smaller parts. The client needs only to deal with one class, but behind the scenes there may be many classes involved. Related to ‘Facade pattern’. There are issues of initialisation: Do you want the big class to create the sub classes? If so, make a Create constructor method in the big class TDefault1 and do the creation of the subclasses (TDefault2, TDefault3) there. Modelmaker’s creational wizard can help build the code in the constructor automatically - and the destruction code as well. E.g.\nIn the above demo we are creating Create and Destroy methods for the TDefault1 class, so that it both creates and destroys its ‘sub-classes’ when it itself is created/destroyed. After running the ModelMaker creational wizard on the TDefault1 class, the resulting Create method is\ninherited Create; FDefault2 := TDefault2.Create; FDefault3 := TDefault3.Create; and the resulting Destroy method is\nFDefault2.Free; FDefault3.Free; inherited Destroy; Note: the ‘creational wizard’ only generates code if it finds a create or destroy method. Also, the creational wizard only generates code for FIELDS that have been marked ‘initialised’ (this will generate the create code) or ‘owned’ (this will create the free code).\nInterfaces, Patterns, Templates After a long period of design \u0026 development, a class can end up containing many, many methods and properties. Often these methods and properties can be grouped. Wouldn’t it be great if we could name and distinguish these groups? Well we already do!\nClasses are an attempt to group functionality. Class A supports methods 1 \u0026 2, Class B inherits from B and also supports methods 3 \u0026 4.\nInterfaces are another attempt to group functionality. A class can support/implement multiple interfaces.\nPatterns are sets of methods and properties in a class, relating to methods and properties in one or more other classes.\nModelmaker templates are groups of methods \u0026 properties that you can save to disk and re-apply to any class. Parametrisation means you can customise the code as you apply it. You only get one shot at this. After the code template is applied, you end up with raw code in your class, which you need to maintain manually. This compares to ModelMaker’s design patterns, which are more ‘alive’ e.g. references to a renamed method get maintained correctly within a ModelMaker pattern (e.g. Modelmaker’s visitor pattern)\nWhilst ModelMaker is discontinued, you can read the manual and still download a trial of the old software.\nThe Future As seen from 2000’s - nothing like this ever happened\nWorking at the level of UML, ‘sets/groupings of methods’ and patterns, is a significantly higher level than Delphi code - which is starting to look like assembly language. One day we will be applying colored ‘LEGO’ blocks that represent various groups of methods \u0026 properties - joining them together, much like the other component / bean technology we have today.\nHere is an example of a Composite \u0026 Proxy pattern combined, from the book Pattern Hatching: Design Patterns Applied by Vlissides:\nMore ideas for what a programming environment of the future might look like: Adding a refactoring tool to ModelMaker + more patterns + templates. Sequence Diagrams auto-generated from code. Color coded groupings of patterns and methods/properties.\nHere is an example of a ‘refactoring’ from Martin Fowler’s book Refactoring: Improving the Design of Existing Code:\nModelmaker can make easy work of accomplishing this refactoring using drag and drop of methods, however a built in, dedicated refactoring tool (as in Smalltalk and Java) would make the task even clearer and easier.\n2020 Postscript: Modern refactoring tools are now commonplace.\n-Andy Bulka\n","categories":"","description":"","excerpt":"How can IDE visualisation features be further enhaced by UML and …","ref":"/blog/2000/01/04/patterns-modelmaker-beyond/","tags":["Design Patterns","Thoughts"],"title":"Patterns, ModelMaker \u0026 Beyond"},{"body":"Capturing hard-won software design experience in the form of design patterns and architectural patterns is a noble cause that everyone can contribute to.\nYou can contribute by writing patterns and maybe even coming to a Plop patterns conference.\nBasically when you see a software development technique a few times, and see that it isn’t yet documented - write it up in Pattern format and give it a name!\nA pattern is more than just a “tip” or technique though - a pattern represents an abstract idea - that can be implemented in various ways depending on your circumstances.\nThe Patterns Movement The Patterns Movement is spearheaded by Hillside and the Plop conferences, held each year.\nThere are a couple of things I would like to see happen in the patterns world.\n  First, it would be nice if there was a single, authoritative repository of patterns. Yes an attempt has been made - a catalog book and and various websites - but nothing authoratative. I started a list of links here.\n  Secondly, it would be nice to have deep design pattern support in UML within all our favourite IDE’s. For example Netbeans has it all - coding, form design, UML and design pattern support - albiet not as integrated as it could be and not as polished as it could be. Update: Unfortunately Netbeans seems to have dropped UML support in recent builds.\n  Comments indicating Pattern usage If IDE’s are not your cup of tea, then how about this: source code should have comment markers indicating where the patterns are, so that a reverse engineering tool can visualise not only the UML but also where the patterns are.\nMy own UML tool PyNSource will have such a feature - est. June 2011 (turns out this never happened :-).\nExecutable UML Further advancements are arguably executable UML and even the possibility of building software without code. I muse a bit about this in my blog entry on software visualisation and my paper on design pattern tools. A repository of patterns First, it would be nice if there was a single, authoritative repository of patterns. Yes an attempt has been made - a catalog book and and various websites - but nothing authoratative. I’m starting a list of links here.\nPatterns at all levels need to be core visual building blocks of IDE’s, or at the very least, extractable from source code into some visual UML tool - rather than being design ghosts that float around, implicit, in our source code.\n","categories":"","description":"Are design patterns dead?","excerpt":"Are design patterns dead?","ref":"/patterns/musings-on-patterns/","tags":["Design Patterns","Thoughts"],"title":"Appendix: Musings on Design Patterns"},{"body":"Andy’s Published Design Patterns The four patterns MGM, RM, TI and Pattern Automation are substantial works which have been presented at KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs) in both 2000 and 2001. My shepherds (paper peer reviewers) were:\n Jim Coplien (MGM pattern) Ali Arsanjani (TI pattern) James Noble (RM pattern). (Design Pattern Automation) was not peer reviewed before being presented and published.  These final versions also incorporate comments and reviews from the attendees of KoalaPlop 2000 and 2001.\n","categories":"","description":"Peer review notes for my KoalaPlop Patterns","excerpt":"Peer review notes for my KoalaPlop Patterns","ref":"/patterns/appendix-koala-plop/","tags":["Design Patterns"],"title":"Appendix: My KoalaPlop Patterns"},{"body":"Hexmvc Adapters - Appendix Andy Bulka,\nMarch 2012\nBack to main HexMVC Pattern.\nAdapter Design Patterns In HexMvc the adapter implementing interfaces is everywhere. What pattern is this? Obviously Adapter Pattern is a leading candidate.\nTalking to Interfaces vs Adapter Pattern You could just call it the talking to Interfaces pattern. As GOF says in its introduction, one of the main two OO principles is “Program to an interface, not an implementation” (Gang of Four 1995:18). This allows clients to be decoupled from the implementation.\nThe swappability of implementation we gain in ‘talking to interfaces’ is not enough for HexMvc purposes. Adapters give us more flexibility e.g. the Adaptee need not know about our HexMvc architecture and can remain dumb. This is critical. The Adaptee (e.g. a model, a gui form, a utility class) shouldn’t need to change in order to participate in HexMvc.\nLet’s take a step back…\nBoth the talking to an interface pattern and the adapter pattern have some aspects of strategy. With strategy pattern, the client talks to a ‘context’ class which uses different strategy objects to delegate the work to.\nTalking to an interface is a type of strategy pattern viz. the ‘context’ that the client talks to is the interface abstraction and the strategy is the choice of implementation. With adapter pattern, the ‘context’ that the client talks to is the adapter class (which may or may not implement an interface abstraction) and the strategy is some concrete code the adapter refers to (either by delegation or by inheritance).\nThere are differences in when the strategy gets swapped in. With classic strategy you can swap strategies at runtime, whilst talking to the same context object all the time. With talking to an interface pattern you swap ‘interface implementation’ strategies at compile time only. With a family of adapters pattern, this too is typically compile time only - you choose one adapter or another for your client code to talk to. Of course in dynamic languages there is a little bit more flexibility - but that’s the gist of the intents involved with these patterns.\nThe adapter pattern allows for some absorbtion/level of indirection between the client code and the implementation code - whereas the talking to interfaces pattern does not. The adapter pattern, classically, allows us to adapt the implementation into a more useful interface that the client sees. This may turn out to mean a larger or smaller number of methods than the underlying implementation - depending on the situation. Furthermore, it allows for added value in the adapter, for example a higher level function in the adapter that loops and repeatedly calls a lower level function in the implementation.\nSure you could add this high level functionality into the implementation directly and not bother with the adapter pattern, sticking with the talking to an interface pattern. You may not need the\n‘absorbtion/level of indirection’ between the client code and the implementation. Often it turns out that this absorbtion/level of indirection is critical, because often we don’t want to touch our implementation code. In the case of GUIs the view code is often generated by a third party tool, thus cannot be altered anyway, so the adapter gives us a place for adding our own view logic. Also the view adapter is a great place to translate from GUI events to application eventing. In the case of Models, the adapter code is a great place to add application eventing/broadcasting without contaminating the models with this stuff. In Services, the adapter is running in the same thread as the application whereas the server services thread is catering for incoming requests.\nArguably the adding of eventing is really more of a proxy pattern, as we are not so much changing an interface but adding a transparent layer of eventing around it. We might even be said to be decorating it. Then as we find ourselves adding further functionality to our adapter, we could say our adapters are in fact mediating not just adapting - PureMvc argues this. There is a valid point here e.g. my model oo adapter coordinates the underlying model and persistence objects. And the view adapter will often coordinate and update several gui controls in response to a update application event. Then as our adapters take on even more functionality, they perhaps become less adapters or mediators and become fully fledged classes doing heavy work. But pushing back on the argument a little from the other direction - just because a class becomes complex doesn’t mean it loses its ‘nature’ and role in terms of design patterns. You can have simple or complex mediators. You can have a class that performs the role of a mediator whilst at the same time performing other roles - multiple roles per class is perfectly ok. Similarly, you could argue that a thick adapter is still an adapter, and that an adapter that mediates is still an adapter - as long as the essential role of adaptation is is being performed somewhere.\nThe adapter pattern may be at first glance only for thin adaptation of one api for another. But when you get into the idea of a family of adapters implementing a common interface, then you are starting to get into ‘Bridge Pattern’ territory where adapters become more like ‘drivers’. When you swap out an implementation you swap out its driver as well. Then you swap in a new driver that supports some other implementation - and the rest of the system is none the wiser. This use of adapter fits perfectly with the use of adapter in HexMvc.\nThe adapter is the place where you implement the promised functionality of the adapter interface - only you do it in different ways depending on the implementation. Try doing that with a mere ‘talking to interfaces’ pattern - you would have to actually get into your implementation code and add the promised methods to it - a big ask. You may not have access to the adaptee implementation source code, or you may not want to change it. On the other hand with an adapter absorbing these differences, you are saved. E.g. my model adapter actually hides model specific operations that are done in different ways e.g. FindThings() lives in the model adapter and is implemented totally differently in the OO model adapter implementation vs. the SQL model adapter implementation (which utilises a fast sql query).\nAdapter Pattern sequence diagram Here is the Adapter Pattern sequence diagram:\n You must use a different adapter whenever you have a different implementation behind it. What stays the same is the rest of the app which simply expects the interface of the adapter to be there.\n Adapter Design Pattern There are two classic implementations of adapter – inheritance vs. delegation. Adapt by\n Class Adapter - inheriting or Object Adapter - composition/wrapping more common  typically the latter is used. This is all explained in the GOF design pattern book.\nObject Adapter vs. Class Adapter  Object Adapter adapts through delegation. Class Adapter adapts through subclassing. Sometimes known as the delegation flavour and the inheritance flavor. Class Adapter: Why inherit – well, target may have attributes and other methods that we still want to use. Thus in the new adapter class we get to use, the old methods are still available (both a benefit and a liability).  Though… class adaption may not work if you are not able to inherit from the old class (e.g. the adapter already iherits from something). Typically the new adapter class inherits from the old class (the one you are adapting) and implements the new adapter interface. Class Adapter lets you update to a smarter API without existing client code knowing (since the old methods are still there). Object Adapter: Wrapper. Gets its work done by forwarding requests to the helper/adaptee. Delegation.  A ‘family of adapters’ - Strategy Pattern Having a an adapter implement an interface is not necessary for the adapter pattern - though it is common (known as the ‘Target’).\nYou can go further and have a family of adapters implementing an interface:\nUsing a family of adapters - each concrete adapter adapts a specific class. Client talks to the Adapter interface.\nWhen you do have a family of adapters implementing an interface, you get the potential ability to swap out adapter implementations. Thus we end up with something that has an aspect of strategy pattern here. The adapter can act as a strategy.\nJust take several classes implementing the same functionality, write adapters for them, and ensure that the adapters are implementing the same interface.\nWe can then replace the adapters objects at run time because they implements the same interface. Client code talks to the concrete adapter through the Adapter Interface (or Adapter Base class) and thus is insulated from change – you can swap in different implementations without the client code knowing.\nRelated Patterns The family of adapters strategy pattern is not a creational pattern like the Factory Method design pattern, although the creation of the objects might be done using factory design pattern - nor is it Abstract Factory design pattern. Its more of a behavioural or structural pattern. Strategy is behavioural.\nThere are some similarities to the Bridge design pattern (structural) which is traditionally used for hooking up different ‘drivers’ to a system. In fact each ‘driver instance’ is an implementation of the Adapter pattern - so that fits. But HexMvc doesn’t have Bridge’s abstraction of the l.h.s. client side of things (which allows for both the client and services to vary independently) - so perhaps we are using a half-bridge, or “Bridge Essentials” pattern.\nThick Adapters But then these are not always simple adapters - they can be complex implementations of an interface. How thin does an adapter have to be to be called an adapter? Probably my model and view adapters are too complex to be called mere adapters. The smaller utility adapters are proper adapters. The larger adapters are doing a lot more work, and are therefore not mere adapters.\nBut I’ll continue to use the word adapters.\nPureMvc calls them proxys and mediators Note that PureMvc shares a love of adapters, except it calls adapters by many different names. In PureMvc the model is wrapped by a proxy, the gui is wrapped by a mediator. In HexMvc I drop these distinctions and name them all adapters. We may lose some nuanced meanings (which people debate anyway - is a view mediator really a mediator and is it any different to the role done by a model proxy - is that really a proxy too?) Its simpler and more orthogonal to just make everything an adapter. Yes, adapters shouldn’t do too much work and should only adapt - so in some cases mediation would be a better word etc. But hey, its worth it to get the symmetry.\nFurther Adapter Discussion Types of Adapters in HexMvc\n Major Adapters - these are Adapters for ring objects - real deep functionality e.g. two different servers or two different guis Minor Adapters - which wrap slightly different class libraries - insulating the app from the cold hard implementation world. Mock adapters - can be anywhere - even mocking a major GUI adapter is possible.  Common functionality in Adapter Base classes If you find that different adapters are doing the same thing, Adapter Base classes can reduce duplication. The Adapter Base class can house common implementation or virtual methods that need to be overridden by concrete adapters.\nCommon functionality in the controller Another, possibly even more important place for common functionality is in the controller. For example in my sample implementation of server addapters - they don’t share a base class. Instead the controller houses deep, commong functionality like getting model info into a suitable structure for the server adpaters. The server adapters also use utility functions for converting to json or xml etc.\nSmaller Adapters not plugged into the hub Worlds within worlds, moons…\nOnly the main adapters are attached directly to the central app hub - otherwise there are localised injections of adapters directly where they are needed.\nThus you sort of replicate an adapter ring around sattelite adapters, as needed. It perhaps doesn’t have the same semantics as the overall architecture, but there is some degree of similarity in that the core talks to interfaces, and those interfaces are implemented by adapters, which can be swapped in and out.\nAs you can see in the gui adapters (as well as in the server case, and also in the persistence case) - there are smaller adapters throughout HexMvc which are not plugged into the central hub. Examples are random functionality, json conversion, xml conversion, persistence functionality etc. These are all injected as needed into the subsystem that needs it.\nBack to main HexMVC Pattern.\n","categories":"","description":"","excerpt":"Hexmvc Adapters - Appendix Andy Bulka,\nMarch 2012\nBack to main HexMVC …","ref":"/patterns/hexmvc-adapters/","tags":"","title":""},{"body":"Appendix - Hexmvc Events Andy Bulka,\nMarch 2012\nBack to main HexMVC Pattern.\nOn Eventing Eventing is up to you to implement any way you like. You need to be able to broadcast ‘events’ which cause methods to be run on an arbitrary number of observers. The broadcaster is ignorant of the exact identity of the observers. Its the observer pattern.\nA lightweight synchronous, eventing system I recommend a lightweight synchronous, eventing system / observer pattern that is based on method calling on objects. It\n does not require event objects does not require registrations of interest does not have complex if then else statements figuring out what to do does not need classes to implement subject or observer functionaltiy  All you need is a multicast object type, which holds an array of interested listener objects. When you call a method on that object, the method is called on all interested listener objects. The method name you are calling is deemed to be the ‘event’.\nIn the following example, observers is a variable of type ‘multicast’.\ne.g.\nobservers += obj1 observers += obj2 observers.NOTIFY() The call to observers.NOTIFY() will cause\nobj1.NOTIFY() obj2.NOTIFY() I am assuming a dynamic language like python or ruby here. Conceptually, the observer being called must adhere to some expected interface, so that the method/event being called actually exists! In a dynamic language you don’t need an interface - it can be a convention - ‘duck typing’.\nDependency Injection - one to one, one to many One insight at this point might be that wiring up one-to-one pointers and wiring up one-to-many pointers/observers in this way are just variations of the same thing.\nWhen you wire up your objects to point to each other you are doing dependency injection - as long as the objects are not instantiating instances of the objects they are pointing to themselves, and the injection is done from ‘outside’. The objects being injected are thus depending on an abstraction or interface - which is injected later.\nSimilarly, when you wire up the observers of an object, by adding them repeatedly using += to a list in a multicast variable, you are also doing dependency injection, except with a multicast flavour.\nIts all just wiring. Its just that some wires are one-to-one and others are one-to-many.\nEventing is just method calling Eventing becomes just method calling on multiple objects\nThis leads to another insight. Eventing is just method calling. Objective C I think sees the world in this way. And Ruby. Possibly this is obvious to some people and some languages, but when you do eventing this sort of lightweight multicast technique, it becomes much more obvious.\nWhether a method call on an object results in one method call or many method calls is irrelevant. You could say that calling a method on an object is the same thing as a single event call.\nobserver = obj1 observer.DoSomething()  vs\nobservers += obj1 observers.DoSomething()  If you adopt an meaningful name and perhaps an uppercase naming convention on method names which are being called in an event style, then it becomes even more obvious e.g.\nobservers.NOTIFY_SOMETHING()  When a method is in uppercase, it looks more like an event, to me. So that’s why I do it. When I see a method in upper case I know that it is being called as part of an observer eventing pattern call. In other words calling methods in this way, this IS the way you broadcast events.\nIt nice that eventing and method calling become the same thing because you don’t have to learn anything new. You can pass information in parameters just as you would with a method call.\nIts all just method invocation, which is all just eventing - and vice versa - in a sense. As long as its all hooked up using the principles of dependency injection, which insists on depending only on abstractions/interfaces. Its a neat symmetry that lightweight eventing, dependency injection and adapters satisfying interfaces all work together within the HexMvc framework. The high level architectural concepts and the low level implementation idioms are similar, forming a powerful, cohesive, interrelated yet simple architecture.\nAdvanced Footnotes on Eventing Eventing vs. Method Calling In the end, whether an event object is being created and passed to an eventing framework - or whether a piece of code has the knowledge to call a particular method - its all ‘knowledge’ and thus a ‘dependency’. Knowing what sort of event to raise or register is no less coupled than simply knowing what method to call. This argument assumes that you have sufficiently decoupled things by using interfaces and abstractions. For example, some degree of decoupling occurs when you call methods via eventing, since the caller/raiser doesn’t know what particular objects are ultimately being called. The same level of loose coupling can also be achieved with ‘mere’ method calls, as long as the object whose method you are calling has been abstractly injected, so that the caller has no idea who is implementing that interface.\nThe benefit of a multicast method calling approach over an eventing approach is that it is simpler and avoids too much syntax, declaration, duplication and registration etc. If you already have a nice eventing system and are happy with it, then by all means use it.\nFunctions instead of objects A single or multicast notification approach can be done with references to functions (as opposed to references to objects). You can have a single reference to a function or a reference to an array of functions.\nWhilst lists of functions are usable in some situations, I haven’t really thought about eventing in HexMvc using functions only - because it seems to me that functions only give you one shot at calling a method, whilst having a list of objects that implement an interface, gives you an unlimited set of methods you can call on those objects.\nThis sort of eventing will probably work ok in C# and other .net languages too, using delegates - though there will be the usual type declaration dance needed. And note that I am assuming the multicast object points to a list of objects, not functions - not sure if this is possible in .net delegates?\nSynchronous vs Asynchronous A synchronous call from view to controller to model, and an immediate calling chain back again in order to construct an immediate response object - this is web mvc. A partial downside of this approach is that the model doesn’t get a chance to broadcast updates to other sub-systems of the app. If we allow the opportunity for the model to broadcast a message, then other sub-systems like GUI views (not web view related) can update with information. In other words, a controller setting info on a model silently is a bit limiting - a controller that sets info on a model via a model adapter will trigger other update notifications, which can be a good thing.\nAll based on synchronous calls - even if it looks like eventing. Not addressing asynchronous, except in the limited context of server threading.\nObserver based Eventing A bit of history on Observer based Eventing\nThis is a bit of a tangent, and may form part of another talk.\nRegular observer pattern With the regular observer pattern, you have a ‘subject’ object which contains a list of observer objects. The subject then loops and calls a particular method on all these observer objects when a notification is required. That’s the basic idea. You can pass paramters in the notification call, incl. strings to tell the observers of different actions to take. Optionally add some type safety if you like, to ensure both observer and and ensure both observers follow some interface (to ensure the observers have a OnNotify() method and to ensure subjects have an AddObserver(o) method etc. Optionally even add some functionality in a subject base class so that your looping NotifyAll() method only has to be implemented once.\nImplementations Java Java’s ActionListener with their ActionPerformed methods is essentially the Observer pattern, built into the language/libraries. It might be a bit cumbersome for normal usage in your app - being very GUI widget centric, but the essential point I want to make is that observers are lists of objects not functions.\n.NET C# and .NET introduced the idea of observer pattern broadcasting using multicast delegates, which are lists of typed functions. A benefit of this approach is that it doesn’t matter what the observer’s class is or what interface an observer implements - all that matters is that the functions which are added to a subject’s observers list follow the same method signature. The list of oservers is a multicast delegate object, also pretty much the same thing as an event. Thus observers hook into some subject’s event in this way.\nA possbile downside (or upside, depending on your point of view) of moving from lists of objects to lists of functions is that if there are 10 events you need 10 events on the subject, and 10 functions on each observer. With the regular observer pattern, you need only have one subscription by an observer, then the observer has to figure out what out of the 10 things happened, usually by a string passed as a parameter e.g. observer.Notify(what) and then an if-then-else statement to perform the relevant code.\nBirger’s thoughts on ‘multicast’ in .NET I sent an email to my colleague Birger who is an expert in .NET\nHi Birger,\nI’m wondering if I could ask you a .NET question that would add some colour to my talk next week. I’ll be talking about observer pattern and possibly mentioning using .NET events / multicast delegates. Is there something in .NET that allows for lists of OBJECTS (not functions) to be += to some sort of delegate object so that I can invoke a variety of different functions on that list of objects?\nIm looking for something built into .NET that would work like my python example below where ‘observers’ is a variable of type ‘multicast’ and holds a list of OBJECTS.\ne.g.\nobservers += obj1 observers += obj2 observers.NOTIFY() The call to observers.NOTIFY() will cause\nobj1.NOTIFY() obj2.NOTIFY() Thanks for any thoughts,\nCheers,\nAndy\nBirger’s response Hi Andy,\nThere’s nothing like you describe built-in that I can think of. The preferred way is to use delegates, at least in UI code. However, I can think of three or four things you may want to consider…\n  There’s nothing preventing you from implementing the observer pattern the way it would be done in Java. (e.g. adding an object implementing the ActionListener interface to a button: http://docs.oracle.com/javase/tutorial/uiswing/events/actionlistener.html\n  Unlike Java, C# supports operator overloading. You can’t explicitly overload the += operator but you could overload the + operator where your Subject is on the left hand side, your Observer is on the right hand side and the return value is the same type as your Subject. Then effectively+= would do what you want. C# won’t allow your Subject to be an interface because operators are essentially static methods and interfaces don’t allow you to define method implementation (and Microsoft have decided against supporting this via extension methods). Your Subject would have to be an abstract or concrete class.\n  Since .NET 4.0 Microsoft has included generic IObserver and IObservable interfaces.\nThe IObservable interface has a Subscribe method which does what I think you want the += to do. There is no Unsubscribe method. Instead the Subscribe method returns an IDisposable object which when disposed (by calling Dispose) should unsubscribe the Observer. The IObserver has three methods: OnNext, OnError and OnCompleted. OnNext is the standard notification method, OnError is to notify the observer of exceptions and OnCompleted would be the last event (e.g. when the Observable has finished iterating through a collection, reached the end of a file or the UI object generating the events has been disposed).\n (http://msdn.microsoft.com/en-us/library/dd990377(v=vs.103).aspx and http://msdn.microsoft.com/en-us/library/dd783449.aspx).    WPF has something called ObservableCollections. I don’t know much about WPF but this would be more of a library feature than a language feature and it would be tied to WPF UIs.\n  Hope my thoughts can help with your presentation.\nCheers,\nBirger\nPython Multicast I contend that the python multicast class is another even better way to do eventing.\nThis multicast object technique is not a feature of python but can be done in any dynamic language e.g. Ruby.\nIn the following example, observers is a variable of type ‘multicast’.\ne.g.\nobservers += obj1 observers += obj2 observers.NOTIFY() The call to observers.NOTIFY() will cause\nobj1.NOTIFY() obj2.NOTIFY() In this implementation the subject has a list of objects - so its more a traditional observer pattern implemnentation. What makes it unique is that the looping/broadcasting code is built into the multicast object, so there is no need to worry about subject base classes or subject interfaces. All you do is create a multicast object as a variable/property of your class and you are good to go.\nThe other benefit of this implementation is that observers simply add themselves to the multicast object and the calls into the observer happen as normal method calls. If you call observers.FRED() then all observers which have a method FRED() will have that method called. You can have any number of method calls, and this doesn’t have to be agreed upon in advance with interfaces etc - though you could add that layer of type safety if you really insisited.\nAlso the method calls can take parameters. Eventing just becomes method calling - same technology, same techniques - nothing new to learn. If your observer doesn’t declare a particular method then it will be silently skipped (depending on the nuances of your implementation, you could change this default behaviour).\nThe big picture Notice that when we have a normal reference to an object e.g. self.other = o1 you perform a method call on that other object with the usual self.other.Blah().\nNotice that in our multicast situation, you have a reference to a number of objects e.g. self.observers += o1; self.observers += o2; you perform a method call / event broadcast on those other objects with self.observers.Blah().\nIts the same thing. Singular or plural. Method calling and eventing. It all collapses into the same thing.\nWhat this means is that\n method calls are just events normal method calls are just one-to-one eventing multicast method calls are one-to-many eventing  Ruby implementation The python implementation looks like:\nhttp://code.activestate.com/recipes/52289-multicasting-on-objects/\nthe core of which is:\ndef __call__(self, *args, **kwargs): Invoke method attributes and return results through another multicast\nreturn self.__class__( [ (alias, obj(*args, **kwargs) )  for alias, obj in self.items() if callable(obj) ] ) A ruby implementation might be http://codepad.org/6tgNK8Fz\nI haven’t addressed the multicast attribute access yet. And I haven’t addressed the return values issue, though I don’t see how a multicast can return values - unless some sort of list of return values is constructed and returned.\n# Beginnings of a 'Multicast' class to multiplex messages/attribute requests  # to objects which share the same interface.   class Fred def hi puts \"hi from Fred\" end def count n  n.times { |i| puts i } end end class Mary def hi puts \"hi from Mary\" end def count n  n.times { |i| puts i+100 } end end   class MulticastObjects def initialize  @objects = \\[\\] end def add(o)  @objects \u003c\u003c o end def method\\_missing(meth, \\*args, \u0026block)  @objects.each do |o|  o.send meth, \\*args, \u0026block end end endobservers = MulticastObjects.new observers.add(Fred.new) observers.add(Mary.new)  observers.hi observers.count 5  puts \"done\" output\nhi from Fred hi from Mary 0 1 2 3 4 100 101 102 103 104 done  Back to main HexMVC Pattern.\n","categories":"","description":"","excerpt":"Appendix - Hexmvc Events Andy Bulka,\nMarch 2012\nBack to main HexMVC …","ref":"/patterns/hexmvc-eventing/","tags":"","title":""},{"body":"Scraps Renamings of pureMvc terms to “Adapter”  PureMvc uses the term one or more “mediators” in front of gui plumbing - all sitting behind the term “View” PureMvc uses the term one or more “proxies” in front of model plumbing - all sitting behind the term “Model” PureMvc talks about many “commands” objects which all sit behind the term “Controller” The Application “facade” is the centre.  The problem with these terms are that is debatable that these things are really proxies and mediators etc. I rename them Adapters.\nThe other problem in puremvc is that additional plug in parts of the architecture (which is not catered for anyway) need pattern names too, so by using the generic name Adapter we can have infinite numbers of Adapters composing a system.\nPlus Adapters are more conducive to the idea of interfaces. Adapters offer the same interface, whilst the behind the scenes implementation changes - this is the very essence of what an Adapter is. And its the very essence of what an interface is, and thus the injecting of adapters that conform to some interface is a good thing to do. You can further break controller functionality into command objects if you wish.\n ModelSqlAdapter\n |\n | SQLObject\n | .\n | /_\\\n v |  ModelSql\nsingle vs. multicast - a neat symmetry Multicasting via object delegates, single, multiple. Ocassionally use direct function injections too (which can be single or multicast too).\nThree different types of multicast injection\n Inject a single object to a var (destination expects an interface to be adhered to, doesn’t care about the object) Inject append to a multicast var (destination expects an interface to be adhered to, doesn’t care about the object). Calls on the object’s method are the same as if it was a single object. The multicasting is hidden. But same philosophy. Thus we dispense with eventing and anything complex. Its all just function calls on objects, where the object is anything that satisfies an interface/convention. Inject just a function - not an object (e.g. see my random function).   Sometimes, instead of a ring object calling a method on a delegate attribute (which is either a single object, multicast object or a function itself) you might just have the ring object call a method on a another object - where you know the nature of the other object. E.g. server calling an app method. But even this is just calling a single object method that has been injected. Its just that it looks like app.CmdBlah rather than observers.CMD_BLAH in other words it amounts to the same thing.\n-–\nAn event is a message sent by an object to signal the occurrence of an action. The action could be caused by user interaction, such as a mouse click, or it could be triggered by some other program logic. The object that raises the event is called the event sender. The object that captures the event and responds to it is called the event receiver.\nIn event communication, the event sender class does not know which object or method will receive (handle) the events it raises. What is needed is an intermediary (or pointer-like mechanism) between the source and the receiver. The .NET Framework defines a special type (Delegate) that provides the functionality of a function pointer.\nA delegate is a class that can hold a reference to a method. Unlike other classes, a delegate class has a signature, and it can hold references only to methods that match its signature. A delegate is thus equivalent to a type-safe function pointer or a callback. While delegates have other uses, the discussion here focuses on the event handling functionality of delegates. A delegate declaration is sufficient to define a delegate class. The declaration supplies the signature of the delegate, and the common language runtime provides the implementation. The following example shows an event delegate declaration.\n# http://www.scribd.com/doc/53516831/22/Observer\nDefine a one-to-many dependency between objects so that when oneobject changes state, all its dependents are notified and updated automatically.\nThe .NET optimized code demonstrates the same code as above but uses moremodern, built-in .NET features. This example uses .NET multicast delegates which arean implementation of the Observer pattern. Delegates are type safe function pointers that have the ability to call a method. Multicast delegates are comprised of multiple methods that are called serially in the order in which they were added using the C# +=operator.\nThe Observer design pattern is one of two Gang-of-Four design patterns (the other is theIterator pattern) that have found their way, not only into the .NET Framework libraries,but also in the .NET languages themselves. When programming an ASP.NET or aWindows application you are most likely working with events and event handlers.Events and Delegates, which are first class language features, act as the subject andobservers respectively as defined in the Observer pattern.\nThe Observer pattern emphasizes good object-oriented programming in that it promotes loose coupling. Observers register and unregister themselves with subjects that maintain a list of interested observers. The subject does not depend on any particular observer, as long as the delegates are of the correct type for the event. The event and delegate paradigm in .NET represents an elegant and powerful implementation of the Observer design pattern.\n# http://en.wikipedia.org/wiki/Delegation_(programming)\nIn object-oriented programming, a multicast delegate is a delegate that points to several methods.[2][3] Multicast delegation is a mechanism that provides functionality to execute more than one method. There is a list of delegates maintained internally, and when the multicast delegate is invoked, the list of delegates is executed.\n# http://stackoverflow.com/questions/5583623/delegates-vs-observer-patterns\nOne advantage of the observer pattern is that if you have a large number even events that are generally always subscribed to by an interested party, then passing a single object into a method to subscribe to the events is much easier than subscribing to each event individually. With C#’s lack of specifying interfaces and methods for anonymous classes as can be done with Java, implementing the observer pattern becomes a bit more laborious so most opt for using events anyway.\nAnother benefit of the traditional observer pattern is that it handles better in cases where you need to interrogate the subscriber for some reason. I’ve come across this need with objects that pass a web-service boundary where there are problems with delegates whereas the observer pattern is just simply a reference to another object so it works fine as long as your serialization keeps integrity of references within the object graph like the NetDataContractSerializer does. In these cases it’s possible to discriminate between subscribers that should be removed before making the service boundary based on whether the referenced subscriber is also within the same object graph.\n-———————-\nGUI event going to model and back again.\nhttps://docs.google.com/file/d/0B4pSq5nm19n4VEVaZm1YRTlRMW0yVDBEbWJyM2R1UQ/edit\n-—-\nThe roles Its often useful to look at the roles/responsibilities that various classes and layers take on in a design. HexMvc takes an ‘opinion’ on who does what - its not necessarily truth, its just a particular opinion. Furthermore, by looking at roles, it helps us get concrete about what each class/word means. Being a ‘controller’ means different things to different people. And depending on what decade’s technology you are using, ‘view’ can mean different things too - e.g. low level drawing code in the 60’s or perhaps windows forms filled with smart widget controls of the 90’s all the way to the modern browsers of the 2000’s.\n-–\nActually ‘implementations of an interface’ are everywhere - not necessarily always an adapter. There is something that is wrapped or delegated to, so there is a strong sense of adapter though.\n-–\nOne insight at this point might be that wiring up one-to-one pointers and wiring up one-to-many pointers/observers in this way are just variations of the same thing.\nSimilarly, when you wire up the observers of an object, by adding them repeatedly using += to a list in a multicast variable, you are also doing dependency injection, except with a multicast flavour.\nIts all just wiring. Its just that some wires are one-to-one and others are one-to-many.\n-–\nand reeven Cannot use Model Adapter notifications for rendering server views because the same server method that received the request must prepare response.\nWith a server situation, you can use events as long as they are implemented synchronously.\nAfter you dispatch the event you are blocked till the return stack of function calls exhausts itself, then you continue and reply with the response object.\nyou don’t want model layer really knowing about the layer above. model typically broadcasts very abstract notifications. and you don’t want lower later talking upwards.\nits ok for gui adapter to know about the app/controller and use a very specific notification/function call because its a higher layer talking downwards. Plus you have no choice, the controller must call functionality deeper down - whether that its raising an event or making a function call.\n-—–\nIronic that even though HexMvc ‘flattens’ out our layering and makes its a ring, we still don’t want models knowing about the app. Ok for gui’s to know about the app though. So there’s an asymmetry in our symmetry!\n-——–\nMy wx pure minimalist gui adapter is an example of a wrapping (compositional) adapter.\nMy wx architecture 3 gui adapter is an example of an inheritance based adapter.\n-—\nThe Application is only really talking to and presuming that something implements an interface - e.g. a gui layer interface, which is supplied by one adapter or another, and implemented in whatever way each particular adapter sees fit (e.g. one gui framework or another).\n--\n","categories":"","description":"","excerpt":"Scraps Renamings of pureMvc terms to “Adapter”  PureMvc uses the term …","ref":"/patterns/hexmvc-scraps/","tags":"","title":""},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background-cabin_hu711514a202e4ee80bf848c5946e20294_385912_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background-cabin_hu711514a202e4ee80bf848c5946e20294_385912_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About Andy Bulka Software Developer, Musical Composer, Tai Chi Teacher, Photographer, Philosopher         Andy Bulka is a Python and Full Stack Web Javascript Developer at Wware Consulting in Melbourne, Australia.\n👉 See Wware Consulting and Contracting offerings.\nBrief Resume Prior to this he was a developer at Nexus 6 and Telstra - building Django websites and building Python teams.\nPrior to this he was Director of Software Development at Magian Design Studio - overseeing the architecture and design quality of Magian software systems. Before joining Magian, Andy spent several years as chief software architect at Austhink Software, responsible for delivering world class \"visual thinking\" diagramming software for both the educational and professional markets.\nHe has over 25 years of hands on software development and architectural experience, specializing in highly visual and interactive desktop applications, web 2.0 sites, games, and multimedia software. He now works with Python and Javascript technologies.\nHe runs an ocassional \"Design Patterns\" and Object Oriented design workshop around Australia and is the author of several academic papers on design patterns. Andy is a regular speaker at user groups around Melbourne, Australia and has a blog https://abulka.github.io/ (www.andypatterns.com).\nSee also the Melbourne Patterns Group website.\n Other Interests 👉 See also my Tai Chi website.\n👉 See also my Photography website.\n👉 See also my Musical Compositions website.\n👉 See also my Philosophy website.\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/about/","tags":"","title":"About Andy Bulka"},{"body":"Blog Posts - Date Order Listing This list is auto generated, in date order.\nOr just use the menu on the left to navigate to a blog post.\n{{ .Content }}  added to themes/docsy/layouts/blog/list.html --","categories":"","description":"","excerpt":"Blog Posts - Date Order Listing This list is auto generated, in date …","ref":"/blog/","tags":"","title":"Andy's Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/flask/","tags":"","title":"Flask"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background-staircase_hu711514a202e4ee80bf848c5946e20294_458706_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background-staircase_hu711514a202e4ee80bf848c5946e20294_458706_1920x1080_fill_q75_catmullrom_top.jpg); } }  Andy Bulka's Software Blog \u0026 Projects Blog   Projects   Try GitUML   Download Pynsource  Andy Bulka is a software developer in Melbourne, Australia\n         Introduction  -- This website holds Andy Bulka's blog on software development.\n      UML Diagramming The open source UML diagramming tool for Python code. Visit the Pynsource website for more information.\nAlso check out GitUML for a more advanced UML diagramming tool which works with most programming languages.\n    My GitHub Repositories  Read more …\n   Follow me on Twitter! For announcement of latest features etc.\n Read more …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"Home"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/jupyter/","tags":"","title":"Jupyter"},{"body":"These are Design Patterns that I have either discovered and documented or which I have invented.\nThe four patterns MGM, RM, TI and Pattern Automation have been peer reviewed and published in the proceedings of KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs).\n","categories":"","description":"","excerpt":"These are Design Patterns that I have either discovered and documented …","ref":"/patterns/","tags":"","title":"Andy Bulka's Design Patterns"},{"body":"My various projects and apps.\nPynsource is probably my most popular app which runs on all desktop platforms. Gituml is my most ambitious website - you can create a free account there and play around.\nMy favourite big idea is Literate Code Mapping which is about creating UML-like diagrams which help programmers understand the structure and behaviour of source code.\n","categories":"","description":"","excerpt":"My various projects and apps.\nPynsource is probably my most popular …","ref":"/projects/","tags":"","title":"Projects"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/vscode/","tags":"","title":"Vscode"}]