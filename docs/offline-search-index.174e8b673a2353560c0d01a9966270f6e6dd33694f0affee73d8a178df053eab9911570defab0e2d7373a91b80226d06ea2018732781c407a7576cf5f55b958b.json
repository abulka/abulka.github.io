[{"body":"Introduction Andy’s Published Design Patterns These four papers are substantial works which have been presented at KoalaPlop (Asian Pacific Conference on Pattern Languages of Programs) in both 2000 and 2001. My shepherds (paper peer reviewers) were:\n Jim Coplien (MGM pattern) Ali Arsanjani (TI pattern) James Noble (RM pattern). (Design Pattern Automation) was not peer reviewed before being presented and published.  These final versions also incorporate comments and reviews from the attendees of KoalaPlop 2000 and 2001.\n","excerpt":"Introduction Andy’s Published Design Patterns These four papers are …","ref":"/projects/patterns/","title":"Design Patterns"},{"body":"Apps and Websites released this year - 2019 GitUML UML visualisation for Git repositories (website app).\nUnderstand code quickly: Automatically generate UML class diagrams from source code residing in git repositories. Diagrams automatically update when you push code using git.\nVisit GitUML now, create a free account and begin creating UML diagrams and documentation.\nPynsource UML tool for Python (Desktop App for Mac, Window, Linux) - brand new version. Zoom in and out. PlantUML view. Auto Layout. Import Python 3 code.\nVersion 1.71 - new for 2019\nVisit the brand new dedicated website pynsource.com.\nBuy the Pro Edition for $20 to unlock the zoom feature. Community Edition is fully functional and open source - check out the github repository. Donate to support this project (donate link coming soon).\nMy Apps and Websites - 2018 Print42 Print42 is a log tailing GUI program which optionally echoes log lines to thermal printer tape. Its like a modern thermal printer version of a ticker tape for tailing log files. It features display font size options, search and filtering. You can also annotate the output with text fragments that you type in - or screenshots that you paste in.\nThe video is 13 minutes long and covers the basic use cases, history of the project etc.\nAs well as physically printing from Free42, the Print42 software can also be used to print HP Prime screenshots (from either the emulator or real HP Prime hardware via the HP connectivity kit).\nOutside the world of calculators, Print42 can be used to ‘tail’ log files (programmers take note) and to print graphic snippets from the web. Useful if you want to rapidly print information to stuff into your pocket or to study and annotate printouts of complex information, at your desk.\nIf you are looking for a useful, fun new gadget, you might want to consider buying an Epson thermal printer and trying Print42. However you can also use Print42 with your regular desktop printer, for free.\nThe website for downloads and further information is www.print42.atug.com\nPython to RPN I am pleased to announce the Python to HP42S RPN converter website is online.\nwww.pyrpn.atug.com You write code in a high level structured language (which happens to be Python 3 syntax), hit a button and RPN is generated. You then paste the RPN into Free42 or transfer it to your DM42 (by creating a raw) - and it runs.\n Examples: http://www.pyrpn.atug.com/examples User Guide: http://www.pyrpn.atug.com/help Canvas for 42S Simulator: http://www.pyrpn.atug.com/canvas List of HP42S Commands Supported Reference: http://www.pyrpn.atug.com/cmds  The converter supports core Python syntax (which is very powerful), but does not implement the built in Python libraries that you would get in desktop Python. You have to rely on the ability to call HP42S commands from Python to do your work - which of course you can do. Specifically, it has the following capabilities:\n Variables Functions, Multiple functions, nested functions Parameter passing, receiving return values, multiple return values if elif else Comparison operators == != \u003e \u003c \u003e= \u003c= Booleans True, False and operators not or and for loops, range(), for..in iteration through lists and dictionary keys while loops, while…else continue and break operations in for loops and while loops Lists and Dictionaries (basic operations only). Matrices, Pythonic matrix element access syntax [row,col] NumPy compatible slicing syntax for sub-matrices Complex numbers using either 42S or Python native syntax Expressions involving nested brackets assert Testing and clearing of flags Access most HP42S commands as function calls e.g. FIX(2) Some enhanced functions to make life easier e.g. varmenu() automates and simplifies the generation of MVAR based code.  My Other Apps and Consulting Services If you would like me to run a design patterns course or consult on your next software design, please check out my product page. There is also an open source Python UML tool you might be interested in, plus references to products I have developed over the years esp. the worldclass argumentation visualisation software Rationale and bCisive.\nMy Medium Articles - 2018 - 2020 I’ve been publishing a lot on Medium recently. Why? Because the articles seems to get more widely read, and the Medium editor is so simple and produces beautifully formatted articles.\nBuilding a deployable Python-Electron App\nBuilding a normal, deployable application for Mac or Windows, using Python 3 is hard. There is nothing like Visual Studio or Delphi (remember that?) for Python where you can drag and drop to design a GUI, press a button and get an .exe or .app to give people. Sad. The closest you can get is to follow a long recipe of steps - which I outline here.\nAsync/await for wxPython\nPython 3 GUI apps with asynchronous functionality\nGetting Python and wxPython apps into the Ubuntu app store\nHave you ever dreamt of getting your own apps in the Ubuntu app store? Here’s how.\nDjango View logging is back-the-front\nHow the order of view request log messages in Django apps might be confusing, and how to fix it.\nTodoMVC implemented using traditional OO, Controllers and Events.\nTodoMVC implemented in a classic Object Oriented way - which includes running code you can run in your browser.\nTodoMVC implemented using a game architecture — ECS.\nBuilding traditional GUIs with the Entity Component System\nComing soon\nLiterate Code Maps\nComing soon: A Medium article - for now this is a GitHub page. I’ve invented a diagramming methodology called Literate Code Maps which improve upon some aspects of UML - actually they are quite different and arguably more useful than UML for understanding complex source code projects. I’ve been using this notation for many years, and it might help you in your projects.\nGitHub Projects A pair of extensions for Visual Studio Code Snippets Explorer Visual Studio Code extension which displays all available language snippets in a TreeView\nhttps://github.com/abulka/vscode-snippets-explorer\nSnippet Creator This extension helps to automate snippet creation. Select the code you want to create snippet from and use command Create Snippet from the command palette or your custom keybind.\nhttps://github.com/abulka/vscode-snippet-creator\nBrew Moments I’ve recently learned mobile app development using Flutter. Here is my first app.\nhttps://abulka.github.io/brew-moments/\n\nSidebar My Developer Story This stackoverflow timeline is like a resume - except its more fun and useful to look at.\n Story view Traditional view   Building a deployable Python-Electron App Here is my latest article, published on Medium, about how to use Electron as a GUI front end to Python 3. It gets over 1,000 reads a week for some reason, more than any of my other articles.\nTodoMVC implementation articles Here are my two recent articles implementing the classic Javascript TodoMVC app in various ways. These two articles shows you how to design apps. Its an alternative to using a modern javascript framework like Vue, Angular or React.\n Classic - OO, Controllers and Events ECS - using a game architecture  xx this is a test\nPynsource UML tool for Python source code - visit www.pynsource.com\nVersion 1.76 - released Apr 22, 2020\n- Zoom, zoom to fit\n- Python 3 compatibility\n- New accurate AST based python parser\n- Layout algorithm\n- Ascii UML view built into the GUI, including an innovative Ascii UML layout\n- PlantUML view for beautiful renderings of UML\n- Colour sibling nodes\n- Open Source\nPrint42 Print42 is a log tailing GUI program which optionally echoes log lines to thermal printer tape. Its like a modern thermal printer version of a ticker tape for tailing log files. It features display font size options, search and filtering. You can also annotate the output with text fragments that you type in - or screenshots that you paste in.\nPython to RPN converter Check out Python to RPN if you have an old vintage HP Calculator that you want to program in Python! Impossible? See also my blog post How I used the Python AST capabilities to build a Python to Rpn converter.\nHexMVC - Design Pattern HexMVC - A new, lightweight, architectural pattern for building applications based on the Hexagonal layered architecture pattern + MVC – presented by Andy Bulka. To be published 2019.\nDesign Patterns Training Elevate the effectiveness of your entire programming team - Andy can deliver his existing or a customised Design Patterns Course to your entire programming team - at your company’s premises. Check out the details.\n Summary after this point there will be a summary list of pages within the Projects\n","excerpt":"Apps and Websites released this year - 2019 GitUML UML visualisation …","ref":"/projects/misc/","title":"Misc"},{"body":"Introduction This article is twenty years old - its ideas are now simplified and clarified at MVCA pattern\nA live demo running in a browser.\nTip for understanding this article: This is arguably the traditional MVC pattern with terminology tweaked and clarified, and updated for ‘modern’ times where Views are no longer manually drawn but are instead off the shelf GUI widgets or DOM elements.\n Mediator == Controller GUI == View  The Pattern  Comments Comments now disabled due to spam.\nPosted on Jan 18th, 2009 Hi Andy,\nI’ve read your article about the MGM Patterns, it’s a great pattern.\nHowever, I have a question, could you please show me.\nLet say I have a Textbox (GUI), a business object with only 1 property Text,\na mediator-view as your pattern defined.\nWhen changing Business.Text, this procedure is called:\nprocedure setText(Value: String); begin FText := Value; NotifyChanges; // \\*\\*\\* notify mediator to change Editbox content end; therefore, mediator is notified:\nprocedure BusinessChanged; begin FGUI.Text := FBusiness.Text; // this makes Editbox OnChange fires end; OnChange event of Editbox:\nprocedure Edit1Change(); begin Mediator := FindMediator(Self) Mediator.Business.Text := TEdit(Self).Text; { \\*\\*\\* This line would call Business.setText and make an infinity loop } end; The only method I’ve thought of is let the Mediator modify FText field of\nBusiness object. But in this way, Busniess and Mediator have to be in a same\nunit. Is there another way to solve this problem?\nThanks for your sharing!\nKarr. C.\nPosted by Andy on Jan 18th, 2009 Thanks for your interest in the MGM pattern. Your assumption in the above code is that the Editbox OnChange fires when you programatically set the FGUI.Text, which would cause the event sequence\ngui changes -\u003e mgm notified -\u003e changes model -\u003e model notifies mgm -\u003e mgm modifies gui -\u003e gui changes and so on, infinitely!! See your lines marked *** highlighted lines above.\nHowever the Editbox OnChange fires only seems to fire when the text is altered by the user in the gui. It does not fire when the edit1.text is changed programatically. So there is no loop.\nI tried it in Delphi 6. Here is a sample delphi app that proves it.\nhttp://www.atug.com/downloads/mgmquickproof01.zip\nIt has a cheaper form of mgm which I just whipped up, in order to demonstrate the point.\nP.S. If the event HAD fired, you could\n  temporarily disable the event by rewiring the event handler to Nil before writing to it programatically, then restoring the event handler again (yuk, but possible. You often have to do this when using mgm with treeviews.)\n  provide a way of setting the model data which does not trigger a notification. Make the private data public. Again, yuk.\n  … anyway thankfully you don’t need to do either of these things since Editbox OnChange does not fire when the edit1.text is changed programatically\nHope this helps.\n-Andy Bulka\nPosted by Anon on Jan 21st, 2009 Here is a nice article on MVP pattern and the differences to MVC.\nResources Old link on andypatterns.com\n","excerpt":"Introduction This article is twenty years old - its ideas are now …","ref":"/projects/patterns/mgm-pattern/","title":"MGM Pattern"},{"body":"Introduction For the original MGM pattern see MGM pattern\nTodoMVC-OO The classic Javascript TodoMVC app implemented without a framework, using plain Object Oriented programming + a traditional MVC design pattern. Distinct, mediating Controller objects are the key to this implementation.\nRunning demo here.\n MVCA Architectural Pattern This project fully implements the TodoMVC specification. It is implemented without a framework, using plain Object Oriented programming + the MVCA architectural design pattern:\nWhilst the MVC (Model View Controller) pattern is commonly and glowingly referred to, implementations can vary widely. Most documentation on MVC, including the official wikipedia article is vague on definitions and details. This TodoMVC-OO project uses the MVCA pattern (formerly the MGM pattern) which is a clear and unambiguous interpretation of MVC, with the following key ideas:\n The View means a modern GUI framework, and therefore is usually already available to be used by the programmer. One or more Controllers mediate between the View and the rest of the Application, listening for GUI events. Nobody else knows about the View. The Model is traditional data, may contain some business logic, and may broadcast events when its attributes change. The Application owns the model(s), holds view state and contains some business logic methods. An Eventing system is needed, traditionally Observer pattern but the stronger decoupling and the proper event objects of the Publisher-Subscriber pattern is preferred.  Thus MVCA simply means “Model View Controller Application” - all four roles are necessary to any implementation.\n The above diagram was generated semi-automatically from Javascript source code residing in GitHub using GitUML. Click here for more diagram detail as a .svg and the ability to zoom.  View this actual diagram 181 on GitUML.  MVCA In Detail Let’s go through the four parts of the MVCA pattern, which is precisely adhered to by this TodoMVC-OO implementation. Actually there is a fifth important part - the eventing system - which glues it all together - let’s look at the Model first.\nModel The Model is traditional, may contain some business logic, and may broadcast events when its attributes change.\nBy traditional, I mean the Model does not know about anything else except perhaps other models. Its the core model of your data, the domain of the what the application is all about. In the case of the Todo application, it is a collection of Todo items, which can be marked completed.\nclass TodoItem { constructor(title, id, completed) { this._title = title == undefined ? \"\" : title; this._completed = completed == undefined ? false : completed; this.id = id == undefined ? util.uuid() : id; // no getter/setter needed  } get title() { return this._title; } set title(v) { this._title = v; this.dirty() } get completed() { return this._completed; } set completed(v) { this._completed = v; this.dirty() } get as_dict() { return { id: this.id, title: this.title, completed: this.completed } } delete() { notify_all(\"deleted todoitem\", this) } dirty() { notify_all(\"modified todoitem\", this, {during_load: false}) } } The Model is usually broken into many smaller interconnected models in an attempt to reflect the real world domain being implemented as software. The Model can be implemented as mere objects in memory or a full-fledged database model, or a ORM mapping between the two. In our case, we have a pure memory model, which gets persisted into local browser storage as JSON.\nYou will find that some ‘model’ concepts are more about how the information is presented in the GUI, thus I recommend these are kept as attributes of the Application class, and referred to as the view state or view model. The attribute filter is an example of such view state. The Application class can also hold collections of models which is what we do in this project:\nclass Application { constructor(config) { this.todos = [] // model collection  this.filter = 'all' // view model, options are: 'all', 'active', 'completed'  ... } The model can be fat or thin - a fat model will have more business logic in the model. A thin model will most business or application logic in the Application class, treating the model as just data structures.\nFinally, the Model needs to participate in the internal eventing system. Whenever an attribute changes it should send out a notification event - this is why most attributes of our TodoItem class are accessed via getter and setter methods. For example setting title or completed will trigger an internal event to whoever may be listening. This internal eventing mechanism is how Controllers know to update the GUI with updated model information.\nView The View means a modern GUI framework, and as such is already available to be used by the programmer. In our case, our modern GUI framework is the browser DOM which you can build in HTML:\n\u003cinput id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\"\u003e then Controllers use the GUI native eventing system to listen for interesting events\nthis.gui.$toggle_all.on('change', handler) Controller The Controller is the most interesting aspect of MVC.\nIn many software designs, the Controller isn’t necessarily a single thing. A bunch of stray GUI event handler functions are in reality, part of the ‘controller role’. Code that copies data from the model into the GUI/DOM is also part of the Controller role. I feel the challenge of GUI architectures is to tame the role of Controller into some semblance of coherance and symmetric organisation. Which is why MVCA prescribes creating Controller classes.\nIn TodoMVC-OO we have a Controller class ControllerTodoItem and instantiate one per TodoItem model instance. That’s arguably a lot of controller instances, but this approach allows fine grained updating of the DOM. In contrast, the Jquery version of TodoMVC rebuilds the entire todo DOM on each refresh - something that might become inefficient for non-toy apps.\nIn TodoMVC-OO we have a Controller class ControllerHeader for looking after the header part of the GUI and ControllerFooter for looking after the footer area, which is where the filter buttons are and the count of uncompleted todo items is displayed. The number of Controllers you create is up to you: one Controller per GUI element for fine grained updates, a more relaxed approach of one Controller per related group of GUI elements (my preference) or arguably even one Controller for all GUI elements! I go into more academic detail on this topic in my MGM pattern paper.\nBy clearly defining what a mediating Controller is, and organising our app into different sensible controllers, we tame our design and prevent it from turning into spaghetti.\n  View events only talk to Controllers:\n View events (‘gui events’ e.g. via .on('click', ...)) go to one or more Controllers. Controllers update the View, usually in reponse to an ‘internal event’ notification.    The Controller talks to the rest of the system:\n Accesses App view state. Calls App business logic methods. Modifies the Model directly.    The Controller listens for ‘internal events’ broadcast from Model \u0026 App.\n  Whilst that may seem like a lot to understand, its basically saying Controllers talk to the GUI - nobody else does. Controllers then call into the rest of the system to get things done\nImportantly, we must resist putting business logic into the Controller, simply let the controller call the Application to do what needs to be done. The Controller should do the minimal possible work, mediating and translating between the View and the rest of the system (the App + Model).\nApplication The role of the Application is also important and often overlooked/undocumented. The Application owns the Model, and looks after persisting it. The Application can listen for internal Model events.\nWhilst it is fine to wire Controllers directly to model instances, you will also need the Application to hold “view state” e.g. like the state of the active “filter” in this Todo application. The Application is a centralised class, a kind of hub - to hold higher level business logic and more complex model manipulations. The Application class’s functionality can of course be composed of smaller pieces as software grows more complex but a class called Application should always still exist.\nEventing System Eventing is an important consideration in decoupling models from controllers, and to facilitate abstract communication between objects.\nTwo eventing systems should be distinguished:\n GUI native: The native eventing system of the GUI Framework e.g. DOM .on('click', ... Internal: Your choice of an application system wide eventing system e.g. Publish-Subscribe e.g. document.addEventListener(\"hello\", (event) =\u003e { ... })  Both eventing systems are used in the TodoMVC-OO implementation. As you can see in the diagram above, DOM eventing reaches the Controllers, but no further. The remaining eventing is internal.\nHere is a Literate Code Map of the event flow of TodoMVC-OO. Events are reified as coloured objects, each different event gets a different colour. TodoMVC-OO event flow.\n The above diagram was generated semi-automatically from Javascript source code residing in GitHub using GitUML. Click here for more diagram detail as a .svg and the ability to zoom.  View this actual diagram 134 on GitUML.  The eventing pattern depicted here is Publisher-Subscriber where real event objects are ‘broadcast’ into the ether/event bus/system/whatever - allowing any code in the system to subscribe and respond - the point is, the code emitting the event does not have references to receiver object/methods.\nThe Javascript built in Publisher-Subscriber eventing approach is more flexible and powerful than the Observer pattern since the Observer pattern requires observers to know about and subscribe to Subject objects, which is not always possible or convenient. More dicussion on the differences can be found in this article and on Stackoverflow. Thus we use Publisher-Subscriber eventing (event name → object method) rather than the traditional Observer pattern (object → object) approach.\nI used to be a fan of the traditional Observer pattern but in my later years find the Publisher-Subscriber pattern to be simpler and more powerful - plus Publisher-Subscriber is built into Javascript you simply document.addEventListener(\"hello\", (event) =\u003e { ... }) to listen and document.dispatchEvent(new CustomEvent(event_name, { detail: {from: from, data: data } })) to notify all.\nThe Javascript built in Publisher-Subscriber eventing system is used as the internal eventing system of this TodoMVC-OO implementation.\nApplication Bootstrapping To get things running, some bootstrapping code will create an instance of the Application which in turn creates all the Controllers and loads the Model. The bootstrapping in TodoMVC-OO is done in app.js which creates an instance of Application which is defined in application.js.\n(function (window) { let config = {...} new Application(config) })(window); Notice that a config object with a list of callback methods is passed into the Application.\nGiving the Application class knowledge of individual Controller classes and all the GUI view elements they need is arguably contaminating the Application class with too much GUI view and Controller knowledge.\nThe solution I use is to pass the Application a config object which contains a bunch of callbacks. Each callback function will magically create a Controller instance, wired to look after its GUI elements. Each callback function hides, within itself, references to the DOM - which we don’t want the Application to have. In this way, the bootstrapping code and the Controller code are the only parts of the architecture that know about the View specifics (which we want to restrict).\nThus whenever the Application needs to instantiate a Controller (e.g. each time a TodoItem is created) it calls a config callback function. Another example is during bootup - some permanent Controllers need to be created, like the Controller looking after the header area, so the Application calls this.callback_config.cb_header(this) which creates an instance of the ControllerHeader wired to $('.new-todo') and $('.toggle-all'). The Application only needs to know the callback function names and thus remains pure.\nNotice in the config object below that each callback refers to the view through JQuery syntax e.g. $('ul.todo-list') and passes these references into the contructor of the Controller:\nlet config = { // Callback to create the todo item controllers - are added as needed  cb_todo: function (app, todo) { new ControllerTodoItem( app, todo, { $todolist: $('ul.todo-list') } ) }, // Callbacks to create the permanent controllers  cb_header: function (app) { new ControllerHeader( app, { $input: $('.new-todo'), $toggle_all: $('.toggle-all') } ) }, cb_footer: function (app) { new ControllerFooter( app, { $footer: $('footer'), $footer_interactive_area: $('.footer') }) } } Of course the Controller itself will have further references to View DOM elements, however these references should be based on searching within the outer DOM element passed to the Controller - thus achieving some degree of ‘component-isation’ and re-use. For example the same Controller could be used to look after different DOM elements with different element id’s.\nTodoMVC-OO Conclusion This project fully implements the TodoMVC specification and is implemented without a framework, using plain Object Oriented programming + MVCA architectural design pattern, as described above.\nRunning demo here.\nImprovements In this implementation, I notice that footer renders too early rather than right at the end of the initial render. Its just a subtle flash of the footer when the page is initially redrawn, but I’d like to correct this.\n Resources  Official TodoMVC project with other TodoMVC implementations (e.g. Vue, Angular, React etc.) TodoMVC-ECS - My “Entity Component System” implementation of TodoMVC GUI Showdown MVCA another example of an app implemented using the MVCA architecture (Javascript, open source) MGM pattern (older version of MVCA, presented at a Patterns Conference)  Diagramming  GitUML diagramming used for this project Literate Code Mapping diagramming used for this project  Credit Created by Andy Bulka\nNote: This project is not not officially part of the TodoMVC project - as it is does not use a MVC framework library, nor does it meet the criterion of “having a community” around it. On the other hand, perhaps a pattern is equivalent enough to a framework - after all there is a plain Javascript TodoMVC implementation officially available using ad-hoc techniques. Plus, there has been a “community” around the Object Oriented MVC pattern for decades now - hasn’t there? 😉\n","excerpt":"Introduction For the original MGM pattern see MGM pattern\nTodoMVC-OO …","ref":"/projects/patterns/mvca-pattern/","title":"MVCA Architectural Pattern"},{"body":"Introduction The Transformation Interface is both a design pattern and an architectural pattern. It describes an interface or layer, which offers services to transform an object into another format and back again. A pair of methods on some class e.g. load/save are often the signature of a Transformation Interface.\nThe Pattern  ","excerpt":"Introduction The Transformation Interface is both a design pattern and …","ref":"/projects/patterns/transformation-interface/","title":"Transformation Interface Design Pattern"},{"body":"Developing a Layout Algorithm for UML diagrams Intro Presented to the Melbourne Patterns Group, Wednesday 6th April 2011 6:30 PM\nThe Problem: Untangling UML Diagrams Terms  Nodes – these are the shapes/rectangles Edges – these are the lines connecting the shapes  Background  My UML tool is written in Python Existing layout libraries for e.g. python PyGraphviz has no windows port so I wrote my own Layout is reasonably hard to implement – academic papers are very complex and deal in a lot of math DIRTY SECRET OF ACADEMIA - Most Layout algorithms only deal with ‘points’ and don’t take into account real width and height  Thus for any real world use (unless dealing with network and particle visualisation where each node is the same size/shape), it seemed to me that one needs to run an overlap removal algorithm after the layout to remove shape overlaps.\nOverlap removal algorithm needs to minimise shape movement in order to respect the layout results\nWhat I developed  I used a ‘spring layout’ adapted from java and javascript I developed my own overlap removal algorithm Developed a GUI sandbox test app for development  Overlap Removal - Before and After   before\n    after applying layout\n  Unit Testing Extensive unit tests were created to keep on top of the layout algorithm results. A word document containing annotated screenshots for each test helped me enormously.\n  an overlap removal use case which became a unit test\n  Layout / persistence format was created for creating layout scenarios\n{'type':'node', 'id':'D25', 'x':6, 'y':7, 'width':159, 'height':106} {'type':'node', 'id':'D13', 'x':6, 'y':119, 'width':119, 'height':73} {'type':'node', 'id':'m1', 'x':170, 'y':9, 'width':139, 'height':92} Unit Testing Brittleness Avoided Loose tests using (e.g. I created a function called ensureYorder() etc) were created so that the tests were not too brittle. Slight variations in position are ignored.\nView this unit test file at the Pynsource GitHub repository tests/test_overlaps1.py. Here is an example unit test:\ndef _LoadScenario3(self): self.g.LoadGraphFromStrings(TEST_GRAPH3) def test3_5InsertedVerticallyTwoPushedDown(self): self._LoadScenario3() # move m1 to the left node = self.g.FindNodeById(\"m1\") node.left, node.top = (6, 4) d97 = self.g.FindNodeById(\"D97\") oldD97pos = (d97.left, d97.top) # assert m1 has been inserted vertically - two pushed down were_all_overlaps_removed = self.overlap_remover.RemoveOverlaps() self.assertTrue(were_all_overlaps_removed) self.assertEqual(2, self.overlap_remover.GetStats()[\"total_overlaps_found\"]) self.assertTrue(self._ensureYorder(\"m1\", \"D25\", \"D13\")) self.assertTrue(self._ensureXorder(\"m1\", \"D97\", \"D98\")) self.assertTrue(self._ensureXorder(\"D25\", \"D97\", \"D98\")) self.assertTrue(self._ensureXorder(\"D13\", \"D97\", \"D98\")) self.assertEqual(oldD97pos, (d97.left, d97.top)) # ensure D97 hasn't been pushed Running the tests:\n  An example test run\n  Having a huge bank of unit tests helped in refactoring, too. Imagine testing all the necessary scenarios by hand!\nThe final Results were pretty good!\n  A UML diagram after overlap removal\n  Design Patterns Used Memento  Memento was used to remember graph layout positions and then compare mementos to see if anything had ‘changed’ and thus drop out of the Spring layout algorithm early Memento was used to save/restore layouts in my test GUI – assigned to keys 0..9  Blackboard Blackboard pattern used to run layout several times and figure out which was the best, cleanest result using multiple criteria. Each run is a ‘snapshot’\nSnapshot 1 [6] LL 0 NN pre rm overlaps 5 LN 0 scale 1.6 bounds 23 (500, 473) \u003c--- Snapshot 2 [4] LL 0 NN pre rm overlaps 5 LN 1 scale 1.4 bounds 30 (570, 537) Snapshot 3 [5] LL 0 NN pre rm overlaps 6 LN 2 scale 2.0 bounds 17 (444, 393) Snapshot 4 [2] LL 0 NN pre rm overlaps 4 LN 2 scale 1.4 bounds 34 (648, 537) Snapshot 5 [3] LL 0 NN pre rm overlaps 5 LN 4 scale 2.0 bounds 21 (427, 508) Snapshot 6 [1] LL 0 NN pre rm overlaps 10 LN 5 scale 2.0 bounds 18 (485, 379) Python goodness helped in this ‘AI’ smartness\ndef sortfunc(d): # this does the thinking! return (d['LL'], d['LN'], d['bounds_area_simple'], -d['scale'], d['NN_pre_OR']) Future  “Line over node” overlap was abandoned as it started to get really complex with a lot of trigonometry and perhaps this area needs a more academic approach Non straight lines and line routing is probably the better direction Adding an understanding of UML semantics is another direction to research, so that e.g. base classes are above derived classes etc.  Overlap Removal Server In 2020 I needed to expose the overlap removal code as an API for javascript to use.\nHere is that small research sub-project https://github.com/abulka/pynsource/tree/master/Research/overlap_removal_server\nResources Code and Links  Overlap removal code is Python, open source Part of my python UML tool PyNSource: Reverse engineer python source code into UML - display UML as Ascii art or PlantUML diagrams in a proper diagramming visual workspace.  Slides on Scribd UML Graph Layout - Andy Talk - March 2011\nSlides as HTML  The problem of laying out UML Spring Layout Mapping layout to Real World OGL MVC Overlap Removal Unit tests and unit test diagrams Memento Design Pattern Blackboard Design Pattern \u0026 Injecting sorting function Future..   Slides as Pdf download View as pdf\n Images Sample Images   before\n    after applying layout\n  ","excerpt":"Developing a Layout Algorithm for UML diagrams Intro Presented to the …","ref":"/blog/2011/04/06/uml-layout/","title":"UML Layout"},{"body":"Introduction As design patterns become more mainstream, various IDE’s (Integrated Development Environments) and UML modelling software environments have begun to introduce support for design patterns. For example, developers browse through a catalog of design patterns and drop one onto a UML workspace, whereupon various classes appear with the appropriate methods and attributes inserted. Usually there is an interface whereby roles in the design pattern can be mapped onto existing classes, or alternatively, new classes are created for you. This paper explores the state of pattern automation software, discusses the pros and cons of various approaches and then goes on to discusses the broader issues raised by the attempt to automate something which some argue, in principle, perhaps should not be automated at all..\nNote: The pattern automation paper was followed up a few years later with a talk entitled design pattern automation - part 2 SEE BELOW which reviews the current crop of UML tools circa 2006. Fot a review of Netbeans 6 design pattern support - stay tuned for a blog posting after I give my talk to the Melbourne Patterns Group in Feb 2009.\nThis paper is a revision of one that appeared at KoalaPLoP 2002 – the ThirdAsia-Pacific Conference on Pattern Languages of Programmes. Conferences in Research and Practice in Information Technology,Vol. 13. J. Noble, Ed. Reproduction for academic, not-for profit purposes permitted provided this text is included.\nDesign Pattern Automation \u0026 UML Tool Support Various UML Tools support design pattern usage. You typically drag and drop patterns onto your workspace and they appear as UML classes. Its a bit more complicated than this, and raises all sorts of interesting issues. Read the pdf (part 1) and then read the powerpoint and watch the video (part 2).\nPart 1 - Early tools and the philosophy of pattern automation  Part 2 - Design Pattern Tools as of 2006 Here are the slides from a talk entitled “Design Pattern support in UML tools - part II” which I gave in October 2006 to the Melbourne Patterns Group, Australia.\n Alternatively, view the above powerpoint on slideshare or download the powerpoint .ppt directly:\nAddendum As part of my Design Pattern Automation - Part 2 talk, I recorded some of that session. Here is a youtube video of how to apply design patterns using IBM’s Rational tool. Apologies about the sound quality - just look at the pictures!\nDemonstration of Patterns in IBM’s Rational tool. http://www.youtube.com/watch?v=IjKClDX2dUU\n","excerpt":"Introduction As design patterns become more mainstream, various IDE’s …","ref":"/projects/patterns/design-pattern-automation/","title":"Design Pattern Automation"},{"body":"Abstract A central mediating class which records all the one-to-one, one-to-many and many-to-many relationships between a group of selected classes. Classes that use a Relationship Manager to implement their relationship properties and methods have a consistent metaphor and trivial implementation code (one line calls). In contrast - traditional “pointer” and “arraylist” techniques of implementing relationships are fully flexible but often require a reasonable amount of non-trivial code which can be tricky to get working correctly and are almost always a pain to maintain due to the detailed coding and coupling between classes involved.\nThe Official Pattern  Usage and Theory Relationship Manager - Usage and Theory\nThis page documents how to use my implementations of the Relationship Manager pattern. RM Relationship Manager has been implemented in Python, Boo (.net), C# (.net) and Java.\nIncluded are examples of how to code using relationship manager, covering all possible modelling scenarios (e.g. one to one, one to many etc.). See also the Boo implementation page for a fully worked out example of a person and order class. The Java download also has a real world example implemented.\nI also spend some time describing, in more theoretical terms, the scope of the relationship manager approach, in other words - what are all the possible relationships between objects and how RM can model them.\nIts a Object Relational Database In a sense, an Object Database is an implementation of the RM pattern. The intent of the RM pattern is lighter weight, to replace the wirings between objects rather than acting as a huge central database.\nHere is a very simple implementation of RM in Python:\nclass RelationshipManager: def __init__(self): self.Relationships = [] def AddRelationship(self, From, To, RelId=1): if not self.FindObjects(From, To, RelId): self.Relationships.append( (From, To, RelId) ) # assoc obj def RemoveRelationships(self, From, To, RelId=1): if not From or not To: return lzt = self.FindObjects(From, To, RelId) if lzt: for association in lzt: self.Relationships.remove(association) def FindObjects(self, From=None, To=None, RelId=1): resultlist = [] match = lambda obj,list,index : obj==list[index] or obj==None for association in self.Relationships: if match(From,association,0) and match(To,association,1) and RelId==association[2]: if From==None: resultlist.append(association[0]) elif To==None: resultlist.append(association[1]) else: resultlist.append(association) return resultlist def FindObject(self, From=None, To=None, RelId=1): lzt = self.FindObjects(From, To, RelId) if lzt: return lzt[0] else: return None def Clear(self): del self.Relationships[0:] and you could use it like this:\nimport unittest, random class TestCase00(unittest.TestCase): def setUp(self): self.rm = RelationshipManager() def checkBasic00(self): self.rm.AddRelationship('a','b') self.rm.AddRelationship('a','c') assert self.rm.FindObjects('a',None) == ['b','c'] assert self.rm.FindObjects(None,'a') == [] assert self.rm.FindObjects(None,'b') == ['a'] assert self.rm.FindObjects(None,'c') == ['a'] def checkBasic01Singular(self): self.rm.AddRelationship('a','b') self.rm.AddRelationship('a','c') assert self.rm.FindObject(None,'b') == 'a' assert self.rm.FindObject(None,'c') == 'a' assert self.rm.FindObject('a',None) == 'b' # could have been 'c' - arbitrary For the full Python 3 implementation see https://github.com/abulka/relationship-manager\nHoping to get a pip package sometime soon.\nWhat’s it good for? What is Relationship Manager good for?\n I’d appreciate an ‘how to use’ example to get a quick / better idea on what it’s useful for when programming\n The basic idea with relationship manager is that it is like a dictionary, which maps relationships between two things, be they object references or strings or whatever. In my examples I usually use strings, though object references are commonly used too, in order to\nmap relationships between object instances.\nThe benefit over a dictionary is that you can have multiple mappings\ne.g.\na -\u003e 1 a -\u003e 2 a -\u003e 3 Then you can ask what ‘a’ points to and get the result [1, 2, 3]. You can also ask what is pointing to 3, and get the result a.\nOne common use of this technology is to do all your wiring between objects using a relationship manager, thereby saving yourself having to implement your own one to many lists and having to maintain fiddly backpointer logic etc. So you still have e.g. an AddOrder(o) method on your e.g. Person class…its just that you implement the method using a one line call to the relationship manager - simple! e.g.\nclass Person: def AddOrder(o): RM.addRelationship(self, o, 'personToOrderRelationship') def GetOrders(): return RM.findObjectsPointedToByMe(self,'personToOrderRelationship') There is a bit more of a tutorial code sample in the post http://tinyurl.com/9xz5m\nModelling relationships What methods do I put where when modelling relationships?\nI recommend that you use the templates table to figuring out what methods to put where for each type of classic relationship you want to model. For example, to implement a one to many relationship between two classes X and Y, you would use template 4 or 5 (use the latter if you want bidirectionality)\nDocumentation Note that the C# and Java implementations have a slightly cleaner set of methods and a few extra methods - and also use a nice interface to talk to. The method names are substantially the same though.\nC# and Java API public enum Cardinality { OneToOne, OneToMany, ManyToOne, ManyToMany } public enum Directionality { UniDirectional, DirectionalWithBackPointer, DoubleDirectional } interface IRelationshipManager { void AddRelationship(object fromObj, object toObj, string relId); void AddRelationship(object fromObj, object toObj); void EnforceRelationship(string relId, Cardinality cardinality); void EnforceRelationship(string relId, Cardinality cardinality, Directionality directionality); IList FindObjectsPointedToByMe(object fromObj, string relId); object FindObjectPointedToByMe(object fromObj, string relId); IList FindObjectsPointingToMe(object toObj, string relId); object FindObjectPointingToMe(object toObj, string relId); void RemoveRelationship(object fromObj, object toObj, string relId); void RemoveAllRelationshipsInvolving(object obj, string relId); int Count(); int CountRelationships(string relId); void Clear(); bool DoesRelIdExistBetween(object fromObj, object toObj, string relId); IList FindRelIdsBetween(object fromObj, object toObj); } Abstract API    Return Type Function Name Short-hand     void addRelationship(from, to, id) R(f,t)   void removeRelationship(from, to, id) NR(f,t)   List findObjectsPointedToByMe(from, id) PS(f)   List findObjectsPointingToMe(to, id) BS(t)   void EnforceRelationship(id, cardinality, bidirectionality) ER(id, c, bi)   Object findObjectPointedToByMe(fromMe, id, cast) P(f)   Object findObjectPointingToMe(toMe, id, cast) B(t)   void removeAllRelationshipsInvolving(object, id) NRS(o)    For example Object is just one of your objects which you added with addRelationship().\nRe cast that’s just in case you need to cast to a type. This might have been possible in the boo language for .NET (which is now dead). Please adapt to your language as needed. Dynamic languages don’t need casting.\nEnforcing Relationships You can enforce relationships. For example EnforceRelationship() works like this:\nER(\"xtoy\", \"onetoone\", \"directional\") The relationship is registered as being one to one and directional, so that e.g. when you add a second relationship between the same two objects the first relationship is automatically removed - ensuring the relationship is always one to one. Alternatively, the implementation could raise an exception (go into the source and change it if this is what you need).\nFinding just one object The pair of find methods FindObjectPointedToByMe() and FindObjectPointedToByMe() only find one object (even though there may be more), and cast it to the appropriate type. This is a commonly used convenience method - the more painful way would be to use FindObjectsPointingToMe() and just grab the first object from the returned list. Exactly which object is found is undefined, but would typically be the first one added.\nRelationship Id What to use as the Relationship Id?\nThis is either an integer or a string. I have chosen to use a string in the C# and Java implementations, since you can describe relationships easily in this way rather than having to map from an integer back to some meaningful description.\nRM.addRelationship(fromObject, toObject, relationshipId) will raise an exception if relationshipId is an empty string. All other functions (except for addRelationship) can pass either an empty string or “*” as the relationshipId, which means you are searching for any relationship at all. You would usually only want to do this if there is only one relationship between class X and class Y, then your P and NR calls can specify “*” as the relationshipId in order to match any relationship between these two objects. Alternatively, you can use relationship manager’s overloaded versions of all its routines (except for addRelationship) which don’t take a relationshipId where relationshipId defaults to “*”.\nTable of Templates Classic “relationship scenarios” How to implement relationships using sets of Relationship Manager methods\nHere is a list of classic “relationship scenarios” (e.g. one to one, one to many etc.) and how to implement them using the Relationship Manager API.\nThe right hand side of the below table shows python code using calls to RM (relationship manager) using the shorthand notation for the function names. For long hand names just substitute in the appropriate name e.g. instead of RM.R() you would call rm.AddRelationship().\nNote: The method names below are just suggestions. Normally you would use better method names that pertain to your application domain.\n Instead of .addY(y) you might have addOrder(order). Instead of .getX() you might have getCustomer(). Instead of getAllY() you might have .getOrders() etc.  Table This table uses the Shortened API calls for brevity. E.g. RM.ER means call EnforceRelationship on your Relationship Manager instance.\n   Relationship Scenario Example Python Implementation   Implementing one to one relationships between class X and Y      #1.  1 → 1, directional, all methods on X\n Singular API No API ______________ ______________ | X | | Y | |______________| |______________| | | | | |void setY(y) |1 1| | |Y getY() |⎯⎯⎯⎯⎯⎯⎯⎯⎯→| | |void clearY()| | | |______________| |______________|     class X: def __init__(self): RM.ER(\"xtoy\", \"onetoone\", \"directional\") def setY(self, y): RM.R(self, y, \"xtoy\") def getY(self): return RM.P(self, \"xtoy\") def clearY(self): RM.NR(self, self.getY(), \"xtoy\")   class Y: pass     #2.  1 → 1, directional, all methods on Y\n No API Singular API ______________ ______________ | X | | Y | |______________| |______________| | | | | | |1 1| setX(x) | | |⎯⎯⎯⎯⎯⎯⎯⎯→ | getX() | | | | clearX() | |______________| |______________|     class X: pass   class Y: def __init__(self): RM.ER(\"xtoy\", \"onetoone\", \"directional\") def setX(self, x): RM.R(x, self, \"xtoy\") def getX(self): return RM.B(self, \"xtoy\") def clearX(self): RM.NR(self.getX(), self, \"xtoy\")     #3.  1 ←→ 1, bi-directional, methods on both X and Y\n Singular API Singular API ______________ ______________ | X | | Y | |______________| |______________| | | | | |void setY(y) |1 1| setX(x) | |Y getY() | ←⎯⎯⎯⎯→ | getX() | |void clearY()| | clearX() | |______________| |______________|     class X: def __init__(self): RM.ER(\"xy\", \"onetoone\", \"bidirectional\") def setY(self, y): RM.R(self, y, \"xy\") def getY(self): return RM.P(self, \"xy\") def clearY(self): RM.NR(self, self.getY(), \"xy\")   class Y: def __init__(self): RM.ER(\"xy\", \"onetoone\", \"bidirectional\") def setX(self, x): RM.R(self, x, \"xy\") def getX(self): return RM.P(self, \"xy\") def clearX(self): RM.NR(self, self.getX(), \"xy\")     #3A.  1 → 1, directional, all methods on X, back pointer\n Singular API ___________________ | X |\u003c-------, |___________________| 1 | 1 | | | |---→| void _setX(x) | | | | X _getX(x) | | |____| X _getBack() |........| back |___________________| x  This is the Composite Design Pattern - good for representing trees etc.  See backpointer discussion below which includes a fully worked out example of case 3A, in Python.     class X: def __init__(self): RM.ER(\"xtox\", \"onetoone\", \"directional\") def _setX(self, x): RM.R(self, thing, \"xtox\") def _getX(self): return RM.P(self, \"xtox\") def _getBack(self): return RM.B(self, \"xtox\")   x = property(_getThing, _setThing) back = property(_getBack)     Implementing one to many relationships between class X and Y      #4.  1 → *, directional, all methods on X\n Plural API No API _____________ ______________ | X | | Y | |_____________| |______________| | | | | |addY(y) |1 *| | |getAllY() | ⎯⎯⎯⎯⎯⎯→ | | |removeY(y) | | | |_____________| |______________|     class X: def __init__(self): RM.ER(\"xtoy\", \"onetomany\", \"directional\") def addY(self, y): RM.R(self, y, \"xtoy\") def getAllY(self): return RM.PS(self, \"xtoy\") def removeY(self, y): RM.NR(self, y, \"xtoy\")   class Y: pass     #5.  1 ←→ *, bi-directional, methods on both X and Y\n Plural API Singular API _____________ ______________ | X | | Y | |_____________| |______________| | | | | |addY(y) |1 *| setX(x) | |getAllY() | ←⎯⎯⎯⎯→ | getX() | |removeY(y) | | clearX() | |_____________| |______________|     class X: def __init__(self): RM.ER(\"xtoy\", \"onetomany\", \"bidirectional\") def addY(self, y): RM.R(self, y, \"xtoy\") def getAllY(self): return RM.PS(self, \"xtoy\") def removeY(self, y): RM.NR(self, y, \"xtoy\")   class Y: def setX(self, x): RM.R(x, self, \"xtoy\") def getX(self): return RM.P(self, \"xtoy\") def clearX(self): RM.NR(self, self.getX(), \"xtoy\")     Implementing many to one relationships between class X and Y      #6.  * → 1, directional, all methods on Y\n No API Plural API ______________ ______________ | X | | Y | |______________| |______________| | | | | | |* 1|addX(x) | | | ⎯⎯⎯⎯⎯⎯→ |getAllX() | | | |removeX(x) | |______________| |______________|    DRAFT API (not tested)\n class X: pass   class Y: def addX(x) - None: RM.R(x, this, \"xtoy\") def getAllX() - List: return RM.BS(this, \"xtoy\") def removeX(x) - None: RM.NR(x, this, \"xtoy\")  \n   #7.  * ←→ 1, bi-directional, methods on both X and Y\n Singular API Plural API ______________ ______________ | X | | Y | |______________| |______________| | | | | |void setY(y) |* 1|addX(x) | |Y getY() | ←⎯⎯⎯⎯→ |getAllX() | |void clearY()| |removeX(x) | |______________| |______________|    DRAFT API (not tested)\n class X: def setY(y) - None: RM.R(this, y, \"xtoy\") def getY() - Y: RM.P(this, \"xtoy\") def clearY() - None: RM.NR(this, getY(), \"xtoy\")   class Y: def addX(x) - None: RM.R(x, this, \"xtoy\") def getAllX() - List: RM.BS(this, \"xtoy\") def removeX(x) - None: RM.NR(x, this, \"xtoy\")  \n   Implementing many to many relationships between class X and Y      #8.  * → *, directional, all methods on X\n Plural API No API _____________ ______________ | X | | Y | |_____________| |______________| | | | | |addY(y) |* *| | |getAllY() | ⎯⎯⎯⎯⎯⎯→ | | |removeY(y) | | | |_____________| |______________|    DRAFT API (TODO, not tested)\n   #9.  * → *, directional, all methods on Y\n No API Plural API ______________ ______________ | X | | Y | |______________| |______________| | | | | | |* *|addX(x) | | | ⎯⎯⎯⎯⎯⎯→ |getAllX() | | | |removeX(x) | |______________| |______________|    DRAFT API (TODO, not tested)\n   #10.  * ←→ *, bi-directional, methods on both X and Y\n Plural API Plural API ______________ ______________ | X | | Y | |______________| |______________| | | | | | addY(y) |* *| addX(x) | | getAllY() | ←⎯⎯⎯⎯→ | getAllX() | | removeY(y) | | removeX(x) | |______________| |______________|    DRAFT API (TODO, not tested)\n    Code which supports the ideas in the theory above is provided in this python program or simply view the code and results as a pdf.\nMore Detail on each template Here are some further notes on using each template. I don’t cover each variation, so see the above table for the complete list of possibilites. I also use slightly different method names here just in case you don’t like the setX and setY syntax I have been using.\nOne to one Class X points to class Y.\nMethods on class X    Returns Example method name Implementation in RM     void setPointer(y) R(x, y, \"xtoy\")   Y getPointer() P(x, \"xtoy\")   void clearPointer() NR(x, y, \"xtoy\")    Methods on class Y None.\nNotes:  The clearPointer() implementation needs to get a reference to y in order to call NR(x,**y**,...). The implementation can either call its own getPointer() method to get a reference to y, e.g. clearPointer() would be implemented as NR(x, getPointer() ,\"xtoy\"). Alternatively the getPointer() implementation can make a second call to relationship manager itself e.g. clearPointer() would be implemented as NR(x, P(x,\"xtoy\"),\"xtoy\"). If there is only one relationship between class X and class Y, then your P and NR calls can specify “*” as the relationshipId in order to match any relationship between these two objects. Alternatively, you can use the overloaded P and NR calls which don’t take a relationshipId at all. [not sure if this note on overloaded methods is relevant to the latest C# and Java implementations]  One to one, with back pointer Class X points to class Y. Class Y can deduce a back pointer to class X.\nMethods on class X Same as one to one, i.e.\n   Returns Example method name Implementation in RM     void setPointer(y) R(x, y, \"xtoy\")   Y getPointer() P(x, \"xtoy\")   void clearPointer() NR(x, y, \"xtoy\")    Methods on class Y    Returns Example method name Implementation in RM     X getBackPointer() B(y, “xtoy”)    and optionally setter methods …\n   Returns Example method name Implementation in RM     void setBackPointer(x) R(x, y, \"xtoy\")\nor simply call x.setPointer(this)   void clearBackPointer() NR(x, y, \"xtoy\")\n_or simply call x._clearPointer()_    Notes:  An implicit back-pointer (i.e. a back reference) is always deducible, when using a relationship manager, thus instead of wiring up an explicit pointer relationship as a back-pointer , you can implement a back-pointer using an implicit back reference on an existing relationship (in this case the “xtoy” relationship) instead. i.e. see getBackPointer() on class Y. Notice all the relationshipId’s in this example (in both classes) are the same viz. “xtoy” In implementing X methods, whenever you need a reference to y, just call this.getPointer(). Similarly, in implementing Y methods, whenever you need a reference to x, just call this.getBackPointer(). See discussion on this above. If you chose to have backpointer setter methods on class Y, you need not necessarily call the wrapping methods on X in order to implement them e.g. setBackPointer(x) is implemented by simply calling x.setPointer(this) (although it is recommended that you do, since X is the ‘controlling’ class for the relationship - see Martin Fowler ‘Refactorings’ p. 197 “Change Unidirectional Association to Bidirectional”). You could alternatively call the relationship manager directly, thus setBackPointer(x) becomes a call to R(x, y, \"xtoy\") and clearBackPointer() becomes a call to NR(x, y, \"xtoy\"). If you are trying to enforce a one to one relationship, then you should stricltly speaking, remove any exising relationship between a1 and b1 before creating a relationship between a2 and b1. However relationship manager will remove the previous relationship for you automatically. See discussion on this behaviour.   Discussion on back pointers One of the benefits of the relationship manager pattern is that you don’t have to explicitly wire up and maintain back-pointers. Once you add a pointer relationship, you get the back pointer relationship available, for free. And once you delete the pointer relationship, the back-pointer relationship goes away automatically too.\nHowever if you want to delete or change the back-pointer relationship (from Y’s perspective) then you must talk to the relationship manager in terms of the relationship “xtoy”. If you imlplement the back-pointer relationship as a different relationship, with a different relationshipId, then you will fall prey to the same out of synch problems that traditional spaghetti wiring techniques often fall prey to. The trick is to treat the relationship as two sides of the one relationshipId.\nOne to many  Class X points to many instances of class Y.\nMethods on class X    Returns Example method name Implementation in RM     void add(y) R(x, y, \"xtoy*\")   list getAll() PS(x, \"xtoy*\")   void remove(y) NR(x, y, \"xtoy*\")    Methods on class Y None.\nNotes:  Notice that the relationshipId has a * symbol in it. This means that you can add multiple relationships of that type without the relationship manager removing the prior relationship. Not sure which of my Relationship Manager implementations auto-support this - its been so long ago…  One to many, with back pointers Methods on class X    Returns Example method name Implementation in RM     void add(y) R(x, y, \"xtoy*\")   list getAll() PS(x, \"xtoy*\")   void remove(y) NR(x, y, \"xtoy*\")    Methods on class Y    Returns Example method name Implementation in RM     X getBackPointer() B(y, \"xtoy*\")    and optionally setter methods …\n   Returns Example method name Implementation in RM     void setBackPointer(x) R(x, y, \"xtoy*\")\nor simply call x.setPointer(this)   void clearBackPointer() NR(x, y, \"xtoy*\")\n_or simply call x._clearPointer()_     Some More Deep Theory Skip this section if you just want to get on with coding… 😉\nAll possible relationship scenarios? When looking at all the possibiliteis of relationships between two classes, you get one to one, one to many, many to one and many to many. You have the variations generated by whether the relationships are directional or **bi-directional. ** Finally, you have variations of whether you put methods on one class or the other - for example, you could omit methods on e.g. the rhs. class, or you could go to the other extreme and provide a full range of methods on the rhs. class. Note that some combinatorial possibilities do not make sense and are left out of the table below.  S means singular API - this makes sense for one to one relationships, or the many side (ironically) of one to many relationships. It consists of methods like get, set, clear. P means plural API- this makes sense where you are dealing with collections, a many concept. It consists of methods like add, remove, getall. - means no methods relating to the relationship have been implemented on that class.  Blank cells mean “not applicable”.\n   Scenario (see above) directional bi-directional      _one to one_\n1 --\u003e 1 _one to one_\n1 \u003c--\u003e 1   #1. S -     #2. - S     #3.   S S   #3A.\n(composite, pointing to self) S     _one to many_\n1 --\u003e * _one to many_\n1 \u003c--\u003e *   #4. P -     #5.   P S    _many to one_\n* --\u003e 1 _many to one_\n* \u003c--\u003e 1   #6. - P     #7.   S P    _many to many_\n* --\u003e * _many to many_\n* \u003c--\u003e *   #8. P -    #9. - P     #10.   P P    An attempt at mapping the theoretical relationship possibilities\nThe above table shows all the possible relationship scenarios between two classes. It indicates various possibilities as to the methods you can add to either class. For example a one to many relationship where the “many” side has no need of any methods to see who is pointing at it, would use template 4.\nInteresting Addendem  Bi-directional implementations of directional relationships We must distinguish between a relationship that in its meaning, goes both ways, and a relationship which goes one way only. And furthermore, implementationally, you can have RM methods on one class only, on the other class only, or on both classes. The meaning of the relationship and the implementation (methods to create and look up those relationships) are two different things!\nThus when you put an API (relationship manager methods) on both classes this might seem to imply that you are implementing bi-directionality. However this does not mean that the “relationship” points in both directions. The meaning of the relationship is often in one direction only, and the existence of methods on both classes merely gives you a convenient way of querying the relationships that exist.\nThus the same relationship id should be used in both classes e.g. \"xtoy\" (notice the sense of directionality is built into the name of the relationship!), even though it is a bidirectional relationship in the sense that there is an API on both classes allowing each class to find the other class. In the following implementation of a one to many relationship between class X and class Y, notice the same relationship id \"xtoy\" must be used in both classes.\nclass X: def __init__(self): RM.ER(\"xtoy\", \"onetomany\", \"bidirectional\") def addY(self, y): RM.R(self, y, \"xtoy\") def getAllY(self): return RM.PS(self, \"xtoy\") def removeY(self, y): RM.NR(self, y, \"xtoy\") class Y: def setX(self, x): RM.R(x, self, \"xtoy\") def getX(self): return RM.P(self, \"xtoy\") def clearX(self): RM.NR(self, self.getX(), \"xtoy\") More on Directionality and Backpointers Relationships are here considered directional. So when you add a relationship with R(a,b) then a points to b.\nUsing a relationship manager you can get it deduce who is pointing at you, which means you get ‘back-references’ for free. However being able to determine a back-reference doesn’t mean that the model you are building officially has this pointer connection. Thus we must distinguish official pointers from deducible back references / back pointers. To find what a points to, use P(a). To find out what is pointing at b, use B(b).    API Short-hand Description     P(a) Find Pointer From   B(b) Find Back Reference To    Thus, just because you point at something doesn’t mean it is officially pointing back at you. But, using a relationship manager you can deduce who is pointing at you.\nSo if…\n   API Short-hand Comment     R(a,b) if you make a point to b    then…\n   API Short-hand Comment     P(a) == b a points to b   B(b) == a the thing pointing at b is a   P(b) == null b doesn’t point at anything\n(crucial distinction - see above line).   B(a) == null nothing is pointing back at a    More on Backpointers Backpointers are pointers on the “receiving end” of a relationship, so that the receiving object knows who is pointing at it. For example when a Customer places an Order, it might be convenient for any particular order instance to know which customer ordered it. I think you can choose to conceive of the backpointer in a few different ways:\n as an extra, separate relationship or as part of the one bidirectional relationship or merely a convenience method in the implementation in the r.h.s. class  The easiest way of implementing this backpointer without using relationship manager is to follow the Martin Fowler refactoring technique - see Martin Fowler ‘Refactorings’ p. 197 “Change Unidirectional Association to Bidirectional” - this will ensure you get the wiring correct. In this refactoring, you decide which class is the master and which is the slave etc. See the before and after python pdf below for an example of the correct wiring.\nThe way of implementing a backpointer using relationship manager is simply to call the findObjectPointingToMe(toMe, id) method. Since a RM holds all relationships, it can answer lots of questions for free - just like SQL queries to a database. See the before and after python pdf below for an example of using findObjectPointingToMe().\nBefore and After - Modeling Composite Design Pattern in Python The following code is a good example of how the use of RM saves you from having to explicitly maintain backpointers. P.S. To run the code you also need the support files found here. View the code below (requires the flash plugin) - showing an implementation of a Composite Pattern, with back pointer - or simply read the pdf directly.\n A concrete example This example uses the Boo .NET assembly, which is quite usable from other .NET langauges like C# and VB.NET etc. Alternatively you can adapt this example to use the pure C# implementation assembly (something I should publish here at some stage).\nSay you want to model a Person class which has one or more Orders. The Orders class has a backpointer back to the Person owning it.\nInstead of hand coding and reinventing techniques for doing all the AddOrder() methods and GetOrders() methods etc. using ArrayLists and whatever, we can do it using the relationship manager object instead, which turns out to be simpler and faster and less error prone. The RM (relationship manager) is implemented in this particular example as a static member of the base BO (business object) class. Thus in this situation all business objects will be using the same relationship manager.\nHere is the c# code to implement the above UML:\nusing System; using System.Collections; using RelationshipManager55; namespace WindowsApplicationUsing\\_RelationshipManagerDllTest001 { ///  /// BO is the base Business Object class which holds a single static reference  /// to a relationship manager. This one relationship manager is  /// used for managing all the relationships between Business Objects.  ///  public class BO // Base business object  { static protected RM1 RM = new RM1(); } ///  /// Person class points to one or more orders.  /// Implemented using a relationship manager rather  /// than via pointers and arraylists etc.  ///  public class Person: BO { public string name; static Person() { RM.ER(\"p-\u003eo\", \"onetomany\", \"bidirectional\"); } public Person(string name) { this.name = name; } public override string ToString() { return \"Person: \" + this.name; } public void AddOrder(Order o) { RM.R(this, o, \"p-\u003eo\"); } public void RemoveOrder(Order o) { RM.NR(this, o, \"p-\u003eo\"); } public IList GetOrders() { return RM.PS(this, \"p-\u003eo\"); } } ///  /// Order class points back to the person holding the order.  /// Implemented using a relationship manager rather /// than via pointers and arraylists etc.  ///  public class Order: BO { public string description; public Order(string description) { this.description = description; } public override string ToString() { return \"Order Description: \" + this.description; } public void SetPerson(Person p) { RM.R(p, this, \"p-\u003eo\"); // though mapping is bidirectional,  there is still a primary relationship direction ! } public Person GetPerson() { return (Person) RM.P(this, \"p-\u003eo\"); } public void ClearPerson() { RM.NR(this, this.GetPerson(), \"p-\u003eo\"); } } } Here is the project source code WindowsApplicationUsing RelationshipManagerDllTest001.rar Future Directions A generics version of relationship manager would be cool - that way no casting would be required. Presently all calls to relationship manager return objects - which you have to cast to the specific type you actually have stored.\nResources See original andypatterns page\n","excerpt":"Abstract A central mediating class which records all the one-to-one, …","ref":"/projects/patterns/relationship-manager/","title":"Relationship Manager - Design Pattern"},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background-cabin_hu711514a202e4ee80bf848c5946e20294_385912_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background-cabin_hu711514a202e4ee80bf848c5946e20294_385912_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About Andy Bulka A sample site using the Docsy Hugo theme.        Goldydocs is a sample site using the Docsy Hugo theme that shows what it can do and provides you with a template site structure. It’s designed for you to clone and edit as much as you like. See the different sections of the documentation and site for more ideas.     This is another section      This is another section     ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/about/","title":"About Goldydocs"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","excerpt":"This is the blog section. It has two categories: News and Releases. …","ref":"/blog/","title":"Docsy Blog"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background-staircase_hu711514a202e4ee80bf848c5946e20294_458706_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background-staircase_hu711514a202e4ee80bf848c5946e20294_458706_1920x1080_fill_q75_catmullrom_top.jpg); } }  Andy Bulka's Software Blog \u0026 Projects Learn More   Download   Andy Bulka is a software developer in Melbourne, Australia\n\n        Hi, my name is Andy Bulka and I am a Python and Nodejs/Electron software developer. I’ve also recently discovered Flutter, which is likely going to dominate a large part of software development in the future.\nThis website holds my blog on software development incl. UML and pattern based software development. These blog entries are often based on presentations that I have given to live audiences at various programmer enthusiast user groups or conferences.\n      New chair metrics! The Goldydocs UI now shows chair size metrics by default.\nPlease follow this space for updates!\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n   Follow us on Twitter! For announcement of latest features etc.\nRead more …\n     This is the second Section        Download from AppStore Get the Goldydocs app!\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n   Follow us on Twitter! For announcement of latest features etc.\nRead more …\n     The Patterns Movement  Capturing hard-won software design experience in the form of design patterns and architectural patterns is a noble cause that everyone can contribute to. You can contribute by writing patterns and maybe even coming to a Plop patterns conference. Basically when you see a software development technique a few times, and see that it isn’t yet documented - write it up in Pattern format and give it a name! A pattern is more than just a “tip” or technique though - a pattern represents an abstract idea - that can be implemented in various ways depending on your circumstances.\nThere are a couple of things I would like to see happen in the patterns world.\nFirst, it would be nice if there was a single, authoritative repository of patterns. Yes an attempt has been made - a catalog book and and various websites - but nothing authoratative. I’m starting a list of links here.\nSecondly, it would be nice to have deep design pattern support in UML within all our favourite IDE’s. For example Netbeans has it all - coding, form design, UML and design pattern support - albiet not as integrated as it could be and not as polished as it could be. Update: Unfortunately Netbeans seems to have dropped UML support in recent builds?\nIf IDE’s are not your cup of tea, then how about this: source code should have comment markers indicating where the patterns are, so that a reverse engineering tool can visualise not only the UML but also where the patterns are. My own UML tool PyNSource will have such a feature - est. June 2011.\nFurther advancements are arguably executable UML and even the possibility of building software without code. I muse a bit about this in my blog entry on software visualisation and my paper on design pattern tools. Patterns at all levels need to be core visual building blocks of IDE’s, or at the very least, extractable from source code into some visual UML tool - rather than being design ghosts that float around, implicit, in our source code.\nFor full site, see http://www.andypatterns.com/\n   ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","title":"Goldydocs"},{"body":"Various projects. Still to be sorted into categories. See the Misc area for links back to the current andypatterns.com site.\n","excerpt":"Various projects. Still to be sorted into categories. See the Misc …","ref":"/projects/","title":"Projects"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"}]