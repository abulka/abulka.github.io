Diagram:
  name: Car Management System
  version: 1.2
  version-ptd: 1.1
  description: A system to manage cars, including electric cars, with features like
               starting, stopping, charging, and diagnostics.
  files: Automobile.ts, Car.ts, ElectricCar.ts, Charger.ts, Diagnostics.ts, Wheel.ts

Imports:
  Car.ts (class Car, function start, function stop)
    --> Automobile.ts (interface Automobile)
    --> Wheel.ts (class Wheel)
  ElectricCar.ts (class ElectricCar, function charge)
    --> Car.ts (class Car, function start)
    --> Charger.ts (class Charger, function chargeCar)
      --> Utils.ts (function calculatePower)
  Diagnostics.ts (class Diagnostics, function runDiagnostics)
    --> Car.ts (class Car)

Files:
  file: Automobile.ts
    Variables:
      (none)
    Functions:
      (none)
    Interfaces:
      Automobile

  file: Car.ts
    Variables:
      wheels: Wheel (4)  ◇---depends on--> Wheel (Wheel.ts)
      running: boolean
      fuelLevel: number
    Functions:
      start()
      stop()
      refuel(amount: number)
    Classes:
      Car

  file: ElectricCar.ts
    Variables:
      batteryLevel: number
      isCharging: boolean
    Functions:
      start(): void @override
      charge(duration: number)
      checkBattery(): number
    Classes:
      ElectricCar

  file: Charger.ts
    Variables:
      powerOutput: number
      isPluggedIn: boolean
    Functions:
      plugIn()
      unplug()
      chargeCar(car: ElectricCar, duration: number)
    Classes:
      Charger

  file: Diagnostics.ts
    Variables:
      lastError: string
    Functions:
      runDiagnostics(car: Car)
      logError(error: string)
    Classes:
      Diagnostics

Classes:
  interface: Automobile
    Methods:
      start()
      stop()

  class: Car  ⋯⋯⋯implements⋯⋯⋯▷ Automobile
    Attributes:
      wheels: Wheel (4)  ◇---depends on--> Wheel
      running: boolean
      fuelLevel: number
    Methods:
      start()
      stop()
      refuel(amount: number)

  class: ElectricCar  ----inherits----▷ Car
    Attributes:
      batteryLevel: number
      isCharging: boolean
    Methods:
      start(): void @override
      charge(duration: number)
      checkBattery(): number

  class: Charger
    Attributes:
      powerOutput: number
      isPluggedIn: boolean
    Methods:
      plugIn()
      unplug()
      chargeCar(car: ElectricCar, duration: number)  --charges--> ElectricCar

  class: Diagnostics
    Attributes:
      lastError: string
    Methods:
      runDiagnostics(car: Car)  --diagnoses--> Car
      logError(error: string)

Use Cases:
  Sequence: Starting an Electric Car
    start() [class ElectricCar, ElectricCar.ts]
        [if batteryLevel > 20]
            -> start() [class Car, Car.ts]
                sets running to true
                < void
        [else]
            -> charge(30) [class ElectricCar, ElectricCar.ts]
                charges the car for 30 minutes
                -> chargeCar(car: ElectricCar, 30) [class Charger, Charger.ts]
                    increases batteryLevel
                    < void
                < void
            < void
        [end]
        < void

  Sequence: Charging Multiple Electric Cars in Parallel
    chargeCars(cars: ElectricCar[], duration: number) [class Charger, Charger.ts]
        [parallel]
        -> chargeCar(car: ElectricCar, duration) [class Charger, Charger.ts]
            charges each car
            < void
        waits for all cars to charge
        < void

  Sequence: Running Diagnostics with Error Handling
    runDiagnostics(car: Car) [class Diagnostics, Diagnostics.ts]
        [try]
            -> checkBattery() [class ElectricCar, ElectricCar.ts]
                checks battery level
                < number
            [catch error]
            -> logError(error: string) [class Diagnostics, Diagnostics.ts]
                logs the error
                - if warning, continue
                - if critical, stop
                < void
        [finally]
            cleans up diagnostics
            < void

  Sequence: Refueling a Car with a Loop
    refuel(amount: number) [class Car, Car.ts]
        [loop until fuelLevel >= 100]
            -> addFuel(10) [class Car, Car.ts]
                increases fuelLevel by 10
                < void
            < void
        [end loop]
        < void

  Sequence: Event-Driven Charging
    setupChargingListeners() [class Charger, Charger.ts]
        [on plugIn]
        -> chargeCar(car: ElectricCar, 60) [class Charger, Charger.ts]
            charges the car for 60 minutes
            < void
        [on unplug]
        -> stopCharging() [class Charger, Charger.ts]
            stops charging
            < void
        < void

  Sequence: Recursive Diagnostics
    runDeepDiagnostics(car: Car) [class Diagnostics, Diagnostics.ts]
        runs basic diagnostics
        [recurse]
        -> runDeepDiagnostics(car: Car) [class Diagnostics, Diagnostics.ts]
            runs deeper diagnostics
            < void
        < void